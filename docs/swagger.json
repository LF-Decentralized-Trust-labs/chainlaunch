{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "ChainLaunch API provides services for managing blockchain networks and cryptographic keys",
        "title": "ChainLaunch API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://chainlaunch.dev/support",
            "email": "support@chainlaunch.dev"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8100",
    "basePath": "/api/v1",
    "paths": {
        "/ai/boilerplates": {
            "get": {
                "description": "Returns a list of available boilerplates filtered by network platform",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Get available boilerplates",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID to filter boilerplates by platform",
                        "name": "network_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/boilerplates.BoilerplateConfig"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ai/generate": {
            "post": {
                "description": "Generates code based on the provided prompt and project context",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Generate code",
                "parameters": [
                    {
                        "description": "Generation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.GenerateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ai.GenerateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ai/models": {
            "get": {
                "description": "Returns a list of available AI models for code generation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Get available AI models",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ai.Model"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ai/{projectId}/chat": {
            "post": {
                "description": "Stream a conversation with the AI assistant using Server-Sent Events (SSE)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Chat with AI assistant",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Chat request containing project ID and messages",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.ChatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream of chat responses",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ai/{projectId}/conversations": {
            "get": {
                "description": "Returns a list of all chat conversations associated with a specific project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Get all conversations for a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ai.ConversationResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ai/{projectId}/conversations/{conversationId}": {
            "get": {
                "description": "Get all messages in a conversation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Get conversation messages",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Conversation ID",
                        "name": "conversationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ai.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ai/{projectId}/conversations/{conversationId}/export": {
            "get": {
                "description": "Get detailed information about a conversation including all messages and metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Get conversation detail",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Conversation ID",
                        "name": "conversationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ai.ConversationDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/audit/logs": {
            "get": {
                "description": "Retrieves a paginated list of audit logs with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audit"
                ],
                "summary": "List audit logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default: 10)",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339 format)",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339 format)",
                        "name": "end",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by event type",
                        "name": "event_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/audit.ListLogsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/audit/logs/{id}": {
            "get": {
                "description": "Retrieves a specific audit log by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Audit"
                ],
                "summary": "Get audit log",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Log ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/audit.Event"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/change-password": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Allows a user to change their own password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Change own password",
                "parameters": [
                    {
                        "description": "Password change request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Invalid current password",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and returns a session cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Invalidates the current session and clears the session cookie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "$ref": "#/definitions/auth.LogoutResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Returns information about the currently authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/auth.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups": {
            "get": {
                "description": "Get a list of all backups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backups"
                ],
                "summary": "List all backups",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/http.BackupResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new backup with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backups"
                ],
                "summary": "Create a new backup",
                "parameters": [
                    {
                        "description": "Backup creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateBackupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.BackupResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/schedules": {
            "get": {
                "description": "Get a list of all backup schedules",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup Schedules"
                ],
                "summary": "List all backup schedules",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/http.BackupScheduleResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new backup schedule with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup Schedules"
                ],
                "summary": "Create a new backup schedule",
                "parameters": [
                    {
                        "description": "Backup schedule creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateBackupScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.BackupScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/schedules/{id}": {
            "get": {
                "description": "Get detailed information about a specific backup schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup Schedules"
                ],
                "summary": "Get a backup schedule by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing backup schedule with new configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup Schedules"
                ],
                "summary": "Update a backup schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Backup schedule update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateBackupScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a backup schedule and stop its execution",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup Schedules"
                ],
                "summary": "Delete a backup schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/schedules/{id}/disable": {
            "put": {
                "description": "Disable a backup schedule to stop it from running",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup Schedules"
                ],
                "summary": "Disable a backup schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/schedules/{id}/enable": {
            "put": {
                "description": "Enable a backup schedule to start running",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup Schedules"
                ],
                "summary": "Enable a backup schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/targets": {
            "get": {
                "description": "Get a list of all backup targets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup Targets"
                ],
                "summary": "List all backup targets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/http.BackupTargetResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new backup target with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup Targets"
                ],
                "summary": "Create a new backup target",
                "parameters": [
                    {
                        "description": "Backup target creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateBackupTargetRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.BackupTargetResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/targets/{id}": {
            "get": {
                "description": "Get detailed information about a specific backup target",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup Targets"
                ],
                "summary": "Get a backup target by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Backup Target ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupTargetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Target not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing backup target with new configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup Targets"
                ],
                "summary": "Update a backup target",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Backup Target ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Backup target update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateBackupTargetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupTargetResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Target not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a backup target and all associated backups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup Targets"
                ],
                "summary": "Delete a backup target",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Backup Target ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Target not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/backups/{id}": {
            "get": {
                "description": "Get detailed information about a specific backup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backups"
                ],
                "summary": "Get a backup by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Backup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BackupResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Backup not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a backup and its associated files",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backups"
                ],
                "summary": "Delete a backup",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Backup ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Backup not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/chaincode-projects": {
            "get": {
                "description": "Get a list of all projects",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "List all projects",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/projects.ListProjectsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new project, scaffold its directory, and store it in the DB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Create a project",
                "parameters": [
                    {
                        "description": "Project info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/projects.CreateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/projects.CreateProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chaincode-projects/{id}": {
            "get": {
                "description": "Get details of a project by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get a project by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/projects.Project"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chaincode-projects/{id}/commits": {
            "get": {
                "description": "Get a paginated list of commits for a project, including added/removed/modified files",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "List project commits with file changes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default 20)",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/projects.CommitsListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chaincode-projects/{id}/commits/{commitHash}": {
            "get": {
                "description": "Get details for a single commit, including file changes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get commit details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Commit hash",
                        "name": "commitHash",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/projects.CommitDetailAPI"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chaincode-projects/{id}/diff": {
            "get": {
                "description": "Get the diff of a file between two commits",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get file diff between two commits",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "File path (relative to project root)",
                        "name": "file",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "From commit hash",
                        "name": "from",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "To commit hash",
                        "name": "to",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Diff",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chaincode-projects/{id}/endorsement-policy": {
            "put": {
                "description": "Update the endorsement policy of an existing project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Update a project's endorsement policy",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update project endorsement policy request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/projects.UpdateProjectEndorsementPolicyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/projects.Project"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chaincode-projects/{id}/file_at_commit": {
            "get": {
                "description": "Get the contents of a file at a specific commit hash",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get file contents at a specific commit",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "File path (relative to project root)",
                        "name": "file",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Commit hash",
                        "name": "commit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File contents",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chaincode-projects/{id}/invoke": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Invokes a transaction on the specified chaincode project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chaincode Projects"
                ],
                "summary": "Invoke a chaincode transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Chaincode Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Transaction parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/projects.HandlerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction result",
                        "schema": {
                            "$ref": "#/definitions/projects.HandlerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/chaincode-projects/{id}/logs": {
            "get": {
                "description": "Stream or return the logs for the project's running container",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get logs for a project server",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chaincode-projects/{id}/logs/stream": {
            "get": {
                "description": "Stream logs for the project's running container using SSE",
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Stream real-time logs for a project server",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE stream of logs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chaincode-projects/{id}/query": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Queries the state of the specified chaincode project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chaincode Projects"
                ],
                "summary": "Query a chaincode transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Chaincode Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Query parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/projects.HandlerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Query result",
                        "schema": {
                            "$ref": "#/definitions/projects.HandlerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Project not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/chaincode-projects/{id}/start": {
            "post": {
                "description": "Start the server process for a given project using its boilerplate",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Start the server for a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chaincode-projects/{id}/stop": {
            "post": {
                "description": "Stop the server process for a given project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Stop the server for a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/dummy": {
            "post": {
                "description": "Submit a signed config update proposal for execution",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Submit config update proposal",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Proposal ID",
                        "name": "proposalId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.RemoveOrgPayload"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateOrgMSPPayload"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/http.SetAnchorPeersPayload"
                        }
                    },
                    "203": {
                        "description": "Non-Authoritative Information",
                        "schema": {
                            "$ref": "#/definitions/http.AddConsenterPayload"
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/http.RemoveConsenterPayload"
                        }
                    },
                    "205": {
                        "description": "Reset Content",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateConsenterPayload"
                        }
                    },
                    "206": {
                        "description": "Partial Content",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateEtcdRaftOptionsPayload"
                        }
                    },
                    "207": {
                        "description": "Multi-Status",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateBatchSizePayload"
                        }
                    },
                    "208": {
                        "description": "Already Reported",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateBatchTimeoutPayload"
                        }
                    }
                }
            }
        },
        "/key-providers": {
            "get": {
                "description": "Get a list of all configured key providers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Providers"
                ],
                "summary": "List all key providers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ProviderResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new provider for key management",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Providers"
                ],
                "summary": "Create a new key provider",
                "parameters": [
                    {
                        "description": "Provider creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateProviderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ProviderResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/key-providers/{id}": {
            "get": {
                "description": "Get detailed information about a specific key provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Providers"
                ],
                "summary": "Get a specific provider",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ProviderResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Provider not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific key provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Providers"
                ],
                "summary": "Delete a provider",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Provider not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Provider has existing keys",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/keys": {
            "get": {
                "description": "Get a paginated list of keys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Get paginated keys",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new key pair with specified algorithm and parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Create a new key",
                "parameters": [
                    {
                        "description": "Key creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.KeyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/keys/all": {
            "get": {
                "description": "Get all keys with their certificates and metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Get all keys",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.KeyResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/keys/filter": {
            "get": {
                "description": "Get keys filtered by algorithm type and/or curve type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Filter keys by algorithm and curve",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Algorithm type (e.g., RSA, ECDSA)",
                        "name": "algorithm",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Curve type (e.g., P256, P384, P521)",
                        "name": "curve",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/keys/{id}": {
            "get": {
                "description": "Get detailed information about a specific key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Get a specific key by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KeyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Key not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific key by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Delete a key",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Key not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/keys/{keyID}/sign": {
            "post": {
                "description": "Sign a certificate for a key using a CA key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Keys"
                ],
                "summary": "Sign a certificate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Key ID to sign",
                        "name": "keyID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Certificate signing request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KeyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Key not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/metrics/deploy": {
            "post": {
                "description": "Deploys a new Prometheus instance with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Deploy a new Prometheus instance",
                "parameters": [
                    {
                        "description": "Prometheus deployment configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.DeployPrometheusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/metrics/node/{id}": {
            "get": {
                "description": "Retrieves metrics for a specific node by ID and optional PromQL query",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Get metrics for a specific node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PromQL query to filter metrics",
                        "name": "query",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/metrics/node/{id}/label/{label}/values": {
            "get": {
                "description": "Retrieves all values for a specific label, optionally filtered by metric matches and node ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Get label values for a specific label",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Label name",
                        "name": "label",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "description": "Metric matches (e.g. {__name__=\\",
                        "name": "match",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Label values",
                        "schema": {
                            "$ref": "#/definitions/types.LabelValuesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/metrics/node/{id}/query": {
            "post": {
                "description": "Execute a custom Prometheus query with optional time range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Execute custom Prometheus query",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Query parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CustomQueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.QueryResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/metrics/node/{id}/range": {
            "get": {
                "description": "Retrieves metrics for a specific node within a specified time range",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Get metrics for a specific node with time range",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "PromQL query",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start time (RFC3339 format)",
                        "name": "start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End time (RFC3339 format)",
                        "name": "end",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Step duration (e.g. 1m, 5m, 1h)",
                        "name": "step",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics data",
                        "schema": {
                            "$ref": "#/definitions/types.MetricsDataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/metrics/reload": {
            "post": {
                "description": "Triggers a reload of the Prometheus configuration to pick up any changes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Reload Prometheus configuration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/metrics/status": {
            "get": {
                "description": "Returns the current status of the Prometheus instance including version, port, and configuration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Get Prometheus status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_metrics_common.Status"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/metrics/undeploy": {
            "post": {
                "description": "Stops and removes the Prometheus instance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Undeploy Prometheus instance",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/networks/besu": {
            "get": {
                "description": "Get a paginated list of Besu networks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Besu Networks"
                ],
                "summary": "List Besu networks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of items to return (default: 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to skip (default: 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ListBesuNetworksResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Besu network with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Besu Networks"
                ],
                "summary": "Create a new Besu network",
                "parameters": [
                    {
                        "description": "Network creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateBesuNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BesuNetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/besu/import": {
            "post": {
                "description": "Import an existing Besu network using its genesis file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Besu Networks"
                ],
                "summary": "Import a Besu network",
                "parameters": [
                    {
                        "description": "Import network request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.ImportBesuNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ImportNetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/besu/{id}": {
            "get": {
                "description": "Get details of a specific Besu network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Besu Networks"
                ],
                "summary": "Get a Besu network by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BesuNetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing Besu network and all its resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Besu Networks"
                ],
                "summary": "Delete a Besu network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric": {
            "get": {
                "description": "Get a paginated list of Fabric networks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "List Fabric networks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of items to return (default: 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to skip (default: 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ListNetworksResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Hyperledger Fabric network with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Create a new Fabric network",
                "parameters": [
                    {
                        "description": "Network creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateFabricNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/by-name/{name}": {
            "get": {
                "description": "Get details of a specific Fabric network using its slug",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Get a Fabric network by slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Network Slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/import": {
            "post": {
                "description": "Import an existing Fabric network using its genesis block",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Import a Fabric network",
                "parameters": [
                    {
                        "description": "Import network request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.ImportFabricNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ImportNetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/import-with-org": {
            "post": {
                "description": "Import an existing Fabric network using organization details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Import a Fabric network with organization",
                "parameters": [
                    {
                        "description": "Import network with org request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.ImportFabricNetworkWithOrgRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ImportNetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}": {
            "get": {
                "description": "Get details of a specific Fabric network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Get a Fabric network by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing Fabric network and all its resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Delete a Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/anchor-peers": {
            "post": {
                "description": "Set the anchor peers for an organization in a Fabric network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Set anchor peers for an organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Anchor peers configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.SetAnchorPeersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.SetAnchorPeersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/blocks": {
            "get": {
                "description": "Get a paginated list of blocks from a Fabric network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Get list of blocks from Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of blocks to return (default: 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of blocks to skip (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Get blocks in reverse order (default: false)",
                        "name": "reverse",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BlockListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/blocks/{blockNum}": {
            "get": {
                "description": "Get all transactions from a specific block in a Fabric network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Get transactions from a specific block",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Block Number",
                        "name": "blockNum",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BlockTransactionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/channel-config": {
            "get": {
                "description": "Retrieve the channel configuration for a Fabric network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Get Fabric network channel configuration",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ChannelConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/current-channel-config": {
            "get": {
                "description": "Retrieve the current channel configuration for a Fabric network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Get Fabric network current channel configuration",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ChannelConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/info": {
            "get": {
                "description": "Retrieve detailed information about the Fabric blockchain including height and block hashes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Get Fabric chain information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ChainInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/nodes": {
            "get": {
                "description": "Get all nodes associated with a network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Get network nodes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.GetNetworkNodesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a node (peer or orderer) to an existing network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Add node to network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Node addition request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.AddNodeToNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/orderers/{ordererId}": {
            "delete": {
                "description": "Remove an orderer node from an existing Fabric network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Remove orderer from Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Orderer ID",
                        "name": "ordererId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/orderers/{ordererId}/join": {
            "post": {
                "description": "Join an orderer node to an existing Fabric network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Join orderer to Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Orderer ID",
                        "name": "ordererId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/orderers/{ordererId}/unjoin": {
            "post": {
                "description": "Remove an orderer node from a channel but keep it in the network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Unjoin orderer from Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Orderer ID",
                        "name": "ordererId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/organization-crl": {
            "post": {
                "description": "Update the Certificate Revocation List (CRL) for an organization in the network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Update organization CRL",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Organization CRL update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateOrganizationCRLRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.UpdateOrganizationCRLResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/organizations/{orgId}/config": {
            "get": {
                "description": "Get the network configuration as YAML",
                "produces": [
                    "text/yaml"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Get network configuration",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Network configuration YAML",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/peers/{peerId}": {
            "delete": {
                "description": "Remove a peer node from an existing Fabric network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Remove peer from Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Peer ID",
                        "name": "peerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/peers/{peerId}/join": {
            "post": {
                "description": "Join a peer node to an existing Fabric network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Join peer to Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Peer ID",
                        "name": "peerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/peers/{peerId}/unjoin": {
            "post": {
                "description": "Remove a peer node from a channel but keep it in the network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Unjoin peer from Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Peer ID",
                        "name": "peerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NetworkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/reload-block": {
            "post": {
                "description": "Reloads the current config block for a network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Reload network config block",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/transactions/{txId}": {
            "get": {
                "description": "Get detailed information about a specific transaction in a Fabric network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Get transaction details by transaction ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "txId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.TransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/networks/fabric/{id}/update-config": {
            "post": {
                "description": "Prepare a config update proposal for a Fabric network using the provided operations.\nThe following operation types are supported:\n- add_org: Add a new organization to the channel\n- remove_org: Remove an organization from the channel\n- update_org_msp: Update an organization's MSP configuration\n- set_anchor_peers: Set anchor peers for an organization\n- add_consenter: Add a new consenter to the orderer\n- remove_consenter: Remove a consenter from the orderer\n- update_consenter: Update a consenter in the orderer\n- update_etcd_raft_options: Update etcd raft options for the orderer\n- update_batch_size: Update batch size for the orderer\n- update_batch_timeout: Update batch timeout for the orderer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Fabric Networks"
                ],
                "summary": "Prepare a config update for a Fabric network",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Network ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Config update operations",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateFabricNetworkRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ConfigUpdateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes": {
            "get": {
                "description": "Get a paginated list of nodes with optional platform filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "List all nodes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by blockchain platform",
                        "name": "platform",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.PaginatedNodesResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new node with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Create a new node",
                "parameters": [
                    {
                        "description": "Node creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateNodeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.NodeResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/defaults/besu-node": {
            "get": {
                "description": "Get default configuration values for a Besu node",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Get default values for Besu node",
                "parameters": [
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 1,
                        "description": "Number of Besu nodes",
                        "name": "besuNodes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.BesuNodeDefaultsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/defaults/fabric": {
            "get": {
                "description": "Get default configuration values for multiple Fabric nodes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Get default values for multiple Fabric nodes",
                "parameters": [
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 1,
                        "description": "Number of peer nodes",
                        "name": "peerCount",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 1,
                        "description": "Number of orderer nodes",
                        "name": "ordererCount",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "service",
                            "docker"
                        ],
                        "type": "string",
                        "default": "service",
                        "description": "Deployment mode",
                        "name": "mode",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.NodesDefaultsResult"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/defaults/fabric-orderer": {
            "get": {
                "description": "Get default configuration values for a Fabric orderer node",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Get default values for Fabric orderer node",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.NodeDefaults"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/defaults/fabric-peer": {
            "get": {
                "description": "Get default configuration values for a Fabric peer node",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Get default values for Fabric peer node",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.NodeDefaults"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/platform/{platform}": {
            "get": {
                "description": "Get a paginated list of nodes filtered by blockchain platform",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "List nodes by platform",
                "parameters": [
                    {
                        "enum": [
                            "FABRIC",
                            "BESU"
                        ],
                        "type": "string",
                        "description": "Blockchain platform (FABRIC/BESU)",
                        "name": "platform",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.PaginatedNodesResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}": {
            "get": {
                "description": "Get a node by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Get a node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NodeResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing node's configuration based on its type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Update a node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update node request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateNodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NodeResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a node by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Delete a node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/certificates/renew": {
            "post": {
                "description": "Renews the TLS and signing certificates for a Fabric node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Renew node certificates",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NodeResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/channels": {
            "get": {
                "description": "Retrieves all channels for a specific Fabric node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Get channels for a Fabric node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NodeChannelsResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/channels/{channelID}/chaincodes": {
            "get": {
                "description": "Retrieves all committed chaincodes for a specific channel on a Fabric peer node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Get committed chaincodes for a Fabric peer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Channel ID",
                        "name": "channelID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/http.ChaincodeResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/events": {
            "get": {
                "description": "Get a paginated list of events for a specific node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Get node events",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.PaginatedNodeEventsResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/logs": {
            "get": {
                "description": "Stream logs from a specific node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Tail node logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Follow logs",
                        "name": "follow",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Number of lines to show from the end",
                        "name": "tail",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Log stream",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/restart": {
            "post": {
                "description": "Restart a node by ID (stops and starts the node)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Restart a node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NodeResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/start": {
            "post": {
                "description": "Start a node by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Start a node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NodeResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/stop": {
            "post": {
                "description": "Stop a node by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Stop a node",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.NodeResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Node not found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/providers": {
            "get": {
                "description": "Get a list of all notification providers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "List notification providers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/http.ProviderResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new notification provider with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Create a notification provider",
                "parameters": [
                    {
                        "description": "Provider creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateProviderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.ProviderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/providers/{id}": {
            "get": {
                "description": "Get detailed information about a specific notification provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get a notification provider",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ProviderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing notification provider with new configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Update a notification provider",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Provider update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateProviderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.ProviderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a notification provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Delete a notification provider",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/providers/{id}/test": {
            "post": {
                "description": "Test a notification provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Test a notification provider",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Test provider request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.TestProviderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.TestProviderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations": {
            "get": {
                "description": "Get a list of all Fabric organizations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "List all Fabric organizations",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Maximum number of organizations to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of organizations to skip",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.PaginatedOrganizationsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Fabric organization with the specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Create a new Fabric organization",
                "parameters": [
                    {
                        "description": "Organization creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.CreateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organizations/by-mspid/{mspid}": {
            "get": {
                "description": "Get a Fabric organization by MSP ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get a Fabric organization by MSP ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MSP ID",
                        "name": "mspid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{id}": {
            "get": {
                "description": "Get a Fabric organization by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get a Fabric organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing Fabric organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Update a Fabric organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Organization update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.UpdateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.OrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Fabric organization by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete a Fabric organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{id}/crl": {
            "get": {
                "description": "Get the current Certificate Revocation List for the organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/x-pem-file"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get organization's CRL",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PEM encoded CRL",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{id}/crl/revoke/pem": {
            "post": {
                "description": "Add a certificate to the organization's CRL using its PEM encoded data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Revoke a certificate using PEM data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Certificate revocation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.RevokeCertificateByPEMRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{id}/crl/revoke/serial": {
            "post": {
                "description": "Add a certificate to the organization's CRL using its serial number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Revoke a certificate using its serial number",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Certificate revocation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.RevokeCertificateBySerialRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a certificate from the organization's CRL using its serial number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete a revoked certificate using its serial number",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Certificate deletion request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.DeleteRevokedCertificateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{id}/revoked-certificates": {
            "get": {
                "description": "Get all revoked certificates for the organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get organization's revoked certificates",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.RevokedCertificateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/plugins": {
            "get": {
                "description": "Get a list of all available plugins",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "List all plugins",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new plugin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Create a plugin",
                "parameters": [
                    {
                        "description": "Plugin to create",
                        "name": "plugin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/plugins/available": {
            "get": {
                "description": "Get a list of all available plugins from configured GitHub repositories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "List available plugins from GitHub sources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/plugin.AvailablePluginsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/plugins/available/refresh": {
            "post": {
                "description": "Triggers a refresh of the available plugins cache from GitHub sources",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Refresh available plugins",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/plugin.AvailablePluginsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/plugins/{name}": {
            "get": {
                "description": "Get a specific plugin by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Get a plugin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plugin name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing plugin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Update a plugin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plugin name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Plugin to update",
                        "name": "plugin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing plugin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Delete a plugin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plugin name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/plugins/{name}/deploy": {
            "post": {
                "description": "Deploy a plugin with the given parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Deploy a plugin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plugin name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Deployment parameters",
                        "name": "parameters",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/plugins/{name}/deployment-status": {
            "get": {
                "description": "Get detailed information about a plugin deployment including service status, logs, and metrics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Get detailed deployment status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plugin name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.DeploymentStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/plugins/{name}/resume": {
            "post": {
                "description": "Resume a previously deployed plugin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Resume a plugin deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plugin name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/plugins/{name}/services": {
            "get": {
                "description": "Get all services defined in the plugin's docker-compose configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Get Docker Compose services",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plugin name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/plugin.ServiceStatus"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/plugins/{name}/status": {
            "get": {
                "description": "Get the current status of a plugin deployment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Get plugin deployment status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plugin name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.DeploymentStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/plugins/{name}/stop": {
            "post": {
                "description": "Stop a running plugin deployment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plugins"
                ],
                "summary": "Stop a plugin deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plugin name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/dirs/create": {
            "post": {
                "description": "Create a new directory in a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "directories"
                ],
                "summary": "Create a directory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Directory create info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dirs.CreateDirRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dirs.CreateDirResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/dirs/delete": {
            "delete": {
                "description": "Delete a directory in a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "directories"
                ],
                "summary": "Delete a directory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project name",
                        "name": "project",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Directory to delete, relative to project root",
                        "name": "dir",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dirs.DeleteDirResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/dirs/list": {
            "get": {
                "description": "List files and directories in a given project and directory. Large directories (e.g., node_modules) are summarized/skipped.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "directories"
                ],
                "summary": "List files and directories",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Directory to list, relative to project root",
                        "name": "dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dirs.ListEntriesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/files/delete": {
            "delete": {
                "description": "Delete a file in a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Delete a file",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "File path relative to project root",
                        "name": "path",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/files.DeleteFileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/files/entries": {
            "get": {
                "description": "List the full directory tree for a project, excluding large/ignored folders (e.g., node_modules, .git)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "List full project directory tree",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/files.DirectoryTreeNode"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/files/list": {
            "get": {
                "description": "List files in a given project and directory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "List files",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Directory to list, relative to project root",
                        "name": "dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/files.ListFilesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/files/read": {
            "get": {
                "description": "Get the contents of a file in a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Read file contents",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "File path relative to project root",
                        "name": "path",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/files.ReadFileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/files/write": {
            "post": {
                "description": "Write or modify the contents of a file in a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Write file contents",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "File write info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/files.WriteFileRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/files.WriteFileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sc/besu/deploy": {
            "post": {
                "description": "Deploy a smart contract to a Besu (EVM) network",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SmartContracts"
                ],
                "summary": "Deploy Besu smart contract",
                "parameters": [
                    {
                        "description": "Besu contract deployment parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.BesuDeployRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.BesuDeployResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/chaincodes": {
            "get": {
                "description": "List all Fabric chaincodes deployed via Docker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SmartContracts"
                ],
                "summary": "List deployed Fabric chaincodes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.ListChaincodesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new chaincode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chaincode"
                ],
                "summary": "Create a chaincode",
                "parameters": [
                    {
                        "description": "Chaincode info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.CreateChaincodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.CreateChaincodeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/chaincodes/{chaincodeId}/definitions": {
            "get": {
                "description": "List all definitions for a given chaincode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chaincode"
                ],
                "summary": "List chaincode definitions for a chaincode",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Chaincode ID",
                        "name": "chaincodeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.ListChaincodeDefinitionsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new chaincode definition for a chaincode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chaincode"
                ],
                "summary": "Create a chaincode definition",
                "parameters": [
                    {
                        "description": "Chaincode definition info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.CreateChaincodeDefinitionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.CreateChaincodeDefinitionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/chaincodes/{id}": {
            "get": {
                "description": "Get a specific Fabric chaincode and its Docker/runtime info by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SmartContracts"
                ],
                "summary": "Get Fabric chaincode details by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Chaincode ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.FabricChaincodeDetail"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/definitions/{definitionId}": {
            "put": {
                "description": "Update an existing chaincode definition by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chaincode"
                ],
                "summary": "Update a chaincode definition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Chaincode Definition ID",
                        "name": "definitionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Chaincode definition update info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.UpdateChaincodeDefinitionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.ChaincodeDefinitionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a chaincode definition by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chaincode"
                ],
                "summary": "Delete a chaincode definition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Chaincode Definition ID",
                        "name": "definitionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/definitions/{definitionId}/approve": {
            "post": {
                "description": "Approve chaincode for a given definition",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chaincode"
                ],
                "summary": "Approve chaincode based on chaincode definition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Chaincode Definition ID",
                        "name": "definitionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Peer ID to use for approval",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.ApproveChaincodeByDefinitionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/definitions/{definitionId}/commit": {
            "post": {
                "description": "Commit chaincode for a given definition",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chaincode"
                ],
                "summary": "Commit chaincode based on chaincode definition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Chaincode Definition ID",
                        "name": "definitionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Peer ID to use for commit",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.CommitChaincodeByDefinitionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/definitions/{definitionId}/deploy": {
            "post": {
                "description": "Deploy chaincode for a given definition using Docker image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chaincode"
                ],
                "summary": "Deploy chaincode based on chaincode definition (Docker)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Chaincode Definition ID",
                        "name": "definitionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Docker deploy params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.DeployChaincodeByDefinitionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/definitions/{definitionId}/install": {
            "post": {
                "description": "Install chaincode on peers for a given definition",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chaincode"
                ],
                "summary": "Install chaincode based on chaincode definition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Chaincode Definition ID",
                        "name": "definitionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Peer IDs to install on",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.InstallChaincodeByDefinitionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/definitions/{definitionId}/timeline": {
            "get": {
                "description": "Get the timeline of install/approve/commit/deploy events for a chaincode definition",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chaincode"
                ],
                "summary": "Get timeline of events for a chaincode definition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Chaincode Definition ID",
                        "name": "definitionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/chainlaunchdeploy.ChaincodeDefinitionEvent"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/deploy": {
            "post": {
                "description": "Deploy a chaincode to a Fabric network (install, approve, commit)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SmartContracts"
                ],
                "summary": "Deploy Fabric chaincode",
                "parameters": [
                    {
                        "description": "Fabric chaincode deployment parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.FabricDeployRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.FabricDeployResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/docker-deploy": {
            "post": {
                "description": "Deploy a chaincode to a Fabric network using a Docker image, package ID, and port mapping. If host_port is empty, a free port is chosen. If container_port is empty, defaults to 7052.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SmartContracts"
                ],
                "summary": "Deploy Fabric chaincode with Docker image",
                "parameters": [
                    {
                        "description": "Fabric chaincode Docker deployment parameters (host_port: optional, container_port: optional, defaults to 7052)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.FabricChaincodeDockerDeployRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.FabricChaincodeDockerDeployResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/peer/{peerId}/chaincode/approve": {
            "post": {
                "description": "Approve a chaincode definition for an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SmartContracts"
                ],
                "summary": "Approve Fabric chaincode",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Peer ID",
                        "name": "peerId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fabric chaincode approve parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.FabricApproveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.FabricApproveResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/peer/{peerId}/chaincode/commit": {
            "post": {
                "description": "Commit a chaincode definition to the channel",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SmartContracts"
                ],
                "summary": "Commit Fabric chaincode",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Peer ID",
                        "name": "peerId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fabric chaincode commit parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.FabricCommitRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.FabricCommitResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/sc/fabric/peer/{peerId}/chaincode/install": {
            "post": {
                "description": "Install a chaincode package on a Fabric peer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SmartContracts"
                ],
                "summary": "Install Fabric chaincode",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Peer ID",
                        "name": "peerId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fabric chaincode install parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.FabricInstallRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chainlaunchdeploy.FabricInstallResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/settings": {
            "get": {
                "description": "Get the default setting's details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Get the default setting",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.Setting"
                        }
                    }
                }
            },
            "post": {
                "description": "Create or update the default setting with the provided configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Create or update the default setting",
                "parameters": [
                    {
                        "description": "Setting configuration",
                        "name": "setting",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateSettingParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.Setting"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Returns a list of all users (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/auth.UserResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Requires admin role",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates a new user with specified role (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "User to create",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/auth.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Requires admin role",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Get a user's details by ID (admin only)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/auth.UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Requires admin role",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Updates an existing user (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User updates",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated",
                        "schema": {
                            "$ref": "#/definitions/auth.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Requires admin role",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Deletes a user (admin only)",
                "tags": [
                    "Users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Requires admin role",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/{id}/password": {
            "put": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Update a user's password (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user password",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Requires admin role or self-modification not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/users/{id}/role": {
            "put": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Update a user's role (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New role",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User role updated",
                        "schema": {
                            "$ref": "#/definitions/auth.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Requires admin role or self-modification not allowed",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ai.ChatMessage": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "parts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ai.ChatMessagePart"
                    }
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "ai.ChatMessagePart": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "ai.ChatRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ai.ChatMessage"
                    }
                },
                "projectId": {
                    "type": "string"
                }
            }
        },
        "ai.ConversationDetail": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ai.Message"
                    }
                },
                "projectId": {
                    "type": "integer"
                },
                "startedAt": {
                    "type": "string"
                }
            }
        },
        "ai.ConversationResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "projectId": {
                    "type": "integer"
                },
                "startedAt": {
                    "type": "string"
                }
            }
        },
        "ai.GenerateRequest": {
            "type": "object",
            "properties": {
                "projectId": {
                    "type": "integer"
                },
                "prompt": {
                    "type": "string"
                }
            }
        },
        "ai.GenerateResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "ai.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "conversationId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "sender": {
                    "type": "string"
                },
                "toolCalls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.ToolCall"
                    }
                }
            }
        },
        "ai.Model": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "maxTokens": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "audit.Event": {
            "type": "object",
            "properties": {
                "affectedResource": {
                    "type": "string"
                },
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "eventOutcome": {
                    "$ref": "#/definitions/audit.EventOutcome"
                },
                "eventSource": {
                    "type": "string"
                },
                "eventType": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "requestId": {
                    "type": "string"
                },
                "sessionId": {
                    "type": "string"
                },
                "severity": {
                    "$ref": "#/definitions/audit.Severity"
                },
                "sourceIp": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "userIdentity": {
                    "type": "integer"
                }
            }
        },
        "audit.EventOutcome": {
            "type": "string",
            "enum": [
                "SUCCESS",
                "FAILURE",
                "PENDING"
            ],
            "x-enum-varnames": [
                "EventOutcomeSuccess",
                "EventOutcomeFailure",
                "EventOutcomePending"
            ]
        },
        "audit.ListLogsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/audit.Event"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "audit.Severity": {
            "type": "string",
            "enum": [
                "DEBUG",
                "INFO",
                "WARNING",
                "CRITICAL"
            ],
            "x-enum-varnames": [
                "SeverityDebug",
                "SeverityInfo",
                "SeverityWarning",
                "SeverityCritical"
            ]
        },
        "auth.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "current_password",
                "new_password"
            ],
            "properties": {
                "current_password": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "auth.CreateUserRequest": {
            "type": "object",
            "required": [
                "password",
                "role",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "role": {
                    "enum": [
                        "admin",
                        "manager",
                        "viewer"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/auth.Role"
                        }
                    ]
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "auth.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "auth.LoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "auth.LogoutResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "auth.Role": {
            "type": "string",
            "enum": [
                "admin",
                "manager",
                "viewer"
            ],
            "x-enum-varnames": [
                "RoleAdmin",
                "RoleManager",
                "RoleViewer"
            ]
        },
        "auth.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "role": {
                    "enum": [
                        "admin",
                        "manager",
                        "viewer"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/auth.Role"
                        }
                    ]
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "auth.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_login_at": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/auth.Role"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "block.Block": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "dataHash": {
                    "type": "string"
                },
                "number": {
                    "type": "integer"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/block.Transaction"
                    }
                }
            }
        },
        "block.Transaction": {
            "type": "object",
            "properties": {
                "chaincodeId": {
                    "type": "string"
                },
                "channelId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "event": {
                    "$ref": "#/definitions/block.TransactionEvent"
                },
                "id": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "reads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/block.TransactionRead"
                    }
                },
                "request": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "response": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "type": {
                    "$ref": "#/definitions/block.TxType"
                },
                "version": {
                    "type": "string"
                },
                "writes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/block.TransactionWrite"
                    }
                }
            }
        },
        "block.TransactionEvent": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "block.TransactionRead": {
            "type": "object",
            "properties": {
                "blockNumVersion": {
                    "type": "integer"
                },
                "chaincodeId": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "txNumVersion": {
                    "type": "integer"
                }
            }
        },
        "block.TransactionWrite": {
            "type": "object",
            "properties": {
                "chaincodeId": {
                    "type": "string"
                },
                "deleted": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "block.TxType": {
            "type": "string",
            "enum": [
                "MESSAGE",
                "CONFIG",
                "CONFIG_UPDATE",
                "ENDORSER_TRANSACTION",
                "ORDERER_TRANSACTION",
                "DELIVER_SEEK_INFO",
                "CHAINCODE_PACKAGE"
            ],
            "x-enum-varnames": [
                "MESSAGE",
                "CONFIG",
                "CONFIG_UPDATE",
                "ENDORSER_TRANSACTION",
                "ORDERER_TRANSACTION",
                "DELIVER_SEEK_INFO",
                "CHAINCODE_PACKAGE"
            ]
        },
        "boilerplates.BoilerplateConfig": {
            "type": "object",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "ID is the key in the configs map",
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "repoName": {
                    "type": "string"
                },
                "repoOwner": {
                    "type": "string"
                },
                "repoPath": {
                    "type": "string"
                }
            }
        },
        "chaincode.Gateway": {
            "type": "object"
        },
        "chaincode.Peer": {
            "type": "object"
        },
        "chainlaunchdeploy.ApproveChaincodeByDefinitionRequest": {
            "type": "object",
            "properties": {
                "peer_id": {
                    "description": "Peer ID to use for approval\nrequired: true",
                    "type": "integer"
                }
            }
        },
        "chainlaunchdeploy.BesuDeployRequest": {
            "type": "object",
            "properties": {
                "abi": {
                    "description": "Contract ABI (JSON string)",
                    "type": "string"
                },
                "bytecode": {
                    "description": "Compiled contract bytecode",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "chainID": {
                    "description": "Chain ID for the target network",
                    "type": "integer"
                },
                "constructorArgs": {
                    "description": "Constructor arguments for the contract",
                    "type": "array",
                    "items": {}
                },
                "rpcurl": {
                    "description": "RPC endpoint for Besu node",
                    "type": "string"
                },
                "solidityCode": {
                    "description": "(Optional) Solidity source code (for reference)",
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.BesuDeployResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/chainlaunchdeploy.DeploymentResult"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.Chaincode": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "ISO8601",
                    "type": "string"
                },
                "definitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chainlaunchdeploy.ChaincodeDefinition"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "network_id": {
                    "type": "integer"
                },
                "network_name": {
                    "description": "Name of the network",
                    "type": "string"
                },
                "network_platform": {
                    "description": "Platform/type (fabric/besu/etc)",
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.ChaincodeDefinition": {
            "type": "object",
            "properties": {
                "chaincode_address": {
                    "type": "string"
                },
                "chaincode_id": {
                    "type": "integer"
                },
                "created_at": {
                    "description": "ISO8601",
                    "type": "string"
                },
                "docker_image": {
                    "type": "string"
                },
                "endorsement_policy": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "peer_statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chainlaunchdeploy.PeerStatus"
                    }
                },
                "sequence": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.ChaincodeDefinitionEvent": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "definition_id": {
                    "type": "integer"
                },
                "event_data": {},
                "event_type": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "chainlaunchdeploy.ChaincodeDefinitionResponse": {
            "type": "object",
            "properties": {
                "chaincode_address": {
                    "type": "string"
                },
                "chaincode_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "docker_image": {
                    "type": "string"
                },
                "endorsement_policy": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "sequence": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.ChaincodeResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "network_id": {
                    "type": "integer"
                },
                "network_name": {
                    "type": "string"
                },
                "network_platform": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.CommitChaincodeByDefinitionRequest": {
            "type": "object",
            "properties": {
                "peer_id": {
                    "description": "Peer ID to use for commit\nrequired: true",
                    "type": "integer"
                }
            }
        },
        "chainlaunchdeploy.CreateChaincodeDefinitionRequest": {
            "type": "object",
            "properties": {
                "chaincode_address": {
                    "description": "Chaincode address",
                    "type": "string"
                },
                "chaincode_id": {
                    "description": "Chaincode ID\nrequired: true",
                    "type": "integer"
                },
                "docker_image": {
                    "description": "Docker image\nrequired: true",
                    "type": "string"
                },
                "endorsement_policy": {
                    "description": "Endorsement policy",
                    "type": "string"
                },
                "sequence": {
                    "description": "Sequence\nrequired: true",
                    "type": "integer"
                },
                "version": {
                    "description": "Version\nrequired: true",
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.CreateChaincodeDefinitionResponse": {
            "type": "object",
            "properties": {
                "definition": {
                    "$ref": "#/definitions/chainlaunchdeploy.ChaincodeDefinitionResponse"
                }
            }
        },
        "chainlaunchdeploy.CreateChaincodeRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the chaincode\nrequired: true",
                    "type": "string"
                },
                "network_id": {
                    "description": "Network ID\nrequired: true",
                    "type": "integer"
                }
            }
        },
        "chainlaunchdeploy.CreateChaincodeResponse": {
            "type": "object",
            "properties": {
                "chaincode": {
                    "$ref": "#/definitions/chainlaunchdeploy.ChaincodeResponse"
                }
            }
        },
        "chainlaunchdeploy.DeployChaincodeByDefinitionRequest": {
            "type": "object"
        },
        "chainlaunchdeploy.DeploymentResult": {
            "type": "object",
            "properties": {
                "chaincodeID": {
                    "description": "For Fabric",
                    "type": "string"
                },
                "contractAddress": {
                    "description": "For EVM",
                    "type": "string"
                },
                "error": {},
                "logs": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "transactionHash": {
                    "description": "For EVM",
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.DockerContainerInfo": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.FabricApproveRequest": {
            "type": "object",
            "properties": {
                "channelID": {
                    "type": "string"
                },
                "endorsementPolicy": {
                    "type": "string"
                },
                "initRequired": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "packageID": {
                    "type": "string"
                },
                "sequence": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.FabricApproveResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/chainlaunchdeploy.DeploymentResult"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.FabricChaincodeApproveParams": {
            "type": "object",
            "properties": {
                "channelID": {
                    "type": "string"
                },
                "collectionsConfig": {
                    "description": "Serialized CollectionConfigPackage",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "endorsementPolicy": {
                    "type": "string"
                },
                "gateway": {
                    "$ref": "#/definitions/chaincode.Gateway"
                },
                "initRequired": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "packageID": {
                    "type": "string"
                },
                "sequence": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.FabricChaincodeCommitParams": {
            "type": "object",
            "properties": {
                "channelID": {
                    "type": "string"
                },
                "collectionsConfig": {
                    "description": "Serialized CollectionConfigPackage",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "endorsementPolicy": {
                    "type": "string"
                },
                "gateway": {
                    "$ref": "#/definitions/chaincode.Gateway"
                },
                "initRequired": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "sequence": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.FabricChaincodeDetail": {
            "type": "object",
            "properties": {
                "chaincode": {
                    "$ref": "#/definitions/chainlaunchdeploy.Chaincode"
                },
                "definitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chainlaunchdeploy.ChaincodeDefinition"
                    }
                },
                "docker_info": {
                    "$ref": "#/definitions/chainlaunchdeploy.DockerContainerInfo"
                }
            }
        },
        "chainlaunchdeploy.FabricChaincodeDockerDeployRequest": {
            "type": "object",
            "required": [
                "docker_image",
                "name",
                "package_id"
            ],
            "properties": {
                "container_port": {
                    "description": "optional, defaults to 7052",
                    "type": "integer"
                },
                "docker_image": {
                    "type": "string"
                },
                "host_port": {
                    "description": "optional, if 0 a free port is chosen",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "package_id": {
                    "type": "string"
                },
                "slug": {
                    "description": "optional, for updates",
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.FabricChaincodeDockerDeployResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/chainlaunchdeploy.DeploymentResult"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.FabricChaincodeInstallParams": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Chaincode label",
                    "type": "string"
                },
                "packageBytes": {
                    "description": "Chaincode package bytes",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "peer": {
                    "$ref": "#/definitions/chaincode.Peer"
                }
            }
        },
        "chainlaunchdeploy.FabricCommitRequest": {
            "type": "object",
            "properties": {
                "channelID": {
                    "type": "string"
                },
                "endorsementPolicy": {
                    "type": "string"
                },
                "initRequired": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "sequence": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.FabricCommitResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/chainlaunchdeploy.DeploymentResult"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.FabricDeployRequest": {
            "type": "object",
            "properties": {
                "approveParams": {
                    "$ref": "#/definitions/chainlaunchdeploy.FabricChaincodeApproveParams"
                },
                "commitParams": {
                    "$ref": "#/definitions/chainlaunchdeploy.FabricChaincodeCommitParams"
                },
                "installParams": {
                    "$ref": "#/definitions/chainlaunchdeploy.FabricChaincodeInstallParams"
                }
            }
        },
        "chainlaunchdeploy.FabricDeployResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/chainlaunchdeploy.DeploymentResult"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.FabricInstallRequest": {
            "type": "object",
            "required": [
                "label",
                "package_bytes"
            ],
            "properties": {
                "label": {
                    "type": "string"
                },
                "package_bytes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "chainlaunchdeploy.FabricInstallResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/chainlaunchdeploy.DeploymentResult"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.InstallChaincodeByDefinitionRequest": {
            "type": "object",
            "properties": {
                "peer_ids": {
                    "description": "Peer IDs to install the chaincode on\nrequired: true",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "chainlaunchdeploy.ListChaincodeDefinitionsResponse": {
            "type": "object",
            "properties": {
                "definitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chainlaunchdeploy.ChaincodeDefinitionResponse"
                    }
                }
            }
        },
        "chainlaunchdeploy.ListChaincodesResponse": {
            "type": "object",
            "properties": {
                "chaincodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chainlaunchdeploy.ChaincodeResponse"
                    }
                }
            }
        },
        "chainlaunchdeploy.PeerStatus": {
            "type": "object",
            "properties": {
                "definition_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "last_updated": {
                    "description": "ISO8601",
                    "type": "string"
                },
                "peer_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "chainlaunchdeploy.UpdateChaincodeDefinitionRequest": {
            "type": "object",
            "properties": {
                "chaincode_address": {
                    "description": "Chaincode address",
                    "type": "string"
                },
                "docker_image": {
                    "description": "Docker image\nrequired: true",
                    "type": "string"
                },
                "endorsement_policy": {
                    "description": "Endorsement policy",
                    "type": "string"
                },
                "sequence": {
                    "description": "Sequence\nrequired: true",
                    "type": "integer"
                },
                "version": {
                    "description": "Version\nrequired: true",
                    "type": "string"
                }
            }
        },
        "common.QueryResult": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "result": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "metric": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "string"
                                        }
                                    },
                                    "value": {
                                        "description": "For instant queries",
                                        "type": "array",
                                        "items": {}
                                    },
                                    "values": {
                                        "description": "For range queries (matrix)",
                                        "type": "array",
                                        "items": {
                                            "type": "array",
                                            "items": {}
                                        }
                                    }
                                }
                            }
                        },
                        "resultType": {
                            "type": "string"
                        }
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "db.ToolCall": {
            "type": "object",
            "properties": {
                "arguments": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "error": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "id": {
                    "type": "integer"
                },
                "messageId": {
                    "type": "integer"
                },
                "result": {
                    "$ref": "#/definitions/sql.NullString"
                },
                "toolName": {
                    "type": "string"
                }
            }
        },
        "dirs.CreateDirRequest": {
            "type": "object",
            "properties": {
                "dir": {
                    "type": "string",
                    "example": "newdir"
                },
                "project": {
                    "type": "string",
                    "example": "myproject"
                }
            }
        },
        "dirs.CreateDirResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "created"
                }
            }
        },
        "dirs.DeleteDirResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "deleted"
                }
            }
        },
        "dirs.ListEntriesResponse": {
            "description": "Unified response for listing files and directories in a directory",
            "type": "object",
            "properties": {
                "directories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"src\"",
                        "\"docs\"]"
                    ]
                },
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"main.go\"",
                        "\"README.md\"]"
                    ]
                },
                "skipped": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"node_modules\"]"
                    ]
                }
            }
        },
        "files.DeleteFileResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "deleted"
                }
            }
        },
        "files.DirectoryTreeNode": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/files.DirectoryTreeNode"
                    }
                },
                "isDir": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "files.ListFilesResponse": {
            "type": "object",
            "properties": {
                "files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"main.go\"",
                        "\"README.md\"]"
                    ]
                }
            }
        },
        "files.ReadFileResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "file contents"
                }
            }
        },
        "files.WriteFileRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "new file contents"
                },
                "path": {
                    "type": "string",
                    "example": "main.go"
                },
                "project": {
                    "type": "string",
                    "example": "myproject"
                }
            }
        },
        "files.WriteFileResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "written"
                }
            }
        },
        "github_com_chainlaunch_chainlaunch_pkg_metrics_common.Status": {
            "type": "object",
            "properties": {
                "deployment_mode": {
                    "description": "DeploymentMode is the current deployment mode",
                    "type": "string"
                },
                "error": {
                    "description": "Error is any error that occurred while getting the status",
                    "type": "string"
                },
                "port": {
                    "description": "Port is the port Prometheus is listening on",
                    "type": "integer"
                },
                "scrape_interval": {
                    "description": "ScrapeInterval is the current scrape interval",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                },
                "started_at": {
                    "description": "StartedAt is when the instance was started",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the current status of the Prometheus instance (e.g. \"running\", \"stopped\", \"not_deployed\")",
                    "type": "string"
                },
                "version": {
                    "description": "Version is the version of Prometheus being used",
                    "type": "string"
                }
            }
        },
        "github_com_chainlaunch_chainlaunch_pkg_networks_http.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "github_com_chainlaunch_chainlaunch_pkg_notifications_http.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "github_com_chainlaunch_chainlaunch_pkg_plugin_types.Parameters": {
            "type": "object",
            "properties": {
                "$schema": {
                    "type": "string"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/types.ParameterSpec"
                    }
                },
                "required": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_chainlaunch_chainlaunch_pkg_plugin_types.Plugin": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string"
                },
                "deploymentStatus": {
                    "$ref": "#/definitions/types.DeploymentStatus"
                },
                "kind": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/types.Metadata"
                },
                "spec": {
                    "$ref": "#/definitions/types.Spec"
                }
            }
        },
        "github_com_chainlaunch_chainlaunch_pkg_plugin_types.Port": {
            "type": "object",
            "properties": {
                "containerPort": {
                    "type": "string"
                },
                "hostPort": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                }
            }
        },
        "handler.CreateOrganizationRequest": {
            "type": "object",
            "required": [
                "mspId",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "mspId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "providerId": {
                    "type": "integer"
                }
            }
        },
        "handler.DeleteRevokedCertificateRequest": {
            "type": "object",
            "properties": {
                "serialNumber": {
                    "description": "Hex string of the serial number",
                    "type": "string"
                }
            }
        },
        "handler.OrganizationResponse": {
            "type": "object",
            "properties": {
                "adminSignKeyId": {
                    "type": "integer"
                },
                "adminTlsKeyId": {
                    "type": "integer"
                },
                "clientSignKeyId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "mspId": {
                    "type": "string"
                },
                "providerId": {
                    "type": "integer"
                },
                "providerName": {
                    "type": "string"
                },
                "signCertificate": {
                    "type": "string"
                },
                "signPublicKey": {
                    "type": "string"
                },
                "tlsCertificate": {
                    "type": "string"
                },
                "tlsPublicKey": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "handler.PaginatedOrganizationsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.OrganizationResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                }
            }
        },
        "handler.RevokeCertificateByPEMRequest": {
            "type": "object",
            "properties": {
                "certificate": {
                    "description": "PEM encoded certificate",
                    "type": "string"
                },
                "revocationReason": {
                    "type": "integer"
                }
            }
        },
        "handler.RevokeCertificateBySerialRequest": {
            "type": "object",
            "properties": {
                "revocationReason": {
                    "type": "integer"
                },
                "serialNumber": {
                    "description": "Hex string of the serial number",
                    "type": "string"
                }
            }
        },
        "handler.RevokedCertificateResponse": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "integer"
                },
                "revocationTime": {
                    "type": "string"
                },
                "serialNumber": {
                    "type": "string"
                }
            }
        },
        "handler.UpdateOrganizationRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                }
            }
        },
        "http.AddConsenterPayload": {
            "type": "object",
            "required": [
                "client_tls_cert",
                "host",
                "port",
                "server_tls_cert"
            ],
            "properties": {
                "client_tls_cert": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                },
                "server_tls_cert": {
                    "type": "string"
                }
            }
        },
        "http.AddNodeToNetworkRequest": {
            "type": "object",
            "required": [
                "nodeId",
                "role"
            ],
            "properties": {
                "nodeId": {
                    "type": "integer"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "peer",
                        "orderer"
                    ]
                }
            }
        },
        "http.AddOrgPayload": {
            "type": "object",
            "required": [
                "msp_id",
                "root_certs",
                "tls_root_certs"
            ],
            "properties": {
                "msp_id": {
                    "type": "string"
                },
                "root_certs": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "tls_root_certs": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "http.AnchorPeer": {
            "type": "object",
            "required": [
                "host",
                "port"
            ],
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            }
        },
        "http.BackupResponse": {
            "type": "object",
            "properties": {
                "completedAt": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "metadata": {},
                "scheduleId": {
                    "type": "integer"
                },
                "sizeBytes": {
                    "type": "integer"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "targetId": {
                    "type": "integer"
                }
            }
        },
        "http.BackupScheduleResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "cronExpression": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "lastRunAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nextRunAt": {
                    "type": "string"
                },
                "retentionDays": {
                    "type": "integer"
                },
                "targetId": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "http.BackupTargetResponse": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "type": "string"
                },
                "bucketName": {
                    "type": "string"
                },
                "bucketPath": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "forcePathStyle": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "http.BesuNetworkResponse": {
            "type": "object",
            "properties": {
                "chainId": {
                    "type": "integer"
                },
                "config": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "genesisConfig": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "http.BesuNodeDefaultsResponse": {
            "type": "object",
            "properties": {
                "defaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.BesuNodeDefaults"
                    }
                },
                "nodeCount": {
                    "type": "integer"
                }
            }
        },
        "http.BlockListResponse": {
            "type": "object",
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/block.Block"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "http.BlockTransactionsResponse": {
            "type": "object",
            "properties": {
                "block": {
                    "$ref": "#/definitions/block.Block"
                }
            }
        },
        "http.ChainInfoResponse": {
            "type": "object",
            "properties": {
                "currentBlockHash": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "previousBlockHash": {
                    "type": "string"
                }
            }
        },
        "http.ChaincodeResponse": {
            "type": "object",
            "properties": {
                "endorsementPlugin": {
                    "type": "string"
                },
                "endorsementPolicy": {
                    "type": "string"
                },
                "initRequired": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "sequence": {
                    "type": "integer"
                },
                "validationPlugin": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "http.ChannelConfigResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "http.ChannelResponse": {
            "type": "object",
            "properties": {
                "blockNum": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "http.ConfigUpdateOperationRequest": {
            "description": "A single configuration update operation",
            "type": "object",
            "required": [
                "payload",
                "type"
            ],
            "properties": {
                "payload": {
                    "description": "Payload contains the operation-specific data\nThe structure depends on the operation type:\n- add_org: AddOrgPayload\n- remove_org: RemoveOrgPayload\n- update_org_msp: UpdateOrgMSPPayload\n- set_anchor_peers: SetAnchorPeersPayload\n- add_consenter: AddConsenterPayload\n- remove_consenter: RemoveConsenterPayload\n- update_consenter: UpdateConsenterPayload\n- update_etcd_raft_options: UpdateEtcdRaftOptionsPayload\n- update_batch_size: UpdateBatchSizePayload\n- update_batch_timeout: UpdateBatchTimeoutPayload\n@Description The payload for the configuration update operation\n@Description Can be one of:\n@Description - AddOrgPayload when type is \"add_org\"\n@Description - RemoveOrgPayload when type is \"remove_org\"\n@Description - UpdateOrgMSPPayload when type is \"update_org_msp\"\n@Description - SetAnchorPeersPayload when type is \"set_anchor_peers\"\n@Description - AddConsenterPayload when type is \"add_consenter\"\n@Description - RemoveConsenterPayload when type is \"remove_consenter\"\n@Description - UpdateConsenterPayload when type is \"update_consenter\"\n@Description - UpdateEtcdRaftOptionsPayload when type is \"update_etcd_raft_options\"\n@Description - UpdateBatchSizePayload when type is \"update_batch_size\"\n@Description - UpdateBatchTimeoutPayload when type is \"update_batch_timeout\"",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "type": {
                    "description": "Type is the type of configuration update operation\nenum: add_org,remove_org,update_org_msp,set_anchor_peers,add_consenter,remove_consenter,update_consenter,update_etcd_raft_options,update_batch_size,update_batch_timeout",
                    "type": "string",
                    "enum": [
                        "add_org",
                        "remove_org",
                        "update_org_msp",
                        "set_anchor_peers",
                        "add_consenter",
                        "remove_consenter",
                        "update_consenter",
                        "update_etcd_raft_options",
                        "update_batch_size",
                        "update_batch_timeout"
                    ]
                }
            }
        },
        "http.ConfigUpdateResponse": {
            "type": "object",
            "properties": {
                "channel_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "network_id": {
                    "type": "integer"
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ConfigUpdateOperationRequest"
                    }
                },
                "preview_json": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "http.ConsenterConfig": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "http.CreateBackupRequest": {
            "type": "object",
            "required": [
                "targetId"
            ],
            "properties": {
                "metadata": {},
                "scheduleId": {
                    "type": "integer"
                },
                "targetId": {
                    "type": "integer"
                }
            }
        },
        "http.CreateBackupScheduleRequest": {
            "description": "Request body for creating a new backup schedule",
            "type": "object",
            "required": [
                "cronExpression",
                "name",
                "retentionDays",
                "targetId"
            ],
            "properties": {
                "cronExpression": {
                    "description": "Cron expression for schedule\n@Example \"0 0 * * *\"",
                    "type": "string"
                },
                "description": {
                    "description": "Optional description\n@Example \"Daily backup at midnight\"",
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether the schedule is enabled\n@Example true",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the backup schedule\n@Example \"daily-backup\"",
                    "type": "string"
                },
                "retentionDays": {
                    "description": "Number of days to retain backups\n@Example 30",
                    "type": "integer",
                    "minimum": 1
                },
                "targetId": {
                    "description": "ID of the backup target to use\n@Example 1",
                    "type": "integer"
                }
            }
        },
        "http.CreateBackupTargetRequest": {
            "description": "Request body for creating a new backup target",
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "accessKeyId": {
                    "description": "AWS access key ID (required for S3 type)\n@Example \"AKIAXXXXXXXXXXXXXXXX\"",
                    "type": "string"
                },
                "bucketName": {
                    "description": "S3 bucket name (required for S3 type)\n@Example \"my-backup-bucket\"",
                    "type": "string"
                },
                "bucketPath": {
                    "description": "Path within the bucket (required for S3 type)\n@Example \"backups/app1\"",
                    "type": "string"
                },
                "endpoint": {
                    "description": "Custom S3 endpoint (optional)\n@Example \"https://s3.custom-domain.com\"",
                    "type": "string"
                },
                "forcePathStyle": {
                    "description": "Use path-style S3 URLs\n@Example false",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the backup target\n@Example \"daily-backup-s3\"",
                    "type": "string"
                },
                "region": {
                    "description": "AWS region (required for S3 type)\n@Example \"us-east-1\"",
                    "type": "string"
                },
                "secretKey": {
                    "description": "AWS secret key (required for S3 type)",
                    "type": "string"
                },
                "type": {
                    "description": "Type of backup target (S3 or LOCAL)\n@Example \"S3\"",
                    "type": "string",
                    "enum": [
                        "S3",
                        "LOCAL"
                    ]
                }
            }
        },
        "http.CreateBesuNetworkRequest": {
            "description": "Request body for creating a new Besu network",
            "type": "object",
            "required": [
                "config",
                "name"
            ],
            "properties": {
                "config": {
                    "description": "@Description Network configuration",
                    "type": "object",
                    "required": [
                        "blockPeriod",
                        "chainId",
                        "consensus",
                        "epochLength",
                        "initialValidatorsKeyIds",
                        "requestTimeout"
                    ],
                    "properties": {
                        "alloc": {
                            "description": "@Description Optional initial account balances",
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "required": [
                                    "balance"
                                ],
                                "properties": {
                                    "balance": {
                                        "description": "@Description Initial balance for the account in hex format (e.g. \"0x100000000000000000000000000000000000000000000000000000000000000\")",
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "blockPeriod": {
                            "description": "@Description Block period in seconds\n@Default 5\n@Required",
                            "type": "integer",
                            "example": 5
                        },
                        "chainId": {
                            "description": "@Description Chain ID for the network\n@Default 1337\n@Required",
                            "type": "integer",
                            "example": 1337
                        },
                        "coinbase": {
                            "description": "@Description Optional coinbase address",
                            "type": "string"
                        },
                        "consensus": {
                            "description": "@Description Consensus algorithm (e.g. \"qbft\")\n@Required",
                            "type": "string"
                        },
                        "difficulty": {
                            "description": "@Description Optional difficulty value",
                            "type": "string"
                        },
                        "epochLength": {
                            "description": "@Description Epoch length in blocks\n@Default 30000\n@Required",
                            "type": "integer",
                            "example": 30000
                        },
                        "gasLimit": {
                            "description": "@Description Optional gas limit value",
                            "type": "string"
                        },
                        "initialValidatorsKeyIds": {
                            "description": "@Description List of initial validator key IDs\n@Required\n@MinItems 1",
                            "type": "array",
                            "minItems": 1,
                            "items": {
                                "type": "integer"
                            }
                        },
                        "mixHash": {
                            "description": "@Description Optional mix hash value",
                            "type": "string"
                        },
                        "nonce": {
                            "description": "@Description Optional nonce value",
                            "type": "string"
                        },
                        "requestTimeout": {
                            "description": "@Description Request timeout in seconds\n@Required",
                            "type": "integer"
                        },
                        "timestamp": {
                            "description": "@Description Optional timestamp value",
                            "type": "string"
                        }
                    }
                },
                "description": {
                    "description": "@Description Optional description of the network",
                    "type": "string"
                },
                "name": {
                    "description": "@Description Name of the network",
                    "type": "string"
                }
            }
        },
        "http.CreateFabricNetworkRequest": {
            "type": "object",
            "required": [
                "config",
                "name"
            ],
            "properties": {
                "config": {
                    "$ref": "#/definitions/http.FabricNetworkConfig"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "http.CreateNodeRequest": {
            "description": "Request payload for creating a new node",
            "type": "object",
            "required": [
                "blockchainPlatform",
                "name"
            ],
            "properties": {
                "besuNode": {
                    "description": "@Description Besu node configuration, required when creating a Besu node",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BesuNodeConfig"
                        }
                    ]
                },
                "blockchainPlatform": {
                    "description": "@Description Blockchain platform (fabric or besu)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.BlockchainPlatform"
                        }
                    ],
                    "example": "fabric"
                },
                "fabricOrderer": {
                    "description": "@Description Fabric orderer configuration, required when creating a Fabric orderer node",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.FabricOrdererConfig"
                        }
                    ]
                },
                "fabricPeer": {
                    "description": "@Description Fabric peer configuration, required when creating a Fabric peer node",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.FabricPeerConfig"
                        }
                    ]
                },
                "name": {
                    "description": "@Description Name of the node",
                    "type": "string",
                    "example": "peer0-org1"
                }
            }
        },
        "http.CreateProviderRequest": {
            "type": "object",
            "required": [
                "config",
                "name",
                "type"
            ],
            "properties": {
                "config": {},
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "notifyBackupFailure": {
                    "type": "boolean"
                },
                "notifyBackupSuccess": {
                    "type": "boolean"
                },
                "notifyNodeDowntime": {
                    "type": "boolean"
                },
                "notifyS3ConnIssue": {
                    "type": "boolean"
                },
                "type": {
                    "enum": [
                        "SMTP"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/notifications.ProviderType"
                        }
                    ]
                }
            }
        },
        "http.ExternalOrgConfig": {
            "type": "object",
            "required": [
                "id",
                "mspid"
            ],
            "properties": {
                "consenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ConsenterConfig"
                    }
                },
                "id": {
                    "type": "string"
                },
                "mspid": {
                    "type": "string"
                }
            }
        },
        "http.FabricNetworkConfig": {
            "type": "object",
            "properties": {
                "externalOrdererOrgs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ExternalOrgConfig"
                    }
                },
                "externalPeerOrgs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ExternalOrgConfig"
                    }
                },
                "ordererOrganizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.OrganizationConfig"
                    }
                },
                "peerOrganizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.OrganizationConfig"
                    }
                }
            }
        },
        "http.GetNetworkNodesResponse": {
            "type": "object",
            "properties": {
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.NetworkNode"
                    }
                }
            }
        },
        "http.ImportBesuNetworkRequest": {
            "type": "object",
            "required": [
                "chainId",
                "genesisFile",
                "name"
            ],
            "properties": {
                "chainId": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "genesisFile": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "http.ImportFabricNetworkRequest": {
            "type": "object",
            "required": [
                "genesisFile"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "genesisFile": {
                    "type": "string"
                }
            }
        },
        "http.ImportFabricNetworkWithOrgRequest": {
            "type": "object",
            "required": [
                "channelId",
                "ordererTlsCert",
                "ordererUrl",
                "organizationId"
            ],
            "properties": {
                "channelId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "ordererTlsCert": {
                    "type": "string"
                },
                "ordererUrl": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "integer"
                }
            }
        },
        "http.ImportNetworkResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "networkId": {
                    "type": "string"
                }
            }
        },
        "http.ListBesuNetworksResponse": {
            "type": "object",
            "properties": {
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.BesuNetworkResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "http.ListNetworksResponse": {
            "type": "object",
            "properties": {
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.NetworkResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "http.NetworkResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "integer"
                },
                "currentConfigBlock": {
                    "type": "string"
                },
                "deploymentConfig": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "exposedPorts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "genesisBlock": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "http.NodeChannelsResponse": {
            "type": "object",
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.ChannelResponse"
                    }
                },
                "nodeId": {
                    "type": "integer"
                }
            }
        },
        "http.NodeEventResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "data": {},
                "id": {
                    "type": "integer"
                },
                "node_id": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "http.NodeResponse": {
            "type": "object",
            "properties": {
                "besuNode": {
                    "$ref": "#/definitions/service.BesuNodeProperties"
                },
                "createdAt": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                },
                "fabricOrderer": {
                    "$ref": "#/definitions/service.FabricOrdererProperties"
                },
                "fabricPeer": {
                    "$ref": "#/definitions/service.FabricPeerProperties"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nodeType": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "http.OrganizationConfig": {
            "type": "object",
            "required": [
                "id",
                "nodeIds"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "nodeIds": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "http.PaginatedNodeEventsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.NodeEventResponse"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "http.PaginatedNodesResponse": {
            "type": "object",
            "properties": {
                "hasNextPage": {
                    "type": "boolean"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.NodeResponse"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "pageCount": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "http.ProviderResponse": {
            "type": "object",
            "properties": {
                "config": {},
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "lastTestAt": {
                    "type": "string"
                },
                "lastTestMessage": {
                    "type": "string"
                },
                "lastTestStatus": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyBackupFailure": {
                    "type": "boolean"
                },
                "notifyBackupSuccess": {
                    "type": "boolean"
                },
                "notifyNodeDowntime": {
                    "type": "boolean"
                },
                "notifyS3ConnIssue": {
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/notifications.ProviderType"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "http.RemoveConsenterPayload": {
            "type": "object",
            "required": [
                "host",
                "port"
            ],
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                }
            }
        },
        "http.RemoveOrgPayload": {
            "type": "object",
            "required": [
                "msp_id"
            ],
            "properties": {
                "msp_id": {
                    "type": "string"
                }
            }
        },
        "http.SetAnchorPeersPayload": {
            "type": "object",
            "required": [
                "anchor_peers",
                "msp_id"
            ],
            "properties": {
                "anchor_peers": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "object",
                        "required": [
                            "host",
                            "port"
                        ],
                        "properties": {
                            "host": {
                                "type": "string"
                            },
                            "port": {
                                "type": "integer",
                                "maximum": 65535,
                                "minimum": 1
                            }
                        }
                    }
                },
                "msp_id": {
                    "type": "string"
                }
            }
        },
        "http.SetAnchorPeersRequest": {
            "type": "object",
            "required": [
                "anchorPeers",
                "organizationId"
            ],
            "properties": {
                "anchorPeers": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/http.AnchorPeer"
                    }
                },
                "organizationId": {
                    "type": "integer"
                }
            }
        },
        "http.SetAnchorPeersResponse": {
            "type": "object",
            "properties": {
                "transactionId": {
                    "type": "string"
                }
            }
        },
        "http.TestProviderRequest": {
            "type": "object",
            "required": [
                "testEmail"
            ],
            "properties": {
                "testEmail": {
                    "type": "string"
                }
            }
        },
        "http.TestProviderResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "testedAt": {
                    "type": "string"
                }
            }
        },
        "http.TransactionResponse": {
            "type": "object",
            "properties": {
                "block": {
                    "$ref": "#/definitions/block.Block"
                }
            }
        },
        "http.UpdateBackupScheduleRequest": {
            "type": "object",
            "required": [
                "cronExpression",
                "name",
                "retentionDays",
                "targetId"
            ],
            "properties": {
                "cronExpression": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "retentionDays": {
                    "type": "integer",
                    "minimum": 1
                },
                "targetId": {
                    "type": "integer"
                }
            }
        },
        "http.UpdateBackupTargetRequest": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "accessKeyId": {
                    "type": "string"
                },
                "bucketName": {
                    "type": "string"
                },
                "bucketPath": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "forcePathStyle": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "S3",
                        "LOCAL"
                    ]
                }
            }
        },
        "http.UpdateBatchSizePayload": {
            "type": "object",
            "required": [
                "absolute_max_bytes",
                "max_message_count",
                "preferred_max_bytes"
            ],
            "properties": {
                "absolute_max_bytes": {
                    "type": "integer",
                    "minimum": 1
                },
                "max_message_count": {
                    "type": "integer",
                    "minimum": 1
                },
                "preferred_max_bytes": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "http.UpdateBatchTimeoutPayload": {
            "type": "object",
            "required": [
                "timeout"
            ],
            "properties": {
                "timeout": {
                    "description": "e.g., \"2s\"",
                    "type": "string"
                }
            }
        },
        "http.UpdateBesuNodeRequest": {
            "type": "object",
            "required": [
                "networkId",
                "p2pHost",
                "p2pPort",
                "rpcHost",
                "rpcPort"
            ],
            "properties": {
                "bootnodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "externalIp": {
                    "type": "string"
                },
                "internalIp": {
                    "type": "string"
                },
                "metricsEnabled": {
                    "type": "boolean"
                },
                "metricsPort": {
                    "type": "integer"
                },
                "networkId": {
                    "type": "integer"
                },
                "p2pHost": {
                    "type": "string"
                },
                "p2pPort": {
                    "type": "integer"
                },
                "rpcHost": {
                    "type": "string"
                },
                "rpcPort": {
                    "type": "integer"
                }
            }
        },
        "http.UpdateConsenterPayload": {
            "type": "object",
            "required": [
                "client_tls_cert",
                "host",
                "new_host",
                "new_port",
                "port",
                "server_tls_cert"
            ],
            "properties": {
                "client_tls_cert": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "new_host": {
                    "type": "string"
                },
                "new_port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 1
                },
                "server_tls_cert": {
                    "type": "string"
                }
            }
        },
        "http.UpdateEtcdRaftOptionsPayload": {
            "type": "object",
            "required": [
                "election_tick",
                "heartbeat_tick",
                "max_inflight_blocks",
                "snapshot_interval_size",
                "tick_interval"
            ],
            "properties": {
                "election_tick": {
                    "type": "integer",
                    "minimum": 1
                },
                "heartbeat_tick": {
                    "type": "integer",
                    "minimum": 1
                },
                "max_inflight_blocks": {
                    "type": "integer",
                    "minimum": 1
                },
                "snapshot_interval_size": {
                    "type": "integer",
                    "minimum": 1
                },
                "tick_interval": {
                    "type": "string"
                }
            }
        },
        "http.UpdateFabricNetworkRequest": {
            "type": "object",
            "required": [
                "operations"
            ],
            "properties": {
                "operations": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/http.ConfigUpdateOperationRequest"
                    }
                }
            }
        },
        "http.UpdateFabricOrdererRequest": {
            "type": "object",
            "properties": {
                "adminAddress": {
                    "type": "string"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "externalEndpoint": {
                    "type": "string"
                },
                "listenAddress": {
                    "type": "string"
                },
                "operationsListenAddress": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "http.UpdateFabricPeerRequest": {
            "type": "object",
            "properties": {
                "addressOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AddressOverride"
                    }
                },
                "chaincodeAddress": {
                    "type": "string"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "eventsAddress": {
                    "type": "string"
                },
                "externalEndpoint": {
                    "type": "string"
                },
                "listenAddress": {
                    "type": "string"
                },
                "operationsListenAddress": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "http.UpdateNodeRequest": {
            "type": "object",
            "properties": {
                "besuNode": {
                    "$ref": "#/definitions/http.UpdateBesuNodeRequest"
                },
                "blockchainPlatform": {
                    "$ref": "#/definitions/types.BlockchainPlatform"
                },
                "fabricOrderer": {
                    "$ref": "#/definitions/http.UpdateFabricOrdererRequest"
                },
                "fabricPeer": {
                    "description": "Platform-specific configurations",
                    "allOf": [
                        {
                            "$ref": "#/definitions/http.UpdateFabricPeerRequest"
                        }
                    ]
                },
                "name": {
                    "description": "Common fields",
                    "type": "string"
                }
            }
        },
        "http.UpdateOrgMSPPayload": {
            "type": "object",
            "required": [
                "msp_id",
                "root_certs",
                "tls_root_certs"
            ],
            "properties": {
                "msp_id": {
                    "type": "string"
                },
                "root_certs": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "tls_root_certs": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "http.UpdateOrganizationCRLRequest": {
            "type": "object",
            "required": [
                "organizationId"
            ],
            "properties": {
                "organizationId": {
                    "type": "integer"
                }
            }
        },
        "http.UpdateOrganizationCRLResponse": {
            "type": "object",
            "properties": {
                "transactionId": {
                    "type": "string"
                }
            }
        },
        "http.UpdateProviderRequest": {
            "type": "object",
            "required": [
                "config",
                "name",
                "type"
            ],
            "properties": {
                "config": {},
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "notifyBackupFailure": {
                    "type": "boolean"
                },
                "notifyBackupSuccess": {
                    "type": "boolean"
                },
                "notifyNodeDowntime": {
                    "type": "boolean"
                },
                "notifyS3ConnIssue": {
                    "type": "boolean"
                },
                "type": {
                    "enum": [
                        "SMTP"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/notifications.ProviderType"
                        }
                    ]
                }
            }
        },
        "models.CertificateRequest": {
            "type": "object",
            "required": [
                "commonName",
                "validFor"
            ],
            "properties": {
                "commonName": {
                    "type": "string"
                },
                "country": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "emailAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extKeyUsage": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/x509.ExtKeyUsage"
                    }
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "isCA": {
                    "type": "boolean"
                },
                "keyUsage": {
                    "$ref": "#/definitions/x509.KeyUsage"
                },
                "locality": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "organization": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "organizationalUnit": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "postalCode": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "province": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "streetAddress": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/url.URL"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/models.Duration"
                }
            }
        },
        "models.CreateKeyRequest": {
            "description": "Supported key algorithms",
            "type": "object",
            "required": [
                "algorithm",
                "name"
            ],
            "properties": {
                "algorithm": {
                    "description": "Key algorithm (RSA, EC, ED25519)\n@Required",
                    "enum": [
                        "RSA",
                        "EC",
                        "ED25519"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.KeyAlgorithm"
                        }
                    ],
                    "example": "RSA"
                },
                "certificate": {
                    "description": "Optional: configure CA certificate properties",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CertificateRequest"
                        }
                    ]
                },
                "curve": {
                    "description": "Elliptic curve name (for EC keys)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ECCurve"
                        }
                    ],
                    "example": "P-256"
                },
                "description": {
                    "description": "Optional description",
                    "type": "string",
                    "example": "Key for signing certificates"
                },
                "isCA": {
                    "description": "Whether this key is a CA",
                    "type": "integer",
                    "example": 0
                },
                "keySize": {
                    "description": "Key size in bits (for RSA)",
                    "type": "integer",
                    "maximum": 8192,
                    "minimum": 2048,
                    "example": 2048
                },
                "name": {
                    "description": "Name of the key\n@Required",
                    "type": "string",
                    "example": "my-key"
                },
                "providerId": {
                    "description": "Optional provider ID",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.CreateProviderRequest": {
            "type": "object",
            "required": [
                "isDefault",
                "name",
                "type"
            ],
            "properties": {
                "config": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "isDefault": {
                    "type": "integer",
                    "enum": [
                        0,
                        1
                    ]
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "DATABASE",
                        "VAULT",
                        "HSM"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.KeyProviderType"
                        }
                    ]
                }
            }
        },
        "models.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        },
        "models.ECCurve": {
            "type": "string",
            "enum": [
                "P-256",
                "P-384",
                "P-521",
                "secp256k1"
            ],
            "x-enum-varnames": [
                "ECCurveP256",
                "ECCurveP384",
                "ECCurveP521",
                "ECCurveSECP256K1"
            ]
        },
        "models.KeyAlgorithm": {
            "type": "string",
            "enum": [
                "RSA",
                "EC",
                "ED25519"
            ],
            "x-enum-varnames": [
                "KeyAlgorithmRSA",
                "KeyAlgorithmEC",
                "KeyAlgorithmED25519"
            ]
        },
        "models.KeyProviderInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.KeyProviderType": {
            "type": "string",
            "enum": [
                "DATABASE",
                "VAULT",
                "HSM"
            ],
            "x-enum-varnames": [
                "KeyProviderTypeDatabase",
                "KeyProviderTypeVault",
                "KeyProviderTypeHSM"
            ]
        },
        "models.KeyResponse": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "$ref": "#/definitions/models.KeyAlgorithm"
                },
                "certificate": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "curve": {
                    "$ref": "#/definitions/models.ECCurve"
                },
                "description": {
                    "type": "string"
                },
                "ethereumAddress": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "keySize": {
                    "type": "integer"
                },
                "lastRotatedAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/models.KeyProviderInfo"
                },
                "publicKey": {
                    "type": "string"
                },
                "sha1Fingerprint": {
                    "type": "string"
                },
                "sha256Fingerprint": {
                    "type": "string"
                },
                "signingKeyID": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.PaginatedResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.KeyResponse"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalItems": {
                    "type": "integer"
                }
            }
        },
        "models.ProviderResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isDefault": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/models.KeyProviderType"
                }
            }
        },
        "notifications.ProviderType": {
            "type": "string",
            "enum": [
                "SMTP"
            ],
            "x-enum-varnames": [
                "ProviderTypeSMTP"
            ]
        },
        "plugin.AvailablePluginsResponse": {
            "type": "object",
            "properties": {
                "last_updated": {
                    "type": "string"
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registry.PluginMetadata"
                    }
                }
            }
        },
        "plugin.ServiceStatus": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": true
                },
                "containers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "depends_on": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "health": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "last_error": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "running": {
                    "type": "boolean"
                },
                "started_at": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "projects.CommitDetailAPI": {
            "type": "object",
            "properties": {
                "added": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "author": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "modified": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "parent": {
                    "type": "string"
                },
                "removed": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "projects.CommitWithFileChangesAPI": {
            "type": "object",
            "properties": {
                "added": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "author": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "modified": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "parent": {
                    "type": "string"
                },
                "removed": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "projects.CommitsListResponse": {
            "type": "object",
            "properties": {
                "commits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/projects.CommitWithFileChangesAPI"
                    }
                }
            }
        },
        "projects.CreateProjectRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "boilerplate": {
                    "type": "string",
                    "example": "go-basic"
                },
                "description": {
                    "type": "string",
                    "example": "A sample project"
                },
                "endorsementPolicy": {
                    "type": "string",
                    "example": "OR('Org1MSP.member','Org2MSP.member')"
                },
                "name": {
                    "type": "string",
                    "example": "myproject"
                },
                "networkId": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "projects.CreateProjectResponse": {
            "type": "object",
            "properties": {
                "boilerplate": {
                    "type": "string",
                    "example": "go-basic"
                },
                "containerPort": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "example": "A sample project"
                },
                "endorsementPolicy": {
                    "type": "string",
                    "example": "OR('Org1MSP.member','Org2MSP.member')"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "myproject"
                },
                "networkId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string",
                    "example": "myproject-abc12"
                }
            }
        },
        "projects.HandlerRequest": {
            "type": "object",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"asset1\"",
                        "\"100\"]"
                    ]
                },
                "function": {
                    "type": "string",
                    "example": "createAsset"
                },
                "keyId": {
                    "type": "integer",
                    "example": 1
                },
                "orgId": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "projects.HandlerResponse": {
            "type": "object",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "blockNumber": {
                    "type": "integer"
                },
                "chaincode": {
                    "type": "string"
                },
                "channel": {
                    "type": "string"
                },
                "code": {
                    "type": "integer"
                },
                "function": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "project": {
                    "type": "string"
                },
                "result": {},
                "status": {
                    "type": "string"
                },
                "transactionId": {
                    "type": "string"
                }
            }
        },
        "projects.ListProjectsResponse": {
            "type": "object",
            "properties": {
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/projects.Project"
                    }
                }
            }
        },
        "projects.Project": {
            "type": "object",
            "properties": {
                "boilerplate": {
                    "type": "string",
                    "example": "go-basic"
                },
                "containerPort": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "example": "A sample project"
                },
                "endorsementPolicy": {
                    "type": "string",
                    "example": "OR('Org1MSP.member','Org2MSP.member')"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "lastStartedAt": {
                    "type": "string"
                },
                "lastStoppedAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "myproject"
                },
                "networkId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string",
                    "example": "myproject-abc12"
                },
                "status": {
                    "type": "string",
                    "example": "running"
                }
            }
        },
        "projects.UpdateProjectEndorsementPolicyRequest": {
            "type": "object",
            "required": [
                "endorsementPolicy"
            ],
            "properties": {
                "endorsementPolicy": {
                    "type": "string",
                    "example": "OR('Org1MSP.member','Org2MSP.member')"
                }
            }
        },
        "registry.PluginMetadata": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "downloads": {
                    "type": "integer"
                },
                "hash": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "raw_yaml": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "service.BesuNodeDefaults": {
            "type": "object",
            "properties": {
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "externalIp": {
                    "type": "string"
                },
                "internalIp": {
                    "type": "string"
                },
                "metricsEnabled": {
                    "description": "Metrics configuration",
                    "type": "boolean"
                },
                "metricsHost": {
                    "type": "string"
                },
                "metricsPort": {
                    "type": "integer"
                },
                "metricsProtocol": {
                    "type": "string"
                },
                "mode": {
                    "$ref": "#/definitions/service.Mode"
                },
                "p2pHost": {
                    "type": "string"
                },
                "p2pPort": {
                    "type": "integer"
                },
                "rpcHost": {
                    "type": "string"
                },
                "rpcPort": {
                    "type": "integer"
                }
            }
        },
        "service.BesuNodeProperties": {
            "type": "object",
            "properties": {
                "bootNodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enodeUrl": {
                    "type": "string"
                },
                "externalIp": {
                    "type": "string"
                },
                "internalIp": {
                    "type": "string"
                },
                "keyId": {
                    "type": "integer"
                },
                "metricsEnabled": {
                    "description": "Metrics configuration",
                    "type": "boolean"
                },
                "metricsHost": {
                    "type": "string"
                },
                "metricsPort": {
                    "type": "integer"
                },
                "metricsProtocol": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "networkId": {
                    "type": "integer"
                },
                "p2pHost": {
                    "description": "Add deployment config fields",
                    "type": "string"
                },
                "p2pPort": {
                    "type": "integer"
                },
                "rpcHost": {
                    "type": "string"
                },
                "rpcPort": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "service.CreateSettingParams": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/service.SettingConfig"
                }
            }
        },
        "service.FabricOrdererProperties": {
            "type": "object",
            "properties": {
                "adminAddress": {
                    "type": "string"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "externalEndpoint": {
                    "type": "string"
                },
                "listenAddress": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "mspId": {
                    "type": "string"
                },
                "operationsAddress": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "integer"
                },
                "signCaCert": {
                    "type": "string"
                },
                "signCert": {
                    "description": "Add certificate information",
                    "type": "string"
                },
                "signKeyId": {
                    "description": "Add deployment config fields",
                    "type": "integer"
                },
                "tlsCaCert": {
                    "type": "string"
                },
                "tlsCert": {
                    "type": "string"
                },
                "tlsKeyId": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "service.FabricPeerProperties": {
            "type": "object",
            "properties": {
                "addressOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AddressOverride"
                    }
                },
                "chaincodeAddress": {
                    "type": "string"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "eventsAddress": {
                    "type": "string"
                },
                "externalEndpoint": {
                    "type": "string"
                },
                "listenAddress": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "mspId": {
                    "type": "string"
                },
                "operationsAddress": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "integer"
                },
                "signCaCert": {
                    "type": "string"
                },
                "signCert": {
                    "description": "Add certificate information",
                    "type": "string"
                },
                "signKeyId": {
                    "description": "Add deployment config fields",
                    "type": "integer"
                },
                "tlsCaCert": {
                    "type": "string"
                },
                "tlsCert": {
                    "type": "string"
                },
                "tlsKeyId": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "service.Mode": {
            "type": "string",
            "enum": [
                "service",
                "docker"
            ],
            "x-enum-varnames": [
                "ModeService",
                "ModeDocker"
            ]
        },
        "service.NetworkNode": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "networkId": {
                    "type": "integer"
                },
                "node": {
                    "$ref": "#/definitions/service.NodeResponse"
                },
                "nodeId": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "service.NodeDefaults": {
            "type": "object",
            "properties": {
                "adminAddress": {
                    "type": "string"
                },
                "chaincodeAddress": {
                    "type": "string"
                },
                "containerName": {
                    "type": "string"
                },
                "errorLogPath": {
                    "type": "string"
                },
                "eventsAddress": {
                    "type": "string"
                },
                "externalEndpoint": {
                    "type": "string"
                },
                "listenAddress": {
                    "type": "string"
                },
                "logPath": {
                    "type": "string"
                },
                "mode": {
                    "$ref": "#/definitions/service.Mode"
                },
                "operationsListenAddress": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                }
            }
        },
        "service.NodeResponse": {
            "type": "object",
            "properties": {
                "besuNode": {
                    "$ref": "#/definitions/service.BesuNodeProperties"
                },
                "createdAt": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                },
                "fabricOrderer": {
                    "$ref": "#/definitions/service.FabricOrdererProperties"
                },
                "fabricPeer": {
                    "description": "Type-specific fields",
                    "allOf": [
                        {
                            "$ref": "#/definitions/service.FabricPeerProperties"
                        }
                    ]
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nodeType": {
                    "$ref": "#/definitions/types.NodeType"
                },
                "platform": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "service.NodesDefaultsResult": {
            "type": "object",
            "properties": {
                "availableAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "orderers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.NodeDefaults"
                    }
                },
                "peers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.NodeDefaults"
                    }
                }
            }
        },
        "service.Setting": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/service.SettingConfig"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "service.SettingConfig": {
            "type": "object",
            "properties": {
                "besuTemplateCMD": {
                    "type": "string"
                },
                "ordererTemplateCMD": {
                    "type": "string"
                },
                "peerTemplateCMD": {
                    "type": "string"
                }
            }
        },
        "sql.NullString": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if String is not NULL",
                    "type": "boolean"
                }
            }
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        },
        "types.AddressOverride": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "tlsCACert": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "types.BesuNodeConfig": {
            "type": "object",
            "required": [
                "externalIp",
                "internalIp",
                "keyId",
                "networkId",
                "p2pHost",
                "p2pPort",
                "rpcHost",
                "rpcPort"
            ],
            "properties": {
                "bootNodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "externalIp": {
                    "type": "string"
                },
                "internalIp": {
                    "type": "string"
                },
                "keyId": {
                    "type": "integer"
                },
                "metricsEnabled": {
                    "type": "boolean"
                },
                "metricsPort": {
                    "type": "integer"
                },
                "metricsProtocol": {
                    "type": "string"
                },
                "mode": {
                    "description": "@Description The deployment mode (service or docker)",
                    "type": "string",
                    "example": "service"
                },
                "networkId": {
                    "type": "integer"
                },
                "p2pHost": {
                    "type": "string"
                },
                "p2pPort": {
                    "type": "integer"
                },
                "rpcHost": {
                    "type": "string"
                },
                "rpcPort": {
                    "type": "integer"
                },
                "type": {
                    "description": "@Description The type of node (fabric-peer, fabric-orderer, besu)",
                    "type": "string",
                    "example": "fabric-peer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "types.BlockchainPlatform": {
            "type": "string",
            "enum": [
                "FABRIC",
                "BESU"
            ],
            "x-enum-varnames": [
                "PlatformFabric",
                "PlatformBesu"
            ]
        },
        "types.CustomQueryRequest": {
            "type": "object",
            "required": [
                "query"
            ],
            "properties": {
                "end": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                },
                "step": {
                    "type": "string"
                }
            }
        },
        "types.DeployPrometheusRequest": {
            "type": "object",
            "required": [
                "prometheus_port",
                "prometheus_version",
                "scrape_interval"
            ],
            "properties": {
                "prometheus_port": {
                    "type": "integer"
                },
                "prometheus_version": {
                    "type": "string"
                },
                "scrape_interval": {
                    "type": "integer"
                }
            }
        },
        "types.DeploymentStatus": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": true
                },
                "projectName": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Service"
                    }
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "stoppedAt": {
                    "type": "string"
                }
            }
        },
        "types.DockerCompose": {
            "type": "object",
            "properties": {
                "contents": {
                    "type": "string"
                }
            }
        },
        "types.Documentation": {
            "type": "object",
            "properties": {
                "examples": {
                    "description": "Examples contains example configurations and usage",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Example"
                    }
                },
                "readme": {
                    "description": "README contains the main documentation for the plugin",
                    "type": "string"
                },
                "troubleshooting": {
                    "description": "Troubleshooting contains common issues and their solutions",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.TroubleshootingItem"
                    }
                }
            }
        },
        "types.Example": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "types.FabricOrdererConfig": {
            "type": "object",
            "required": [
                "mspId",
                "name",
                "organizationId"
            ],
            "properties": {
                "addressOverrides": {
                    "description": "@Description Address overrides for the orderer",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AddressOverride"
                    }
                },
                "adminAddress": {
                    "type": "string"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "externalEndpoint": {
                    "type": "string"
                },
                "listenAddress": {
                    "type": "string"
                },
                "mode": {
                    "description": "@Description The deployment mode (service or docker)",
                    "type": "string",
                    "example": "service"
                },
                "mspId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "operationsListenAddress": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "integer"
                },
                "type": {
                    "description": "@Description The type of node (fabric-peer, fabric-orderer, besu)",
                    "type": "string",
                    "example": "fabric-peer"
                },
                "version": {
                    "description": "Fabric version to use",
                    "type": "string"
                }
            }
        },
        "types.FabricPeerConfig": {
            "description": "Configuration for creating a new Fabric peer node",
            "type": "object",
            "required": [
                "mspId",
                "name",
                "organizationId"
            ],
            "properties": {
                "addressOverrides": {
                    "description": "@Description Address overrides for the peer",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AddressOverride"
                    }
                },
                "chaincodeAddress": {
                    "description": "@Description Chaincode listen address",
                    "type": "string",
                    "example": "0.0.0.0:7052"
                },
                "domainNames": {
                    "description": "@Description Domain names for the peer",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "description": "@Description Environment variables for the peer",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "eventsAddress": {
                    "description": "@Description Events listen address",
                    "type": "string",
                    "example": "0.0.0.0:7053"
                },
                "externalEndpoint": {
                    "description": "@Description External endpoint for the peer",
                    "type": "string",
                    "example": "peer0.org1.example.com:7051"
                },
                "listenAddress": {
                    "description": "@Description Listen address for the peer",
                    "type": "string",
                    "example": "0.0.0.0:7051"
                },
                "mode": {
                    "description": "@Description The deployment mode (service or docker)",
                    "type": "string",
                    "example": "service"
                },
                "mspId": {
                    "description": "@Description MSP ID for the organization",
                    "type": "string",
                    "example": "Org1MSP"
                },
                "name": {
                    "description": "@Description Name of the peer node",
                    "type": "string",
                    "example": "peer0-org1"
                },
                "operationsListenAddress": {
                    "description": "@Description Operations listen address",
                    "type": "string",
                    "example": "0.0.0.0:9443"
                },
                "ordererAddressOverrides": {
                    "description": "@Description Orderer address overrides for the peer",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.OrdererAddressOverride"
                    }
                },
                "organizationId": {
                    "description": "@Description Organization ID that owns this peer",
                    "type": "integer",
                    "example": 1
                },
                "type": {
                    "description": "@Description The type of node (fabric-peer, fabric-orderer, besu)",
                    "type": "string",
                    "example": "fabric-peer"
                },
                "version": {
                    "description": "@Description Fabric version to use",
                    "type": "string",
                    "example": "2.2.0"
                }
            }
        },
        "types.LabelValuesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "types.Metadata": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "license": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "repository": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "types.MetricsDataResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "status": {
                    "type": "string"
                }
            }
        },
        "types.NodeType": {
            "type": "string",
            "enum": [
                "FABRIC_PEER",
                "FABRIC_ORDERER",
                "BESU_FULLNODE"
            ],
            "x-enum-varnames": [
                "NodeTypeFabricPeer",
                "NodeTypeFabricOrderer",
                "NodeTypeBesuFullnode"
            ]
        },
        "types.OrdererAddressOverride": {
            "type": "object",
            "required": [
                "from",
                "tlsCACert",
                "to"
            ],
            "properties": {
                "from": {
                    "description": "@Description Original orderer address",
                    "type": "string"
                },
                "tlsCACert": {
                    "description": "@Description TLS CA certificate in PEM format",
                    "type": "string"
                },
                "to": {
                    "description": "@Description New orderer address to use",
                    "type": "string"
                }
            }
        },
        "types.ParameterSpec": {
            "type": "object",
            "properties": {
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enum": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "x-source": {
                    "$ref": "#/definitions/types.XSourceType"
                }
            }
        },
        "types.Service": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Port"
                    }
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.Spec": {
            "type": "object",
            "properties": {
                "dockerCompose": {
                    "$ref": "#/definitions/types.DockerCompose"
                },
                "documentation": {
                    "$ref": "#/definitions/types.Documentation"
                },
                "parameters": {
                    "$ref": "#/definitions/github_com_chainlaunch_chainlaunch_pkg_plugin_types.Parameters"
                }
            }
        },
        "types.TroubleshootingItem": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "problem": {
                    "type": "string"
                },
                "solution": {
                    "type": "string"
                }
            }
        },
        "types.XSourceType": {
            "type": "string",
            "enum": [
                "fabric-peer",
                "key",
                "fabric-org",
                "fabric-network",
                "fabric-key"
            ],
            "x-enum-varnames": [
                "XSourceFabricPeer",
                "XSourceKey",
                "XSourceFabricOrg",
                "XSourceFabricNetwork",
                "XSourceFabricKey"
            ]
        },
        "url.URL": {
            "type": "object",
            "properties": {
                "forceQuery": {
                    "description": "append a query ('?') even if RawQuery is empty",
                    "type": "boolean"
                },
                "fragment": {
                    "description": "fragment for references, without '#'",
                    "type": "string"
                },
                "host": {
                    "description": "host or host:port (see Hostname and Port methods)",
                    "type": "string"
                },
                "omitHost": {
                    "description": "do not emit empty host (authority)",
                    "type": "boolean"
                },
                "opaque": {
                    "description": "encoded opaque data",
                    "type": "string"
                },
                "path": {
                    "description": "path (relative paths may omit leading slash)",
                    "type": "string"
                },
                "rawFragment": {
                    "description": "encoded fragment hint (see EscapedFragment method)",
                    "type": "string"
                },
                "rawPath": {
                    "description": "encoded path hint (see EscapedPath method)",
                    "type": "string"
                },
                "rawQuery": {
                    "description": "encoded query values, without '?'",
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                },
                "user": {
                    "description": "username and password information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/url.Userinfo"
                        }
                    ]
                }
            }
        },
        "url.Userinfo": {
            "type": "object"
        },
        "x509.ExtKeyUsage": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13
            ],
            "x-enum-varnames": [
                "ExtKeyUsageAny",
                "ExtKeyUsageServerAuth",
                "ExtKeyUsageClientAuth",
                "ExtKeyUsageCodeSigning",
                "ExtKeyUsageEmailProtection",
                "ExtKeyUsageIPSECEndSystem",
                "ExtKeyUsageIPSECTunnel",
                "ExtKeyUsageIPSECUser",
                "ExtKeyUsageTimeStamping",
                "ExtKeyUsageOCSPSigning",
                "ExtKeyUsageMicrosoftServerGatedCrypto",
                "ExtKeyUsageNetscapeServerGatedCrypto",
                "ExtKeyUsageMicrosoftCommercialCodeSigning",
                "ExtKeyUsageMicrosoftKernelCodeSigning"
            ]
        },
        "x509.KeyUsage": {
            "type": "integer",
            "enum": [
                1,
                2,
                4,
                8,
                16,
                32,
                64,
                128,
                256
            ],
            "x-enum-varnames": [
                "KeyUsageDigitalSignature",
                "KeyUsageContentCommitment",
                "KeyUsageKeyEncipherment",
                "KeyUsageDataEncipherment",
                "KeyUsageKeyAgreement",
                "KeyUsageCertSign",
                "KeyUsageCRLSign",
                "KeyUsageEncipherOnly",
                "KeyUsageDecipherOnly"
            ]
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        },
        "CookieAuth": {
            "type": "apiKey",
            "name": "session_id",
            "in": "cookie"
        }
    },
    "tags": [
        {
            "description": "Audit management operations",
            "name": "Audit"
        },
        {
            "description": "User authentication and authorization operations",
            "name": "Authentication"
        },
        {
            "description": "Backup schedule configuration and management",
            "name": "Backup Schedules"
        },
        {
            "description": "Backup target location configuration and management",
            "name": "Backup Targets"
        },
        {
            "description": "Backup management operations",
            "name": "Backups"
        },
        {
            "description": "Hyperledger Besu network management operations",
            "name": "Besu Networks"
        },
        {
            "description": "Hyperledger Fabric network management operations",
            "name": "Fabric Networks"
        },
        {
            "description": "Cryptographic key management operations",
            "name": "Keys"
        },
        {
            "description": "Metrics management operations",
            "name": "Metrics"
        },
        {
            "description": "Network node management operations",
            "name": "Nodes"
        },
        {
            "description": "System notification configuration and management",
            "name": "Notifications"
        },
        {
            "description": "Organization management operations",
            "name": "Organizations"
        },
        {
            "description": "Plugin management operations",
            "name": "Plugins"
        },
        {
            "description": "Key provider management operations",
            "name": "Providers"
        },
        {
            "description": "Settings management operations",
            "name": "Settings"
        },
        {
            "description": "Smart contract management operations",
            "name": "SmartContracts"
        },
        {
            "description": "User account management operations",
            "name": "Users"
        }
    ]
}