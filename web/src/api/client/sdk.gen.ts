// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { GetAiBoilerplatesData, GetAiBoilerplatesResponse, GetAiBoilerplatesError, PostAiGenerateData, PostAiGenerateResponse, PostAiGenerateError, GetAiModelsData, GetAiModelsResponse, GetAiModelsError, PostAiByProjectIdChatData, PostAiByProjectIdChatResponse, PostAiByProjectIdChatError, GetAiByProjectIdConversationsData, GetAiByProjectIdConversationsResponse, GetAiByProjectIdConversationsError, GetAiByProjectIdConversationsByConversationIdData, GetAiByProjectIdConversationsByConversationIdResponse, GetAiByProjectIdConversationsByConversationIdError, GetAiByProjectIdConversationsByConversationIdExportData, GetAiByProjectIdConversationsByConversationIdExportResponse, GetAiByProjectIdConversationsByConversationIdExportError, GetAuditLogsData, GetAuditLogsResponse, GetAuditLogsError, GetAuditLogsByIdData, GetAuditLogsByIdResponse, GetAuditLogsByIdError, PostAuthChangePasswordData, PostAuthChangePasswordResponse, PostAuthChangePasswordError, PostAuthLoginData, PostAuthLoginResponse, PostAuthLoginError, PostAuthLogoutData, PostAuthLogoutResponse, PostAuthLogoutError, GetAuthMeData, GetAuthMeResponse, GetAuthMeError, GetBackupsData, GetBackupsResponse, GetBackupsError, PostBackupsData, PostBackupsResponse, PostBackupsError, GetBackupsSchedulesData, GetBackupsSchedulesResponse, GetBackupsSchedulesError, PostBackupsSchedulesData, PostBackupsSchedulesResponse, PostBackupsSchedulesError, DeleteBackupsSchedulesByIdData, DeleteBackupsSchedulesByIdError, GetBackupsSchedulesByIdData, GetBackupsSchedulesByIdResponse, GetBackupsSchedulesByIdError, PutBackupsSchedulesByIdData, PutBackupsSchedulesByIdResponse, PutBackupsSchedulesByIdError, PutBackupsSchedulesByIdDisableData, PutBackupsSchedulesByIdDisableResponse, PutBackupsSchedulesByIdDisableError, PutBackupsSchedulesByIdEnableData, PutBackupsSchedulesByIdEnableResponse, PutBackupsSchedulesByIdEnableError, GetBackupsTargetsData, GetBackupsTargetsResponse, GetBackupsTargetsError, PostBackupsTargetsData, PostBackupsTargetsResponse, PostBackupsTargetsError, DeleteBackupsTargetsByIdData, DeleteBackupsTargetsByIdError, GetBackupsTargetsByIdData, GetBackupsTargetsByIdResponse, GetBackupsTargetsByIdError, PutBackupsTargetsByIdData, PutBackupsTargetsByIdResponse, PutBackupsTargetsByIdError, DeleteBackupsByIdData, DeleteBackupsByIdError, GetBackupsByIdData, GetBackupsByIdResponse, GetBackupsByIdError, GetChaincodeProjectsData, GetChaincodeProjectsResponse, GetChaincodeProjectsError, PostChaincodeProjectsData, PostChaincodeProjectsResponse, PostChaincodeProjectsError, GetChaincodeProjectsByIdData, GetChaincodeProjectsByIdResponse, GetChaincodeProjectsByIdError, GetChaincodeProjectsByIdCommitsData, GetChaincodeProjectsByIdCommitsResponse, GetChaincodeProjectsByIdCommitsError, GetChaincodeProjectsByIdCommitsByCommitHashData, GetChaincodeProjectsByIdCommitsByCommitHashResponse, GetChaincodeProjectsByIdCommitsByCommitHashError, GetChaincodeProjectsByIdDiffData, GetChaincodeProjectsByIdDiffResponse, GetChaincodeProjectsByIdDiffError, PutChaincodeProjectsByIdEndorsementPolicyData, PutChaincodeProjectsByIdEndorsementPolicyResponse, PutChaincodeProjectsByIdEndorsementPolicyError, GetChaincodeProjectsByIdFileAtCommitData, GetChaincodeProjectsByIdFileAtCommitResponse, GetChaincodeProjectsByIdFileAtCommitError, PostChaincodeProjectsByIdInvokeData, PostChaincodeProjectsByIdInvokeResponse, PostChaincodeProjectsByIdInvokeError, GetChaincodeProjectsByIdLogsData, GetChaincodeProjectsByIdLogsResponse, GetChaincodeProjectsByIdLogsError, GetChaincodeProjectsByIdLogsStreamData, GetChaincodeProjectsByIdLogsStreamResponse, GetChaincodeProjectsByIdLogsStreamError, PostChaincodeProjectsByIdQueryData, PostChaincodeProjectsByIdQueryResponse, PostChaincodeProjectsByIdQueryError, PostChaincodeProjectsByIdStartData, PostChaincodeProjectsByIdStartResponse, PostChaincodeProjectsByIdStartError, PostChaincodeProjectsByIdStopData, PostChaincodeProjectsByIdStopResponse, PostChaincodeProjectsByIdStopError, PostDummyData, PostDummyResponse, GetKeyProvidersData, GetKeyProvidersResponse, GetKeyProvidersError, PostKeyProvidersData, PostKeyProvidersResponse, PostKeyProvidersError, DeleteKeyProvidersByIdData, DeleteKeyProvidersByIdError, GetKeyProvidersByIdData, GetKeyProvidersByIdResponse, GetKeyProvidersByIdError, GetKeysData, GetKeysResponse, GetKeysError, PostKeysData, PostKeysResponse, PostKeysError, GetKeysAllData, GetKeysAllResponse, GetKeysAllError, GetKeysFilterData, GetKeysFilterResponse, GetKeysFilterError, DeleteKeysByIdData, DeleteKeysByIdError, GetKeysByIdData, GetKeysByIdResponse, GetKeysByIdError, PostKeysByKeyIdSignData, PostKeysByKeyIdSignResponse, PostKeysByKeyIdSignError, PostMetricsDeployData, PostMetricsDeployResponse, PostMetricsDeployError, GetMetricsNodeByIdData, GetMetricsNodeByIdResponse, GetMetricsNodeByIdError, GetMetricsNodeByIdLabelByLabelValuesData, GetMetricsNodeByIdLabelByLabelValuesResponse, GetMetricsNodeByIdLabelByLabelValuesError, PostMetricsNodeByIdQueryData, PostMetricsNodeByIdQueryResponse, PostMetricsNodeByIdQueryError, GetMetricsNodeByIdRangeData, GetMetricsNodeByIdRangeResponse, GetMetricsNodeByIdRangeError, PostMetricsReloadData, PostMetricsReloadResponse, PostMetricsReloadError, GetMetricsStatusData, GetMetricsStatusResponse, GetMetricsStatusError, PostMetricsUndeployData, PostMetricsUndeployResponse, PostMetricsUndeployError, GetNetworksBesuData, GetNetworksBesuResponse, GetNetworksBesuError, PostNetworksBesuData, PostNetworksBesuResponse, PostNetworksBesuError, PostNetworksBesuImportData, PostNetworksBesuImportResponse, PostNetworksBesuImportError, DeleteNetworksBesuByIdData, DeleteNetworksBesuByIdError, GetNetworksBesuByIdData, GetNetworksBesuByIdResponse, GetNetworksBesuByIdError, GetNetworksFabricData, GetNetworksFabricResponse, GetNetworksFabricError, PostNetworksFabricData, PostNetworksFabricResponse, PostNetworksFabricError, GetNetworksFabricByNameByNameData, GetNetworksFabricByNameByNameResponse, GetNetworksFabricByNameByNameError, PostNetworksFabricImportData, PostNetworksFabricImportResponse, PostNetworksFabricImportError, PostNetworksFabricImportWithOrgData, PostNetworksFabricImportWithOrgResponse, PostNetworksFabricImportWithOrgError, DeleteNetworksFabricByIdData, DeleteNetworksFabricByIdError, GetNetworksFabricByIdData, GetNetworksFabricByIdResponse, GetNetworksFabricByIdError, PostNetworksFabricByIdAnchorPeersData, PostNetworksFabricByIdAnchorPeersResponse, PostNetworksFabricByIdAnchorPeersError, GetNetworksFabricByIdBlocksData, GetNetworksFabricByIdBlocksResponse, GetNetworksFabricByIdBlocksError, GetNetworksFabricByIdBlocksByBlockNumData, GetNetworksFabricByIdBlocksByBlockNumResponse, GetNetworksFabricByIdBlocksByBlockNumError, GetNetworksFabricByIdChannelConfigData, GetNetworksFabricByIdChannelConfigResponse, GetNetworksFabricByIdChannelConfigError, GetNetworksFabricByIdCurrentChannelConfigData, GetNetworksFabricByIdCurrentChannelConfigResponse, GetNetworksFabricByIdCurrentChannelConfigError, GetNetworksFabricByIdInfoData, GetNetworksFabricByIdInfoResponse, GetNetworksFabricByIdInfoError, GetNetworksFabricByIdNodesData, GetNetworksFabricByIdNodesResponse, GetNetworksFabricByIdNodesError, PostNetworksFabricByIdNodesData, PostNetworksFabricByIdNodesResponse, PostNetworksFabricByIdNodesError, DeleteNetworksFabricByIdOrderersByOrdererIdData, DeleteNetworksFabricByIdOrderersByOrdererIdResponse, DeleteNetworksFabricByIdOrderersByOrdererIdError, PostNetworksFabricByIdOrderersByOrdererIdJoinData, PostNetworksFabricByIdOrderersByOrdererIdJoinResponse, PostNetworksFabricByIdOrderersByOrdererIdJoinError, PostNetworksFabricByIdOrderersByOrdererIdUnjoinData, PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponse, PostNetworksFabricByIdOrderersByOrdererIdUnjoinError, PostNetworksFabricByIdOrganizationCrlData, PostNetworksFabricByIdOrganizationCrlResponse, PostNetworksFabricByIdOrganizationCrlError, GetNetworksFabricByIdOrganizationsByOrgIdConfigData, GetNetworksFabricByIdOrganizationsByOrgIdConfigResponse, GetNetworksFabricByIdOrganizationsByOrgIdConfigError, DeleteNetworksFabricByIdPeersByPeerIdData, DeleteNetworksFabricByIdPeersByPeerIdResponse, DeleteNetworksFabricByIdPeersByPeerIdError, PostNetworksFabricByIdPeersByPeerIdJoinData, PostNetworksFabricByIdPeersByPeerIdJoinResponse, PostNetworksFabricByIdPeersByPeerIdJoinError, PostNetworksFabricByIdPeersByPeerIdUnjoinData, PostNetworksFabricByIdPeersByPeerIdUnjoinResponse, PostNetworksFabricByIdPeersByPeerIdUnjoinError, PostNetworksFabricByIdReloadBlockData, PostNetworksFabricByIdReloadBlockResponse, PostNetworksFabricByIdReloadBlockError, GetNetworksFabricByIdTransactionsByTxIdData, GetNetworksFabricByIdTransactionsByTxIdResponse, GetNetworksFabricByIdTransactionsByTxIdError, PostNetworksFabricByIdUpdateConfigData, PostNetworksFabricByIdUpdateConfigResponse, PostNetworksFabricByIdUpdateConfigError, GetNodesData, GetNodesResponse, GetNodesError, PostNodesData, PostNodesResponse, PostNodesError, GetNodesDefaultsBesuNodeData, GetNodesDefaultsBesuNodeResponse, GetNodesDefaultsBesuNodeError, GetNodesDefaultsFabricData, GetNodesDefaultsFabricResponse, GetNodesDefaultsFabricError, GetNodesDefaultsFabricOrdererData, GetNodesDefaultsFabricOrdererResponse, GetNodesDefaultsFabricOrdererError, GetNodesDefaultsFabricPeerData, GetNodesDefaultsFabricPeerResponse, GetNodesDefaultsFabricPeerError, GetNodesPlatformByPlatformData, GetNodesPlatformByPlatformResponse, GetNodesPlatformByPlatformError, DeleteNodesByIdData, DeleteNodesByIdError, GetNodesByIdData, GetNodesByIdResponse, GetNodesByIdError, PutNodesByIdData, PutNodesByIdResponse, PutNodesByIdError, PostNodesByIdCertificatesRenewData, PostNodesByIdCertificatesRenewResponse, PostNodesByIdCertificatesRenewError, GetNodesByIdChannelsData, GetNodesByIdChannelsResponse, GetNodesByIdChannelsError, GetNodesByIdChannelsByChannelIdChaincodesData, GetNodesByIdChannelsByChannelIdChaincodesResponse, GetNodesByIdChannelsByChannelIdChaincodesError, GetNodesByIdEventsData, GetNodesByIdEventsResponse, GetNodesByIdEventsError, GetNodesByIdLogsData, GetNodesByIdLogsResponse, GetNodesByIdLogsError, PostNodesByIdRestartData, PostNodesByIdRestartResponse, PostNodesByIdRestartError, PostNodesByIdStartData, PostNodesByIdStartResponse, PostNodesByIdStartError, PostNodesByIdStopData, PostNodesByIdStopResponse, PostNodesByIdStopError, GetNotificationsProvidersData, GetNotificationsProvidersResponse, GetNotificationsProvidersError, PostNotificationsProvidersData, PostNotificationsProvidersResponse, PostNotificationsProvidersError, DeleteNotificationsProvidersByIdData, DeleteNotificationsProvidersByIdError, GetNotificationsProvidersByIdData, GetNotificationsProvidersByIdResponse, GetNotificationsProvidersByIdError, PutNotificationsProvidersByIdData, PutNotificationsProvidersByIdResponse, PutNotificationsProvidersByIdError, PostNotificationsProvidersByIdTestData, PostNotificationsProvidersByIdTestResponse, PostNotificationsProvidersByIdTestError, GetOrganizationsData, GetOrganizationsResponse, GetOrganizationsError, PostOrganizationsData, PostOrganizationsResponse, PostOrganizationsError, GetOrganizationsByMspidByMspidData, GetOrganizationsByMspidByMspidResponse, GetOrganizationsByMspidByMspidError, DeleteOrganizationsByIdData, DeleteOrganizationsByIdError, GetOrganizationsByIdData, GetOrganizationsByIdResponse, GetOrganizationsByIdError, PutOrganizationsByIdData, PutOrganizationsByIdResponse, PutOrganizationsByIdError, GetOrganizationsByIdCrlData, GetOrganizationsByIdCrlResponse, GetOrganizationsByIdCrlError, PostOrganizationsByIdCrlRevokePemData, PostOrganizationsByIdCrlRevokePemResponse, PostOrganizationsByIdCrlRevokePemError, DeleteOrganizationsByIdCrlRevokeSerialData, DeleteOrganizationsByIdCrlRevokeSerialResponse, DeleteOrganizationsByIdCrlRevokeSerialError, PostOrganizationsByIdCrlRevokeSerialData, PostOrganizationsByIdCrlRevokeSerialResponse, PostOrganizationsByIdCrlRevokeSerialError, GetOrganizationsByIdRevokedCertificatesData, GetOrganizationsByIdRevokedCertificatesResponse, GetOrganizationsByIdRevokedCertificatesError, GetPluginsData, GetPluginsResponse, GetPluginsError, PostPluginsData, PostPluginsResponse, PostPluginsError, GetPluginsAvailableData, GetPluginsAvailableResponse, GetPluginsAvailableError, PostPluginsAvailableRefreshData, PostPluginsAvailableRefreshResponse, PostPluginsAvailableRefreshError, DeletePluginsByNameData, DeletePluginsByNameError, GetPluginsByNameData, GetPluginsByNameResponse, GetPluginsByNameError, PutPluginsByNameData, PutPluginsByNameResponse, PutPluginsByNameError, PostPluginsByNameDeployData, PostPluginsByNameDeployError, GetPluginsByNameDeploymentStatusData, GetPluginsByNameDeploymentStatusResponse, GetPluginsByNameDeploymentStatusError, PostPluginsByNameResumeData, PostPluginsByNameResumeResponse, PostPluginsByNameResumeError, GetPluginsByNameServicesData, GetPluginsByNameServicesResponse, GetPluginsByNameServicesError, GetPluginsByNameStatusData, GetPluginsByNameStatusResponse, GetPluginsByNameStatusError, PostPluginsByNameStopData, PostPluginsByNameStopError, PostProjectsByProjectIdDirsCreateData, PostProjectsByProjectIdDirsCreateResponse, PostProjectsByProjectIdDirsCreateError, DeleteProjectsByProjectIdDirsDeleteData, DeleteProjectsByProjectIdDirsDeleteResponse, DeleteProjectsByProjectIdDirsDeleteError, GetProjectsByProjectIdDirsListData, GetProjectsByProjectIdDirsListResponse, GetProjectsByProjectIdDirsListError, DeleteProjectsByProjectIdFilesDeleteData, DeleteProjectsByProjectIdFilesDeleteResponse, DeleteProjectsByProjectIdFilesDeleteError, GetProjectsByProjectIdFilesEntriesData, GetProjectsByProjectIdFilesEntriesResponse, GetProjectsByProjectIdFilesEntriesError, GetProjectsByProjectIdFilesListData, GetProjectsByProjectIdFilesListResponse, GetProjectsByProjectIdFilesListError, GetProjectsByProjectIdFilesReadData, GetProjectsByProjectIdFilesReadResponse, GetProjectsByProjectIdFilesReadError, PostProjectsByProjectIdFilesWriteData, PostProjectsByProjectIdFilesWriteResponse, PostProjectsByProjectIdFilesWriteError, PostScBesuDeployData, PostScBesuDeployResponse, PostScBesuDeployError, GetScFabricChaincodesData, GetScFabricChaincodesResponse, GetScFabricChaincodesError, PostScFabricChaincodesData, PostScFabricChaincodesResponse, PostScFabricChaincodesError, GetScFabricChaincodesByChaincodeIdDefinitionsData, GetScFabricChaincodesByChaincodeIdDefinitionsResponse, GetScFabricChaincodesByChaincodeIdDefinitionsError, PostScFabricChaincodesByChaincodeIdDefinitionsData, PostScFabricChaincodesByChaincodeIdDefinitionsResponse, PostScFabricChaincodesByChaincodeIdDefinitionsError, GetScFabricChaincodesByIdData, GetScFabricChaincodesByIdResponse, GetScFabricChaincodesByIdError, DeleteScFabricDefinitionsByDefinitionIdData, DeleteScFabricDefinitionsByDefinitionIdResponse, DeleteScFabricDefinitionsByDefinitionIdError, PutScFabricDefinitionsByDefinitionIdData, PutScFabricDefinitionsByDefinitionIdResponse, PutScFabricDefinitionsByDefinitionIdError, PostScFabricDefinitionsByDefinitionIdApproveData, PostScFabricDefinitionsByDefinitionIdApproveResponse, PostScFabricDefinitionsByDefinitionIdApproveError, PostScFabricDefinitionsByDefinitionIdCommitData, PostScFabricDefinitionsByDefinitionIdCommitResponse, PostScFabricDefinitionsByDefinitionIdCommitError, PostScFabricDefinitionsByDefinitionIdDeployData, PostScFabricDefinitionsByDefinitionIdDeployResponse, PostScFabricDefinitionsByDefinitionIdDeployError, PostScFabricDefinitionsByDefinitionIdInstallData, PostScFabricDefinitionsByDefinitionIdInstallResponse, PostScFabricDefinitionsByDefinitionIdInstallError, GetScFabricDefinitionsByDefinitionIdTimelineData, GetScFabricDefinitionsByDefinitionIdTimelineResponse, GetScFabricDefinitionsByDefinitionIdTimelineError, PostScFabricDeployData, PostScFabricDeployResponse, PostScFabricDeployError, PostScFabricDockerDeployData, PostScFabricDockerDeployResponse, PostScFabricDockerDeployError, PostScFabricPeerByPeerIdChaincodeApproveData, PostScFabricPeerByPeerIdChaincodeApproveResponse, PostScFabricPeerByPeerIdChaincodeApproveError, PostScFabricPeerByPeerIdChaincodeCommitData, PostScFabricPeerByPeerIdChaincodeCommitResponse, PostScFabricPeerByPeerIdChaincodeCommitError, PostScFabricPeerByPeerIdChaincodeInstallData, PostScFabricPeerByPeerIdChaincodeInstallResponse, PostScFabricPeerByPeerIdChaincodeInstallError, GetSettingsData, GetSettingsResponse, PostSettingsData, PostSettingsResponse, GetUsersData, GetUsersResponse, GetUsersError, PostUsersData, PostUsersResponse, PostUsersError, DeleteUsersByIdData, DeleteUsersByIdError, GetUsersByIdData, GetUsersByIdResponse, GetUsersByIdError, PutUsersByIdData, PutUsersByIdResponse, PutUsersByIdError, PutUsersByIdPasswordData, PutUsersByIdPasswordResponse, PutUsersByIdPasswordError, PutUsersByIdRoleData, PutUsersByIdRoleResponse, PutUsersByIdRoleError } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get available boilerplates
 * Returns a list of available boilerplates filtered by network platform
 */
export const getAiBoilerplates = <ThrowOnError extends boolean = false>(options: Options<GetAiBoilerplatesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAiBoilerplatesResponse, GetAiBoilerplatesError, ThrowOnError>({
        url: '/ai/boilerplates',
        ...options
    });
};

/**
 * Generate code
 * Generates code based on the provided prompt and project context
 */
export const postAiGenerate = <ThrowOnError extends boolean = false>(options: Options<PostAiGenerateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAiGenerateResponse, PostAiGenerateError, ThrowOnError>({
        url: '/ai/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get available AI models
 * Returns a list of available AI models for code generation
 */
export const getAiModels = <ThrowOnError extends boolean = false>(options?: Options<GetAiModelsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAiModelsResponse, GetAiModelsError, ThrowOnError>({
        url: '/ai/models',
        ...options
    });
};

/**
 * Chat with AI assistant
 * Stream a conversation with the AI assistant using Server-Sent Events (SSE)
 */
export const postAiByProjectIdChat = <ThrowOnError extends boolean = false>(options: Options<PostAiByProjectIdChatData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAiByProjectIdChatResponse, PostAiByProjectIdChatError, ThrowOnError>({
        url: '/ai/{projectId}/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all conversations for a project
 * Returns a list of all chat conversations associated with a specific project
 */
export const getAiByProjectIdConversations = <ThrowOnError extends boolean = false>(options: Options<GetAiByProjectIdConversationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAiByProjectIdConversationsResponse, GetAiByProjectIdConversationsError, ThrowOnError>({
        url: '/ai/{projectId}/conversations',
        ...options
    });
};

/**
 * Get conversation messages
 * Get all messages in a conversation
 */
export const getAiByProjectIdConversationsByConversationId = <ThrowOnError extends boolean = false>(options: Options<GetAiByProjectIdConversationsByConversationIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAiByProjectIdConversationsByConversationIdResponse, GetAiByProjectIdConversationsByConversationIdError, ThrowOnError>({
        url: '/ai/{projectId}/conversations/{conversationId}',
        ...options
    });
};

/**
 * Get conversation detail
 * Get detailed information about a conversation including all messages and metadata
 */
export const getAiByProjectIdConversationsByConversationIdExport = <ThrowOnError extends boolean = false>(options: Options<GetAiByProjectIdConversationsByConversationIdExportData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAiByProjectIdConversationsByConversationIdExportResponse, GetAiByProjectIdConversationsByConversationIdExportError, ThrowOnError>({
        url: '/ai/{projectId}/conversations/{conversationId}/export',
        ...options
    });
};

/**
 * List audit logs
 * Retrieves a paginated list of audit logs with optional filters
 */
export const getAuditLogs = <ThrowOnError extends boolean = false>(options?: Options<GetAuditLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAuditLogsResponse, GetAuditLogsError, ThrowOnError>({
        url: '/audit/logs',
        ...options
    });
};

/**
 * Get audit log
 * Retrieves a specific audit log by ID
 */
export const getAuditLogsById = <ThrowOnError extends boolean = false>(options: Options<GetAuditLogsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAuditLogsByIdResponse, GetAuditLogsByIdError, ThrowOnError>({
        url: '/audit/logs/{id}',
        ...options
    });
};

/**
 * Change own password
 * Allows a user to change their own password
 */
export const postAuthChangePassword = <ThrowOnError extends boolean = false>(options: Options<PostAuthChangePasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAuthChangePasswordResponse, PostAuthChangePasswordError, ThrowOnError>({
        url: '/auth/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Login user
 * Authenticates a user and returns a session cookie
 */
export const postAuthLogin = <ThrowOnError extends boolean = false>(options: Options<PostAuthLoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAuthLoginResponse, PostAuthLoginError, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Logout user
 * Invalidates the current session and clears the session cookie
 */
export const postAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<PostAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAuthLogoutResponse, PostAuthLogoutError, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

/**
 * Get current user
 * Returns information about the currently authenticated user
 */
export const getAuthMe = <ThrowOnError extends boolean = false>(options?: Options<GetAuthMeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAuthMeResponse, GetAuthMeError, ThrowOnError>({
        url: '/auth/me',
        ...options
    });
};

/**
 * List all backups
 * Get a list of all backups
 */
export const getBackups = <ThrowOnError extends boolean = false>(options?: Options<GetBackupsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBackupsResponse, GetBackupsError, ThrowOnError>({
        url: '/backups',
        ...options
    });
};

/**
 * Create a new backup
 * Create a new backup with the specified configuration
 */
export const postBackups = <ThrowOnError extends boolean = false>(options: Options<PostBackupsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBackupsResponse, PostBackupsError, ThrowOnError>({
        url: '/backups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all backup schedules
 * Get a list of all backup schedules
 */
export const getBackupsSchedules = <ThrowOnError extends boolean = false>(options?: Options<GetBackupsSchedulesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBackupsSchedulesResponse, GetBackupsSchedulesError, ThrowOnError>({
        url: '/backups/schedules',
        ...options
    });
};

/**
 * Create a new backup schedule
 * Create a new backup schedule with the specified configuration
 */
export const postBackupsSchedules = <ThrowOnError extends boolean = false>(options: Options<PostBackupsSchedulesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBackupsSchedulesResponse, PostBackupsSchedulesError, ThrowOnError>({
        url: '/backups/schedules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a backup schedule
 * Delete a backup schedule and stop its execution
 */
export const deleteBackupsSchedulesById = <ThrowOnError extends boolean = false>(options: Options<DeleteBackupsSchedulesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteBackupsSchedulesByIdError, ThrowOnError>({
        url: '/backups/schedules/{id}',
        ...options
    });
};

/**
 * Get a backup schedule by ID
 * Get detailed information about a specific backup schedule
 */
export const getBackupsSchedulesById = <ThrowOnError extends boolean = false>(options: Options<GetBackupsSchedulesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBackupsSchedulesByIdResponse, GetBackupsSchedulesByIdError, ThrowOnError>({
        url: '/backups/schedules/{id}',
        ...options
    });
};

/**
 * Update a backup schedule
 * Update an existing backup schedule with new configuration
 */
export const putBackupsSchedulesById = <ThrowOnError extends boolean = false>(options: Options<PutBackupsSchedulesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutBackupsSchedulesByIdResponse, PutBackupsSchedulesByIdError, ThrowOnError>({
        url: '/backups/schedules/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Disable a backup schedule
 * Disable a backup schedule to stop it from running
 */
export const putBackupsSchedulesByIdDisable = <ThrowOnError extends boolean = false>(options: Options<PutBackupsSchedulesByIdDisableData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutBackupsSchedulesByIdDisableResponse, PutBackupsSchedulesByIdDisableError, ThrowOnError>({
        url: '/backups/schedules/{id}/disable',
        ...options
    });
};

/**
 * Enable a backup schedule
 * Enable a backup schedule to start running
 */
export const putBackupsSchedulesByIdEnable = <ThrowOnError extends boolean = false>(options: Options<PutBackupsSchedulesByIdEnableData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutBackupsSchedulesByIdEnableResponse, PutBackupsSchedulesByIdEnableError, ThrowOnError>({
        url: '/backups/schedules/{id}/enable',
        ...options
    });
};

/**
 * List all backup targets
 * Get a list of all backup targets
 */
export const getBackupsTargets = <ThrowOnError extends boolean = false>(options?: Options<GetBackupsTargetsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBackupsTargetsResponse, GetBackupsTargetsError, ThrowOnError>({
        url: '/backups/targets',
        ...options
    });
};

/**
 * Create a new backup target
 * Create a new backup target with the specified configuration
 */
export const postBackupsTargets = <ThrowOnError extends boolean = false>(options: Options<PostBackupsTargetsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBackupsTargetsResponse, PostBackupsTargetsError, ThrowOnError>({
        url: '/backups/targets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a backup target
 * Delete a backup target and all associated backups
 */
export const deleteBackupsTargetsById = <ThrowOnError extends boolean = false>(options: Options<DeleteBackupsTargetsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteBackupsTargetsByIdError, ThrowOnError>({
        url: '/backups/targets/{id}',
        ...options
    });
};

/**
 * Get a backup target by ID
 * Get detailed information about a specific backup target
 */
export const getBackupsTargetsById = <ThrowOnError extends boolean = false>(options: Options<GetBackupsTargetsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBackupsTargetsByIdResponse, GetBackupsTargetsByIdError, ThrowOnError>({
        url: '/backups/targets/{id}',
        ...options
    });
};

/**
 * Update a backup target
 * Update an existing backup target with new configuration
 */
export const putBackupsTargetsById = <ThrowOnError extends boolean = false>(options: Options<PutBackupsTargetsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutBackupsTargetsByIdResponse, PutBackupsTargetsByIdError, ThrowOnError>({
        url: '/backups/targets/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a backup
 * Delete a backup and its associated files
 */
export const deleteBackupsById = <ThrowOnError extends boolean = false>(options: Options<DeleteBackupsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteBackupsByIdError, ThrowOnError>({
        url: '/backups/{id}',
        ...options
    });
};

/**
 * Get a backup by ID
 * Get detailed information about a specific backup
 */
export const getBackupsById = <ThrowOnError extends boolean = false>(options: Options<GetBackupsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBackupsByIdResponse, GetBackupsByIdError, ThrowOnError>({
        url: '/backups/{id}',
        ...options
    });
};

/**
 * List all projects
 * Get a list of all projects
 */
export const getChaincodeProjects = <ThrowOnError extends boolean = false>(options?: Options<GetChaincodeProjectsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChaincodeProjectsResponse, GetChaincodeProjectsError, ThrowOnError>({
        url: '/chaincode-projects',
        ...options
    });
};

/**
 * Create a project
 * Create a new project, scaffold its directory, and store it in the DB
 */
export const postChaincodeProjects = <ThrowOnError extends boolean = false>(options: Options<PostChaincodeProjectsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostChaincodeProjectsResponse, PostChaincodeProjectsError, ThrowOnError>({
        url: '/chaincode-projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a project by ID
 * Get details of a project by its ID
 */
export const getChaincodeProjectsById = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChaincodeProjectsByIdResponse, GetChaincodeProjectsByIdError, ThrowOnError>({
        url: '/chaincode-projects/{id}',
        ...options
    });
};

/**
 * List project commits with file changes
 * Get a paginated list of commits for a project, including added/removed/modified files
 */
export const getChaincodeProjectsByIdCommits = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdCommitsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChaincodeProjectsByIdCommitsResponse, GetChaincodeProjectsByIdCommitsError, ThrowOnError>({
        url: '/chaincode-projects/{id}/commits',
        ...options
    });
};

/**
 * Get commit details
 * Get details for a single commit, including file changes
 */
export const getChaincodeProjectsByIdCommitsByCommitHash = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdCommitsByCommitHashData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChaincodeProjectsByIdCommitsByCommitHashResponse, GetChaincodeProjectsByIdCommitsByCommitHashError, ThrowOnError>({
        url: '/chaincode-projects/{id}/commits/{commitHash}',
        ...options
    });
};

/**
 * Get file diff between two commits
 * Get the diff of a file between two commits
 */
export const getChaincodeProjectsByIdDiff = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdDiffData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChaincodeProjectsByIdDiffResponse, GetChaincodeProjectsByIdDiffError, ThrowOnError>({
        url: '/chaincode-projects/{id}/diff',
        ...options
    });
};

/**
 * Update a project's endorsement policy
 * Update the endorsement policy of an existing project
 */
export const putChaincodeProjectsByIdEndorsementPolicy = <ThrowOnError extends boolean = false>(options: Options<PutChaincodeProjectsByIdEndorsementPolicyData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutChaincodeProjectsByIdEndorsementPolicyResponse, PutChaincodeProjectsByIdEndorsementPolicyError, ThrowOnError>({
        url: '/chaincode-projects/{id}/endorsement-policy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get file contents at a specific commit
 * Get the contents of a file at a specific commit hash
 */
export const getChaincodeProjectsByIdFileAtCommit = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdFileAtCommitData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChaincodeProjectsByIdFileAtCommitResponse, GetChaincodeProjectsByIdFileAtCommitError, ThrowOnError>({
        url: '/chaincode-projects/{id}/file_at_commit',
        ...options
    });
};

/**
 * Invoke a chaincode transaction
 * Invokes a transaction on the specified chaincode project
 */
export const postChaincodeProjectsByIdInvoke = <ThrowOnError extends boolean = false>(options: Options<PostChaincodeProjectsByIdInvokeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostChaincodeProjectsByIdInvokeResponse, PostChaincodeProjectsByIdInvokeError, ThrowOnError>({
        url: '/chaincode-projects/{id}/invoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get logs for a project server
 * Stream or return the logs for the project's running container
 */
export const getChaincodeProjectsByIdLogs = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChaincodeProjectsByIdLogsResponse, GetChaincodeProjectsByIdLogsError, ThrowOnError>({
        url: '/chaincode-projects/{id}/logs',
        ...options
    });
};

/**
 * Stream real-time logs for a project server
 * Stream logs for the project's running container using SSE
 */
export const getChaincodeProjectsByIdLogsStream = <ThrowOnError extends boolean = false>(options: Options<GetChaincodeProjectsByIdLogsStreamData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChaincodeProjectsByIdLogsStreamResponse, GetChaincodeProjectsByIdLogsStreamError, ThrowOnError>({
        url: '/chaincode-projects/{id}/logs/stream',
        ...options
    });
};

/**
 * Query a chaincode transaction
 * Queries the state of the specified chaincode project
 */
export const postChaincodeProjectsByIdQuery = <ThrowOnError extends boolean = false>(options: Options<PostChaincodeProjectsByIdQueryData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostChaincodeProjectsByIdQueryResponse, PostChaincodeProjectsByIdQueryError, ThrowOnError>({
        url: '/chaincode-projects/{id}/query',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Start the server for a project
 * Start the server process for a given project using its boilerplate
 */
export const postChaincodeProjectsByIdStart = <ThrowOnError extends boolean = false>(options: Options<PostChaincodeProjectsByIdStartData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostChaincodeProjectsByIdStartResponse, PostChaincodeProjectsByIdStartError, ThrowOnError>({
        url: '/chaincode-projects/{id}/start',
        ...options
    });
};

/**
 * Stop the server for a project
 * Stop the server process for a given project
 */
export const postChaincodeProjectsByIdStop = <ThrowOnError extends boolean = false>(options: Options<PostChaincodeProjectsByIdStopData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostChaincodeProjectsByIdStopResponse, PostChaincodeProjectsByIdStopError, ThrowOnError>({
        url: '/chaincode-projects/{id}/stop',
        ...options
    });
};

/**
 * Submit config update proposal
 * Submit a signed config update proposal for execution
 */
export const postDummy = <ThrowOnError extends boolean = false>(options: Options<PostDummyData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDummyResponse, unknown, ThrowOnError>({
        url: '/dummy',
        ...options
    });
};

/**
 * List all key providers
 * Get a list of all configured key providers
 */
export const getKeyProviders = <ThrowOnError extends boolean = false>(options?: Options<GetKeyProvidersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKeyProvidersResponse, GetKeyProvidersError, ThrowOnError>({
        url: '/key-providers',
        ...options
    });
};

/**
 * Create a new key provider
 * Create a new provider for key management
 */
export const postKeyProviders = <ThrowOnError extends boolean = false>(options: Options<PostKeyProvidersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostKeyProvidersResponse, PostKeyProvidersError, ThrowOnError>({
        url: '/key-providers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a provider
 * Delete a specific key provider
 */
export const deleteKeyProvidersById = <ThrowOnError extends boolean = false>(options: Options<DeleteKeyProvidersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteKeyProvidersByIdError, ThrowOnError>({
        url: '/key-providers/{id}',
        ...options
    });
};

/**
 * Get a specific provider
 * Get detailed information about a specific key provider
 */
export const getKeyProvidersById = <ThrowOnError extends boolean = false>(options: Options<GetKeyProvidersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKeyProvidersByIdResponse, GetKeyProvidersByIdError, ThrowOnError>({
        url: '/key-providers/{id}',
        ...options
    });
};

/**
 * Get paginated keys
 * Get a paginated list of keys
 */
export const getKeys = <ThrowOnError extends boolean = false>(options?: Options<GetKeysData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKeysResponse, GetKeysError, ThrowOnError>({
        url: '/keys',
        ...options
    });
};

/**
 * Create a new key
 * Create a new key pair with specified algorithm and parameters
 */
export const postKeys = <ThrowOnError extends boolean = false>(options: Options<PostKeysData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostKeysResponse, PostKeysError, ThrowOnError>({
        url: '/keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all keys
 * Get all keys with their certificates and metadata
 */
export const getKeysAll = <ThrowOnError extends boolean = false>(options?: Options<GetKeysAllData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKeysAllResponse, GetKeysAllError, ThrowOnError>({
        url: '/keys/all',
        ...options
    });
};

/**
 * Filter keys by algorithm and curve
 * Get keys filtered by algorithm type and/or curve type
 */
export const getKeysFilter = <ThrowOnError extends boolean = false>(options?: Options<GetKeysFilterData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKeysFilterResponse, GetKeysFilterError, ThrowOnError>({
        url: '/keys/filter',
        ...options
    });
};

/**
 * Delete a key
 * Delete a specific key by ID
 */
export const deleteKeysById = <ThrowOnError extends boolean = false>(options: Options<DeleteKeysByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteKeysByIdError, ThrowOnError>({
        url: '/keys/{id}',
        ...options
    });
};

/**
 * Get a specific key by ID
 * Get detailed information about a specific key
 */
export const getKeysById = <ThrowOnError extends boolean = false>(options: Options<GetKeysByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetKeysByIdResponse, GetKeysByIdError, ThrowOnError>({
        url: '/keys/{id}',
        ...options
    });
};

/**
 * Sign a certificate
 * Sign a certificate for a key using a CA key
 */
export const postKeysByKeyIdSign = <ThrowOnError extends boolean = false>(options: Options<PostKeysByKeyIdSignData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostKeysByKeyIdSignResponse, PostKeysByKeyIdSignError, ThrowOnError>({
        url: '/keys/{keyID}/sign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deploy a new Prometheus instance
 * Deploys a new Prometheus instance with the specified configuration
 */
export const postMetricsDeploy = <ThrowOnError extends boolean = false>(options: Options<PostMetricsDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostMetricsDeployResponse, PostMetricsDeployError, ThrowOnError>({
        url: '/metrics/deploy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get metrics for a specific node
 * Retrieves metrics for a specific node by ID and optional PromQL query
 */
export const getMetricsNodeById = <ThrowOnError extends boolean = false>(options: Options<GetMetricsNodeByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMetricsNodeByIdResponse, GetMetricsNodeByIdError, ThrowOnError>({
        url: '/metrics/node/{id}',
        ...options
    });
};

/**
 * Get label values for a specific label
 * Retrieves all values for a specific label, optionally filtered by metric matches and node ID
 */
export const getMetricsNodeByIdLabelByLabelValues = <ThrowOnError extends boolean = false>(options: Options<GetMetricsNodeByIdLabelByLabelValuesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMetricsNodeByIdLabelByLabelValuesResponse, GetMetricsNodeByIdLabelByLabelValuesError, ThrowOnError>({
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/metrics/node/{id}/label/{label}/values',
        ...options
    });
};

/**
 * Execute custom Prometheus query
 * Execute a custom Prometheus query with optional time range
 */
export const postMetricsNodeByIdQuery = <ThrowOnError extends boolean = false>(options: Options<PostMetricsNodeByIdQueryData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostMetricsNodeByIdQueryResponse, PostMetricsNodeByIdQueryError, ThrowOnError>({
        url: '/metrics/node/{id}/query',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get metrics for a specific node with time range
 * Retrieves metrics for a specific node within a specified time range
 */
export const getMetricsNodeByIdRange = <ThrowOnError extends boolean = false>(options: Options<GetMetricsNodeByIdRangeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMetricsNodeByIdRangeResponse, GetMetricsNodeByIdRangeError, ThrowOnError>({
        url: '/metrics/node/{id}/range',
        ...options
    });
};

/**
 * Reload Prometheus configuration
 * Triggers a reload of the Prometheus configuration to pick up any changes
 */
export const postMetricsReload = <ThrowOnError extends boolean = false>(options?: Options<PostMetricsReloadData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostMetricsReloadResponse, PostMetricsReloadError, ThrowOnError>({
        url: '/metrics/reload',
        ...options
    });
};

/**
 * Get Prometheus status
 * Returns the current status of the Prometheus instance including version, port, and configuration
 */
export const getMetricsStatus = <ThrowOnError extends boolean = false>(options?: Options<GetMetricsStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMetricsStatusResponse, GetMetricsStatusError, ThrowOnError>({
        url: '/metrics/status',
        ...options
    });
};

/**
 * Undeploy Prometheus instance
 * Stops and removes the Prometheus instance
 */
export const postMetricsUndeploy = <ThrowOnError extends boolean = false>(options?: Options<PostMetricsUndeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostMetricsUndeployResponse, PostMetricsUndeployError, ThrowOnError>({
        url: '/metrics/undeploy',
        ...options
    });
};

/**
 * List Besu networks
 * Get a paginated list of Besu networks
 */
export const getNetworksBesu = <ThrowOnError extends boolean = false>(options?: Options<GetNetworksBesuData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksBesuResponse, GetNetworksBesuError, ThrowOnError>({
        url: '/networks/besu',
        ...options
    });
};

/**
 * Create a new Besu network
 * Create a new Besu network with the specified configuration
 */
export const postNetworksBesu = <ThrowOnError extends boolean = false>(options: Options<PostNetworksBesuData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksBesuResponse, PostNetworksBesuError, ThrowOnError>({
        url: '/networks/besu',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Import a Besu network
 * Import an existing Besu network using its genesis file
 */
export const postNetworksBesuImport = <ThrowOnError extends boolean = false>(options: Options<PostNetworksBesuImportData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksBesuImportResponse, PostNetworksBesuImportError, ThrowOnError>({
        url: '/networks/besu/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a Besu network
 * Delete an existing Besu network and all its resources
 */
export const deleteNetworksBesuById = <ThrowOnError extends boolean = false>(options: Options<DeleteNetworksBesuByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteNetworksBesuByIdError, ThrowOnError>({
        url: '/networks/besu/{id}',
        ...options
    });
};

/**
 * Get a Besu network by ID
 * Get details of a specific Besu network
 */
export const getNetworksBesuById = <ThrowOnError extends boolean = false>(options: Options<GetNetworksBesuByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksBesuByIdResponse, GetNetworksBesuByIdError, ThrowOnError>({
        url: '/networks/besu/{id}',
        ...options
    });
};

/**
 * List Fabric networks
 * Get a paginated list of Fabric networks
 */
export const getNetworksFabric = <ThrowOnError extends boolean = false>(options?: Options<GetNetworksFabricData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricResponse, GetNetworksFabricError, ThrowOnError>({
        url: '/networks/fabric',
        ...options
    });
};

/**
 * Create a new Fabric network
 * Create a new Hyperledger Fabric network with the specified configuration
 */
export const postNetworksFabric = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricResponse, PostNetworksFabricError, ThrowOnError>({
        url: '/networks/fabric',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a Fabric network by slug
 * Get details of a specific Fabric network using its slug
 */
export const getNetworksFabricByNameByName = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByNameByNameData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByNameByNameResponse, GetNetworksFabricByNameByNameError, ThrowOnError>({
        url: '/networks/fabric/by-name/{name}',
        ...options
    });
};

/**
 * Import a Fabric network
 * Import an existing Fabric network using its genesis block
 */
export const postNetworksFabricImport = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricImportData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricImportResponse, PostNetworksFabricImportError, ThrowOnError>({
        url: '/networks/fabric/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Import a Fabric network with organization
 * Import an existing Fabric network using organization details
 */
export const postNetworksFabricImportWithOrg = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricImportWithOrgData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricImportWithOrgResponse, PostNetworksFabricImportWithOrgError, ThrowOnError>({
        url: '/networks/fabric/import-with-org',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a Fabric network
 * Delete an existing Fabric network and all its resources
 */
export const deleteNetworksFabricById = <ThrowOnError extends boolean = false>(options: Options<DeleteNetworksFabricByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteNetworksFabricByIdError, ThrowOnError>({
        url: '/networks/fabric/{id}',
        ...options
    });
};

/**
 * Get a Fabric network by ID
 * Get details of a specific Fabric network
 */
export const getNetworksFabricById = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdResponse, GetNetworksFabricByIdError, ThrowOnError>({
        url: '/networks/fabric/{id}',
        ...options
    });
};

/**
 * Set anchor peers for an organization
 * Set the anchor peers for an organization in a Fabric network
 */
export const postNetworksFabricByIdAnchorPeers = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdAnchorPeersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdAnchorPeersResponse, PostNetworksFabricByIdAnchorPeersError, ThrowOnError>({
        url: '/networks/fabric/{id}/anchor-peers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get list of blocks from Fabric network
 * Get a paginated list of blocks from a Fabric network
 */
export const getNetworksFabricByIdBlocks = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdBlocksData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdBlocksResponse, GetNetworksFabricByIdBlocksError, ThrowOnError>({
        url: '/networks/fabric/{id}/blocks',
        ...options
    });
};

/**
 * Get transactions from a specific block
 * Get all transactions from a specific block in a Fabric network
 */
export const getNetworksFabricByIdBlocksByBlockNum = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdBlocksByBlockNumData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdBlocksByBlockNumResponse, GetNetworksFabricByIdBlocksByBlockNumError, ThrowOnError>({
        url: '/networks/fabric/{id}/blocks/{blockNum}',
        ...options
    });
};

/**
 * Get Fabric network channel configuration
 * Retrieve the channel configuration for a Fabric network
 */
export const getNetworksFabricByIdChannelConfig = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdChannelConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdChannelConfigResponse, GetNetworksFabricByIdChannelConfigError, ThrowOnError>({
        url: '/networks/fabric/{id}/channel-config',
        ...options
    });
};

/**
 * Get Fabric network current channel configuration
 * Retrieve the current channel configuration for a Fabric network
 */
export const getNetworksFabricByIdCurrentChannelConfig = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdCurrentChannelConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdCurrentChannelConfigResponse, GetNetworksFabricByIdCurrentChannelConfigError, ThrowOnError>({
        url: '/networks/fabric/{id}/current-channel-config',
        ...options
    });
};

/**
 * Get Fabric chain information
 * Retrieve detailed information about the Fabric blockchain including height and block hashes
 */
export const getNetworksFabricByIdInfo = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdInfoResponse, GetNetworksFabricByIdInfoError, ThrowOnError>({
        url: '/networks/fabric/{id}/info',
        ...options
    });
};

/**
 * Get network nodes
 * Get all nodes associated with a network
 */
export const getNetworksFabricByIdNodes = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdNodesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdNodesResponse, GetNetworksFabricByIdNodesError, ThrowOnError>({
        url: '/networks/fabric/{id}/nodes',
        ...options
    });
};

/**
 * Add node to network
 * Add a node (peer or orderer) to an existing network
 */
export const postNetworksFabricByIdNodes = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdNodesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdNodesResponse, PostNetworksFabricByIdNodesError, ThrowOnError>({
        url: '/networks/fabric/{id}/nodes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove orderer from Fabric network
 * Remove an orderer node from an existing Fabric network
 */
export const deleteNetworksFabricByIdOrderersByOrdererId = <ThrowOnError extends boolean = false>(options: Options<DeleteNetworksFabricByIdOrderersByOrdererIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteNetworksFabricByIdOrderersByOrdererIdResponse, DeleteNetworksFabricByIdOrderersByOrdererIdError, ThrowOnError>({
        url: '/networks/fabric/{id}/orderers/{ordererId}',
        ...options
    });
};

/**
 * Join orderer to Fabric network
 * Join an orderer node to an existing Fabric network
 */
export const postNetworksFabricByIdOrderersByOrdererIdJoin = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdOrderersByOrdererIdJoinData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdOrderersByOrdererIdJoinResponse, PostNetworksFabricByIdOrderersByOrdererIdJoinError, ThrowOnError>({
        url: '/networks/fabric/{id}/orderers/{ordererId}/join',
        ...options
    });
};

/**
 * Unjoin orderer from Fabric network
 * Remove an orderer node from a channel but keep it in the network
 */
export const postNetworksFabricByIdOrderersByOrdererIdUnjoin = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdOrderersByOrdererIdUnjoinData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponse, PostNetworksFabricByIdOrderersByOrdererIdUnjoinError, ThrowOnError>({
        url: '/networks/fabric/{id}/orderers/{ordererId}/unjoin',
        ...options
    });
};

/**
 * Update organization CRL
 * Update the Certificate Revocation List (CRL) for an organization in the network
 */
export const postNetworksFabricByIdOrganizationCrl = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdOrganizationCrlData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdOrganizationCrlResponse, PostNetworksFabricByIdOrganizationCrlError, ThrowOnError>({
        url: '/networks/fabric/{id}/organization-crl',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get network configuration
 * Get the network configuration as YAML
 */
export const getNetworksFabricByIdOrganizationsByOrgIdConfig = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdOrganizationsByOrgIdConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdOrganizationsByOrgIdConfigResponse, GetNetworksFabricByIdOrganizationsByOrgIdConfigError, ThrowOnError>({
        url: '/networks/fabric/{id}/organizations/{orgId}/config',
        ...options
    });
};

/**
 * Remove peer from Fabric network
 * Remove a peer node from an existing Fabric network
 */
export const deleteNetworksFabricByIdPeersByPeerId = <ThrowOnError extends boolean = false>(options: Options<DeleteNetworksFabricByIdPeersByPeerIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteNetworksFabricByIdPeersByPeerIdResponse, DeleteNetworksFabricByIdPeersByPeerIdError, ThrowOnError>({
        url: '/networks/fabric/{id}/peers/{peerId}',
        ...options
    });
};

/**
 * Join peer to Fabric network
 * Join a peer node to an existing Fabric network
 */
export const postNetworksFabricByIdPeersByPeerIdJoin = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdPeersByPeerIdJoinData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdPeersByPeerIdJoinResponse, PostNetworksFabricByIdPeersByPeerIdJoinError, ThrowOnError>({
        url: '/networks/fabric/{id}/peers/{peerId}/join',
        ...options
    });
};

/**
 * Unjoin peer from Fabric network
 * Remove a peer node from a channel but keep it in the network
 */
export const postNetworksFabricByIdPeersByPeerIdUnjoin = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdPeersByPeerIdUnjoinData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdPeersByPeerIdUnjoinResponse, PostNetworksFabricByIdPeersByPeerIdUnjoinError, ThrowOnError>({
        url: '/networks/fabric/{id}/peers/{peerId}/unjoin',
        ...options
    });
};

/**
 * Reload network config block
 * Reloads the current config block for a network
 */
export const postNetworksFabricByIdReloadBlock = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdReloadBlockData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdReloadBlockResponse, PostNetworksFabricByIdReloadBlockError, ThrowOnError>({
        url: '/networks/fabric/{id}/reload-block',
        ...options
    });
};

/**
 * Get transaction details by transaction ID
 * Get detailed information about a specific transaction in a Fabric network
 */
export const getNetworksFabricByIdTransactionsByTxId = <ThrowOnError extends boolean = false>(options: Options<GetNetworksFabricByIdTransactionsByTxIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworksFabricByIdTransactionsByTxIdResponse, GetNetworksFabricByIdTransactionsByTxIdError, ThrowOnError>({
        url: '/networks/fabric/{id}/transactions/{txId}',
        ...options
    });
};

/**
 * Prepare a config update for a Fabric network
 * Prepare a config update proposal for a Fabric network using the provided operations.
 * The following operation types are supported:
 * - add_org: Add a new organization to the channel
 * - remove_org: Remove an organization from the channel
 * - update_org_msp: Update an organization's MSP configuration
 * - set_anchor_peers: Set anchor peers for an organization
 * - add_consenter: Add a new consenter to the orderer
 * - remove_consenter: Remove a consenter from the orderer
 * - update_consenter: Update a consenter in the orderer
 * - update_etcd_raft_options: Update etcd raft options for the orderer
 * - update_batch_size: Update batch size for the orderer
 * - update_batch_timeout: Update batch timeout for the orderer
 */
export const postNetworksFabricByIdUpdateConfig = <ThrowOnError extends boolean = false>(options: Options<PostNetworksFabricByIdUpdateConfigData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworksFabricByIdUpdateConfigResponse, PostNetworksFabricByIdUpdateConfigError, ThrowOnError>({
        url: '/networks/fabric/{id}/update-config',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all nodes
 * Get a paginated list of nodes with optional platform filter
 */
export const getNodes = <ThrowOnError extends boolean = false>(options?: Options<GetNodesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesResponse, GetNodesError, ThrowOnError>({
        url: '/nodes',
        ...options
    });
};

/**
 * Create a new node
 * Create a new node with the specified configuration
 */
export const postNodes = <ThrowOnError extends boolean = false>(options: Options<PostNodesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNodesResponse, PostNodesError, ThrowOnError>({
        url: '/nodes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get default values for Besu node
 * Get default configuration values for a Besu node
 */
export const getNodesDefaultsBesuNode = <ThrowOnError extends boolean = false>(options?: Options<GetNodesDefaultsBesuNodeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesDefaultsBesuNodeResponse, GetNodesDefaultsBesuNodeError, ThrowOnError>({
        url: '/nodes/defaults/besu-node',
        ...options
    });
};

/**
 * Get default values for multiple Fabric nodes
 * Get default configuration values for multiple Fabric nodes
 */
export const getNodesDefaultsFabric = <ThrowOnError extends boolean = false>(options?: Options<GetNodesDefaultsFabricData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesDefaultsFabricResponse, GetNodesDefaultsFabricError, ThrowOnError>({
        url: '/nodes/defaults/fabric',
        ...options
    });
};

/**
 * Get default values for Fabric orderer node
 * Get default configuration values for a Fabric orderer node
 */
export const getNodesDefaultsFabricOrderer = <ThrowOnError extends boolean = false>(options?: Options<GetNodesDefaultsFabricOrdererData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesDefaultsFabricOrdererResponse, GetNodesDefaultsFabricOrdererError, ThrowOnError>({
        url: '/nodes/defaults/fabric-orderer',
        ...options
    });
};

/**
 * Get default values for Fabric peer node
 * Get default configuration values for a Fabric peer node
 */
export const getNodesDefaultsFabricPeer = <ThrowOnError extends boolean = false>(options?: Options<GetNodesDefaultsFabricPeerData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesDefaultsFabricPeerResponse, GetNodesDefaultsFabricPeerError, ThrowOnError>({
        url: '/nodes/defaults/fabric-peer',
        ...options
    });
};

/**
 * List nodes by platform
 * Get a paginated list of nodes filtered by blockchain platform
 */
export const getNodesPlatformByPlatform = <ThrowOnError extends boolean = false>(options: Options<GetNodesPlatformByPlatformData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesPlatformByPlatformResponse, GetNodesPlatformByPlatformError, ThrowOnError>({
        url: '/nodes/platform/{platform}',
        ...options
    });
};

/**
 * Delete a node
 * Delete a node by ID
 */
export const deleteNodesById = <ThrowOnError extends boolean = false>(options: Options<DeleteNodesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteNodesByIdError, ThrowOnError>({
        url: '/nodes/{id}',
        ...options
    });
};

/**
 * Get a node
 * Get a node by ID
 */
export const getNodesById = <ThrowOnError extends boolean = false>(options: Options<GetNodesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesByIdResponse, GetNodesByIdError, ThrowOnError>({
        url: '/nodes/{id}',
        ...options
    });
};

/**
 * Update a node
 * Updates an existing node's configuration based on its type
 */
export const putNodesById = <ThrowOnError extends boolean = false>(options: Options<PutNodesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutNodesByIdResponse, PutNodesByIdError, ThrowOnError>({
        url: '/nodes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Renew node certificates
 * Renews the TLS and signing certificates for a Fabric node
 */
export const postNodesByIdCertificatesRenew = <ThrowOnError extends boolean = false>(options: Options<PostNodesByIdCertificatesRenewData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNodesByIdCertificatesRenewResponse, PostNodesByIdCertificatesRenewError, ThrowOnError>({
        url: '/nodes/{id}/certificates/renew',
        ...options
    });
};

/**
 * Get channels for a Fabric node
 * Retrieves all channels for a specific Fabric node
 */
export const getNodesByIdChannels = <ThrowOnError extends boolean = false>(options: Options<GetNodesByIdChannelsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesByIdChannelsResponse, GetNodesByIdChannelsError, ThrowOnError>({
        url: '/nodes/{id}/channels',
        ...options
    });
};

/**
 * Get committed chaincodes for a Fabric peer
 * Retrieves all committed chaincodes for a specific channel on a Fabric peer node
 */
export const getNodesByIdChannelsByChannelIdChaincodes = <ThrowOnError extends boolean = false>(options: Options<GetNodesByIdChannelsByChannelIdChaincodesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesByIdChannelsByChannelIdChaincodesResponse, GetNodesByIdChannelsByChannelIdChaincodesError, ThrowOnError>({
        url: '/nodes/{id}/channels/{channelID}/chaincodes',
        ...options
    });
};

/**
 * Get node events
 * Get a paginated list of events for a specific node
 */
export const getNodesByIdEvents = <ThrowOnError extends boolean = false>(options: Options<GetNodesByIdEventsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesByIdEventsResponse, GetNodesByIdEventsError, ThrowOnError>({
        url: '/nodes/{id}/events',
        ...options
    });
};

/**
 * Tail node logs
 * Stream logs from a specific node
 */
export const getNodesByIdLogs = <ThrowOnError extends boolean = false>(options: Options<GetNodesByIdLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesByIdLogsResponse, GetNodesByIdLogsError, ThrowOnError>({
        url: '/nodes/{id}/logs',
        ...options
    });
};

/**
 * Restart a node
 * Restart a node by ID (stops and starts the node)
 */
export const postNodesByIdRestart = <ThrowOnError extends boolean = false>(options: Options<PostNodesByIdRestartData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNodesByIdRestartResponse, PostNodesByIdRestartError, ThrowOnError>({
        url: '/nodes/{id}/restart',
        ...options
    });
};

/**
 * Start a node
 * Start a node by ID
 */
export const postNodesByIdStart = <ThrowOnError extends boolean = false>(options: Options<PostNodesByIdStartData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNodesByIdStartResponse, PostNodesByIdStartError, ThrowOnError>({
        url: '/nodes/{id}/start',
        ...options
    });
};

/**
 * Stop a node
 * Stop a node by ID
 */
export const postNodesByIdStop = <ThrowOnError extends boolean = false>(options: Options<PostNodesByIdStopData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNodesByIdStopResponse, PostNodesByIdStopError, ThrowOnError>({
        url: '/nodes/{id}/stop',
        ...options
    });
};

/**
 * List notification providers
 * Get a list of all notification providers
 */
export const getNotificationsProviders = <ThrowOnError extends boolean = false>(options?: Options<GetNotificationsProvidersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNotificationsProvidersResponse, GetNotificationsProvidersError, ThrowOnError>({
        url: '/notifications/providers',
        ...options
    });
};

/**
 * Create a notification provider
 * Create a new notification provider with the specified configuration
 */
export const postNotificationsProviders = <ThrowOnError extends boolean = false>(options: Options<PostNotificationsProvidersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNotificationsProvidersResponse, PostNotificationsProvidersError, ThrowOnError>({
        url: '/notifications/providers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a notification provider
 * Delete a notification provider
 */
export const deleteNotificationsProvidersById = <ThrowOnError extends boolean = false>(options: Options<DeleteNotificationsProvidersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteNotificationsProvidersByIdError, ThrowOnError>({
        url: '/notifications/providers/{id}',
        ...options
    });
};

/**
 * Get a notification provider
 * Get detailed information about a specific notification provider
 */
export const getNotificationsProvidersById = <ThrowOnError extends boolean = false>(options: Options<GetNotificationsProvidersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNotificationsProvidersByIdResponse, GetNotificationsProvidersByIdError, ThrowOnError>({
        url: '/notifications/providers/{id}',
        ...options
    });
};

/**
 * Update a notification provider
 * Update an existing notification provider with new configuration
 */
export const putNotificationsProvidersById = <ThrowOnError extends boolean = false>(options: Options<PutNotificationsProvidersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutNotificationsProvidersByIdResponse, PutNotificationsProvidersByIdError, ThrowOnError>({
        url: '/notifications/providers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Test a notification provider
 * Test a notification provider
 */
export const postNotificationsProvidersByIdTest = <ThrowOnError extends boolean = false>(options: Options<PostNotificationsProvidersByIdTestData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNotificationsProvidersByIdTestResponse, PostNotificationsProvidersByIdTestError, ThrowOnError>({
        url: '/notifications/providers/{id}/test',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all Fabric organizations
 * Get a list of all Fabric organizations
 */
export const getOrganizations = <ThrowOnError extends boolean = false>(options?: Options<GetOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrganizationsResponse, GetOrganizationsError, ThrowOnError>({
        url: '/organizations',
        ...options
    });
};

/**
 * Create a new Fabric organization
 * Create a new Fabric organization with the specified configuration
 */
export const postOrganizations = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationsResponse, PostOrganizationsError, ThrowOnError>({
        url: '/organizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a Fabric organization by MSP ID
 * Get a Fabric organization by MSP ID
 */
export const getOrganizationsByMspidByMspid = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByMspidByMspidData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrganizationsByMspidByMspidResponse, GetOrganizationsByMspidByMspidError, ThrowOnError>({
        url: '/organizations/by-mspid/{mspid}',
        ...options
    });
};

/**
 * Delete a Fabric organization
 * Delete a Fabric organization by ID
 */
export const deleteOrganizationsById = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteOrganizationsByIdError, ThrowOnError>({
        url: '/organizations/{id}',
        ...options
    });
};

/**
 * Get a Fabric organization
 * Get a Fabric organization by ID
 */
export const getOrganizationsById = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrganizationsByIdResponse, GetOrganizationsByIdError, ThrowOnError>({
        url: '/organizations/{id}',
        ...options
    });
};

/**
 * Update a Fabric organization
 * Update an existing Fabric organization
 */
export const putOrganizationsById = <ThrowOnError extends boolean = false>(options: Options<PutOrganizationsByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutOrganizationsByIdResponse, PutOrganizationsByIdError, ThrowOnError>({
        url: '/organizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get organization's CRL
 * Get the current Certificate Revocation List for the organization
 */
export const getOrganizationsByIdCrl = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByIdCrlData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrganizationsByIdCrlResponse, GetOrganizationsByIdCrlError, ThrowOnError>({
        url: '/organizations/{id}/crl',
        ...options
    });
};

/**
 * Revoke a certificate using PEM data
 * Add a certificate to the organization's CRL using its PEM encoded data
 */
export const postOrganizationsByIdCrlRevokePem = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationsByIdCrlRevokePemData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationsByIdCrlRevokePemResponse, PostOrganizationsByIdCrlRevokePemError, ThrowOnError>({
        url: '/organizations/{id}/crl/revoke/pem',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a revoked certificate using its serial number
 * Remove a certificate from the organization's CRL using its serial number
 */
export const deleteOrganizationsByIdCrlRevokeSerial = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationsByIdCrlRevokeSerialData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteOrganizationsByIdCrlRevokeSerialResponse, DeleteOrganizationsByIdCrlRevokeSerialError, ThrowOnError>({
        url: '/organizations/{id}/crl/revoke/serial',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Revoke a certificate using its serial number
 * Add a certificate to the organization's CRL using its serial number
 */
export const postOrganizationsByIdCrlRevokeSerial = <ThrowOnError extends boolean = false>(options: Options<PostOrganizationsByIdCrlRevokeSerialData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostOrganizationsByIdCrlRevokeSerialResponse, PostOrganizationsByIdCrlRevokeSerialError, ThrowOnError>({
        url: '/organizations/{id}/crl/revoke/serial',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get organization's revoked certificates
 * Get all revoked certificates for the organization
 */
export const getOrganizationsByIdRevokedCertificates = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationsByIdRevokedCertificatesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrganizationsByIdRevokedCertificatesResponse, GetOrganizationsByIdRevokedCertificatesError, ThrowOnError>({
        url: '/organizations/{id}/revoked-certificates',
        ...options
    });
};

/**
 * List all plugins
 * Get a list of all available plugins
 */
export const getPlugins = <ThrowOnError extends boolean = false>(options?: Options<GetPluginsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPluginsResponse, GetPluginsError, ThrowOnError>({
        url: '/plugins',
        ...options
    });
};

/**
 * Create a plugin
 * Create a new plugin
 */
export const postPlugins = <ThrowOnError extends boolean = false>(options: Options<PostPluginsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPluginsResponse, PostPluginsError, ThrowOnError>({
        url: '/plugins',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List available plugins from GitHub sources
 * Get a list of all available plugins from configured GitHub repositories
 */
export const getPluginsAvailable = <ThrowOnError extends boolean = false>(options?: Options<GetPluginsAvailableData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPluginsAvailableResponse, GetPluginsAvailableError, ThrowOnError>({
        url: '/plugins/available',
        ...options
    });
};

/**
 * Refresh available plugins
 * Triggers a refresh of the available plugins cache from GitHub sources
 */
export const postPluginsAvailableRefresh = <ThrowOnError extends boolean = false>(options?: Options<PostPluginsAvailableRefreshData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPluginsAvailableRefreshResponse, PostPluginsAvailableRefreshError, ThrowOnError>({
        url: '/plugins/available/refresh',
        ...options
    });
};

/**
 * Delete a plugin
 * Delete an existing plugin
 */
export const deletePluginsByName = <ThrowOnError extends boolean = false>(options: Options<DeletePluginsByNameData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeletePluginsByNameError, ThrowOnError>({
        url: '/plugins/{name}',
        ...options
    });
};

/**
 * Get a plugin
 * Get a specific plugin by name
 */
export const getPluginsByName = <ThrowOnError extends boolean = false>(options: Options<GetPluginsByNameData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPluginsByNameResponse, GetPluginsByNameError, ThrowOnError>({
        url: '/plugins/{name}',
        ...options
    });
};

/**
 * Update a plugin
 * Update an existing plugin
 */
export const putPluginsByName = <ThrowOnError extends boolean = false>(options: Options<PutPluginsByNameData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutPluginsByNameResponse, PutPluginsByNameError, ThrowOnError>({
        url: '/plugins/{name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deploy a plugin
 * Deploy a plugin with the given parameters
 */
export const postPluginsByNameDeploy = <ThrowOnError extends boolean = false>(options: Options<PostPluginsByNameDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostPluginsByNameDeployError, ThrowOnError>({
        url: '/plugins/{name}/deploy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get detailed deployment status
 * Get detailed information about a plugin deployment including service status, logs, and metrics
 */
export const getPluginsByNameDeploymentStatus = <ThrowOnError extends boolean = false>(options: Options<GetPluginsByNameDeploymentStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPluginsByNameDeploymentStatusResponse, GetPluginsByNameDeploymentStatusError, ThrowOnError>({
        url: '/plugins/{name}/deployment-status',
        ...options
    });
};

/**
 * Resume a plugin deployment
 * Resume a previously deployed plugin
 */
export const postPluginsByNameResume = <ThrowOnError extends boolean = false>(options: Options<PostPluginsByNameResumeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPluginsByNameResumeResponse, PostPluginsByNameResumeError, ThrowOnError>({
        url: '/plugins/{name}/resume',
        ...options
    });
};

/**
 * Get Docker Compose services
 * Get all services defined in the plugin's docker-compose configuration
 */
export const getPluginsByNameServices = <ThrowOnError extends boolean = false>(options: Options<GetPluginsByNameServicesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPluginsByNameServicesResponse, GetPluginsByNameServicesError, ThrowOnError>({
        url: '/plugins/{name}/services',
        ...options
    });
};

/**
 * Get plugin deployment status
 * Get the current status of a plugin deployment
 */
export const getPluginsByNameStatus = <ThrowOnError extends boolean = false>(options: Options<GetPluginsByNameStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPluginsByNameStatusResponse, GetPluginsByNameStatusError, ThrowOnError>({
        url: '/plugins/{name}/status',
        ...options
    });
};

/**
 * Stop a plugin deployment
 * Stop a running plugin deployment
 */
export const postPluginsByNameStop = <ThrowOnError extends boolean = false>(options: Options<PostPluginsByNameStopData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, PostPluginsByNameStopError, ThrowOnError>({
        url: '/plugins/{name}/stop',
        ...options
    });
};

/**
 * Create a directory
 * Create a new directory in a project
 */
export const postProjectsByProjectIdDirsCreate = <ThrowOnError extends boolean = false>(options: Options<PostProjectsByProjectIdDirsCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostProjectsByProjectIdDirsCreateResponse, PostProjectsByProjectIdDirsCreateError, ThrowOnError>({
        url: '/projects/{projectId}/dirs/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a directory
 * Delete a directory in a project
 */
export const deleteProjectsByProjectIdDirsDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectsByProjectIdDirsDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteProjectsByProjectIdDirsDeleteResponse, DeleteProjectsByProjectIdDirsDeleteError, ThrowOnError>({
        url: '/projects/{projectId}/dirs/delete',
        ...options
    });
};

/**
 * List files and directories
 * List files and directories in a given project and directory. Large directories (e.g., node_modules) are summarized/skipped.
 */
export const getProjectsByProjectIdDirsList = <ThrowOnError extends boolean = false>(options: Options<GetProjectsByProjectIdDirsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProjectsByProjectIdDirsListResponse, GetProjectsByProjectIdDirsListError, ThrowOnError>({
        url: '/projects/{projectId}/dirs/list',
        ...options
    });
};

/**
 * Delete a file
 * Delete a file in a project
 */
export const deleteProjectsByProjectIdFilesDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectsByProjectIdFilesDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteProjectsByProjectIdFilesDeleteResponse, DeleteProjectsByProjectIdFilesDeleteError, ThrowOnError>({
        url: '/projects/{projectId}/files/delete',
        ...options
    });
};

/**
 * List full project directory tree
 * List the full directory tree for a project, excluding large/ignored folders (e.g., node_modules, .git)
 */
export const getProjectsByProjectIdFilesEntries = <ThrowOnError extends boolean = false>(options: Options<GetProjectsByProjectIdFilesEntriesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProjectsByProjectIdFilesEntriesResponse, GetProjectsByProjectIdFilesEntriesError, ThrowOnError>({
        url: '/projects/{projectId}/files/entries',
        ...options
    });
};

/**
 * List files
 * List files in a given project and directory
 */
export const getProjectsByProjectIdFilesList = <ThrowOnError extends boolean = false>(options: Options<GetProjectsByProjectIdFilesListData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProjectsByProjectIdFilesListResponse, GetProjectsByProjectIdFilesListError, ThrowOnError>({
        url: '/projects/{projectId}/files/list',
        ...options
    });
};

/**
 * Read file contents
 * Get the contents of a file in a project
 */
export const getProjectsByProjectIdFilesRead = <ThrowOnError extends boolean = false>(options: Options<GetProjectsByProjectIdFilesReadData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProjectsByProjectIdFilesReadResponse, GetProjectsByProjectIdFilesReadError, ThrowOnError>({
        url: '/projects/{projectId}/files/read',
        ...options
    });
};

/**
 * Write file contents
 * Write or modify the contents of a file in a project
 */
export const postProjectsByProjectIdFilesWrite = <ThrowOnError extends boolean = false>(options: Options<PostProjectsByProjectIdFilesWriteData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostProjectsByProjectIdFilesWriteResponse, PostProjectsByProjectIdFilesWriteError, ThrowOnError>({
        url: '/projects/{projectId}/files/write',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deploy Besu smart contract
 * Deploy a smart contract to a Besu (EVM) network
 */
export const postScBesuDeploy = <ThrowOnError extends boolean = false>(options: Options<PostScBesuDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostScBesuDeployResponse, PostScBesuDeployError, ThrowOnError>({
        url: '/sc/besu/deploy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List deployed Fabric chaincodes
 * List all Fabric chaincodes deployed via Docker
 */
export const getScFabricChaincodes = <ThrowOnError extends boolean = false>(options?: Options<GetScFabricChaincodesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetScFabricChaincodesResponse, GetScFabricChaincodesError, ThrowOnError>({
        url: '/sc/fabric/chaincodes',
        ...options
    });
};

/**
 * Create a chaincode
 * Create a new chaincode
 */
export const postScFabricChaincodes = <ThrowOnError extends boolean = false>(options: Options<PostScFabricChaincodesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostScFabricChaincodesResponse, PostScFabricChaincodesError, ThrowOnError>({
        url: '/sc/fabric/chaincodes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List chaincode definitions for a chaincode
 * List all definitions for a given chaincode
 */
export const getScFabricChaincodesByChaincodeIdDefinitions = <ThrowOnError extends boolean = false>(options: Options<GetScFabricChaincodesByChaincodeIdDefinitionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetScFabricChaincodesByChaincodeIdDefinitionsResponse, GetScFabricChaincodesByChaincodeIdDefinitionsError, ThrowOnError>({
        url: '/sc/fabric/chaincodes/{chaincodeId}/definitions',
        ...options
    });
};

/**
 * Create a chaincode definition
 * Create a new chaincode definition for a chaincode
 */
export const postScFabricChaincodesByChaincodeIdDefinitions = <ThrowOnError extends boolean = false>(options: Options<PostScFabricChaincodesByChaincodeIdDefinitionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostScFabricChaincodesByChaincodeIdDefinitionsResponse, PostScFabricChaincodesByChaincodeIdDefinitionsError, ThrowOnError>({
        url: '/sc/fabric/chaincodes/{chaincodeId}/definitions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Fabric chaincode details by ID
 * Get a specific Fabric chaincode and its Docker/runtime info by ID
 */
export const getScFabricChaincodesById = <ThrowOnError extends boolean = false>(options: Options<GetScFabricChaincodesByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetScFabricChaincodesByIdResponse, GetScFabricChaincodesByIdError, ThrowOnError>({
        url: '/sc/fabric/chaincodes/{id}',
        ...options
    });
};

/**
 * Delete a chaincode definition
 * Delete a chaincode definition by ID
 */
export const deleteScFabricDefinitionsByDefinitionId = <ThrowOnError extends boolean = false>(options: Options<DeleteScFabricDefinitionsByDefinitionIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteScFabricDefinitionsByDefinitionIdResponse, DeleteScFabricDefinitionsByDefinitionIdError, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}',
        ...options
    });
};

/**
 * Update a chaincode definition
 * Update an existing chaincode definition by ID
 */
export const putScFabricDefinitionsByDefinitionId = <ThrowOnError extends boolean = false>(options: Options<PutScFabricDefinitionsByDefinitionIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutScFabricDefinitionsByDefinitionIdResponse, PutScFabricDefinitionsByDefinitionIdError, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Approve chaincode based on chaincode definition
 * Approve chaincode for a given definition
 */
export const postScFabricDefinitionsByDefinitionIdApprove = <ThrowOnError extends boolean = false>(options: Options<PostScFabricDefinitionsByDefinitionIdApproveData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostScFabricDefinitionsByDefinitionIdApproveResponse, PostScFabricDefinitionsByDefinitionIdApproveError, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}/approve',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Commit chaincode based on chaincode definition
 * Commit chaincode for a given definition
 */
export const postScFabricDefinitionsByDefinitionIdCommit = <ThrowOnError extends boolean = false>(options: Options<PostScFabricDefinitionsByDefinitionIdCommitData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostScFabricDefinitionsByDefinitionIdCommitResponse, PostScFabricDefinitionsByDefinitionIdCommitError, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}/commit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deploy chaincode based on chaincode definition (Docker)
 * Deploy chaincode for a given definition using Docker image
 */
export const postScFabricDefinitionsByDefinitionIdDeploy = <ThrowOnError extends boolean = false>(options: Options<PostScFabricDefinitionsByDefinitionIdDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostScFabricDefinitionsByDefinitionIdDeployResponse, PostScFabricDefinitionsByDefinitionIdDeployError, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}/deploy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Install chaincode based on chaincode definition
 * Install chaincode on peers for a given definition
 */
export const postScFabricDefinitionsByDefinitionIdInstall = <ThrowOnError extends boolean = false>(options: Options<PostScFabricDefinitionsByDefinitionIdInstallData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostScFabricDefinitionsByDefinitionIdInstallResponse, PostScFabricDefinitionsByDefinitionIdInstallError, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}/install',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get timeline of events for a chaincode definition
 * Get the timeline of install/approve/commit/deploy events for a chaincode definition
 */
export const getScFabricDefinitionsByDefinitionIdTimeline = <ThrowOnError extends boolean = false>(options: Options<GetScFabricDefinitionsByDefinitionIdTimelineData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetScFabricDefinitionsByDefinitionIdTimelineResponse, GetScFabricDefinitionsByDefinitionIdTimelineError, ThrowOnError>({
        url: '/sc/fabric/definitions/{definitionId}/timeline',
        ...options
    });
};

/**
 * Deploy Fabric chaincode
 * Deploy a chaincode to a Fabric network (install, approve, commit)
 */
export const postScFabricDeploy = <ThrowOnError extends boolean = false>(options: Options<PostScFabricDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostScFabricDeployResponse, PostScFabricDeployError, ThrowOnError>({
        url: '/sc/fabric/deploy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deploy Fabric chaincode with Docker image
 * Deploy a chaincode to a Fabric network using a Docker image, package ID, and port mapping. If host_port is empty, a free port is chosen. If container_port is empty, defaults to 7052.
 */
export const postScFabricDockerDeploy = <ThrowOnError extends boolean = false>(options: Options<PostScFabricDockerDeployData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostScFabricDockerDeployResponse, PostScFabricDockerDeployError, ThrowOnError>({
        url: '/sc/fabric/docker-deploy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Approve Fabric chaincode
 * Approve a chaincode definition for an organization
 */
export const postScFabricPeerByPeerIdChaincodeApprove = <ThrowOnError extends boolean = false>(options: Options<PostScFabricPeerByPeerIdChaincodeApproveData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostScFabricPeerByPeerIdChaincodeApproveResponse, PostScFabricPeerByPeerIdChaincodeApproveError, ThrowOnError>({
        url: '/sc/fabric/peer/{peerId}/chaincode/approve',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Commit Fabric chaincode
 * Commit a chaincode definition to the channel
 */
export const postScFabricPeerByPeerIdChaincodeCommit = <ThrowOnError extends boolean = false>(options: Options<PostScFabricPeerByPeerIdChaincodeCommitData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostScFabricPeerByPeerIdChaincodeCommitResponse, PostScFabricPeerByPeerIdChaincodeCommitError, ThrowOnError>({
        url: '/sc/fabric/peer/{peerId}/chaincode/commit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Install Fabric chaincode
 * Install a chaincode package on a Fabric peer
 */
export const postScFabricPeerByPeerIdChaincodeInstall = <ThrowOnError extends boolean = false>(options: Options<PostScFabricPeerByPeerIdChaincodeInstallData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostScFabricPeerByPeerIdChaincodeInstallResponse, PostScFabricPeerByPeerIdChaincodeInstallError, ThrowOnError>({
        url: '/sc/fabric/peer/{peerId}/chaincode/install',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the default setting
 * Get the default setting's details
 */
export const getSettings = <ThrowOnError extends boolean = false>(options?: Options<GetSettingsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSettingsResponse, unknown, ThrowOnError>({
        url: '/settings',
        ...options
    });
};

/**
 * Create or update the default setting
 * Create or update the default setting with the provided configuration
 */
export const postSettings = <ThrowOnError extends boolean = false>(options: Options<PostSettingsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSettingsResponse, unknown, ThrowOnError>({
        url: '/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List users
 * Returns a list of all users (admin only)
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUsersResponse, GetUsersError, ThrowOnError>({
        url: '/users',
        ...options
    });
};

/**
 * Create new user
 * Creates a new user with specified role (admin only)
 */
export const postUsers = <ThrowOnError extends boolean = false>(options: Options<PostUsersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostUsersResponse, PostUsersError, ThrowOnError>({
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete user
 * Deletes a user (admin only)
 */
export const deleteUsersById = <ThrowOnError extends boolean = false>(options: Options<DeleteUsersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, DeleteUsersByIdError, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Get user by ID
 * Get a user's details by ID (admin only)
 */
export const getUsersById = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUsersByIdResponse, GetUsersByIdError, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

/**
 * Update user
 * Updates an existing user (admin only)
 */
export const putUsersById = <ThrowOnError extends boolean = false>(options: Options<PutUsersByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutUsersByIdResponse, PutUsersByIdError, ThrowOnError>({
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update user password
 * Update a user's password (admin only)
 */
export const putUsersByIdPassword = <ThrowOnError extends boolean = false>(options: Options<PutUsersByIdPasswordData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutUsersByIdPasswordResponse, PutUsersByIdPasswordError, ThrowOnError>({
        url: '/users/{id}/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update user role
 * Update a user's role (admin only)
 */
export const putUsersByIdRole = <ThrowOnError extends boolean = false>(options: Options<PutUsersByIdRoleData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutUsersByIdRoleResponse, PutUsersByIdRoleError, ThrowOnError>({
        url: '/users/{id}/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};