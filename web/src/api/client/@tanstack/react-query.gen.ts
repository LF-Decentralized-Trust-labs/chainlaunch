// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData, type DefaultError } from '@tanstack/react-query';
import type { GetAiBoilerplatesData, PostAiGenerateData, PostAiGenerateError, PostAiGenerateResponse, GetAiModelsData, PostAiByProjectIdChatData, PostAiByProjectIdChatError, PostAiByProjectIdChatResponse, GetAiByProjectIdConversationsData, GetAiByProjectIdConversationsByConversationIdData, GetAiByProjectIdConversationsByConversationIdExportData, GetAuditLogsData, GetAuditLogsError, GetAuditLogsResponse, GetAuditLogsByIdData, PostAuthChangePasswordData, PostAuthChangePasswordError, PostAuthChangePasswordResponse, PostAuthLoginData, PostAuthLoginError, PostAuthLoginResponse, PostAuthLogoutData, PostAuthLogoutError, PostAuthLogoutResponse, GetAuthMeData, GetBackupsData, PostBackupsData, PostBackupsError, PostBackupsResponse, GetBackupsSchedulesData, PostBackupsSchedulesData, PostBackupsSchedulesError, PostBackupsSchedulesResponse, DeleteBackupsSchedulesByIdData, DeleteBackupsSchedulesByIdError, GetBackupsSchedulesByIdData, PutBackupsSchedulesByIdData, PutBackupsSchedulesByIdError, PutBackupsSchedulesByIdResponse, PutBackupsSchedulesByIdDisableData, PutBackupsSchedulesByIdDisableError, PutBackupsSchedulesByIdDisableResponse, PutBackupsSchedulesByIdEnableData, PutBackupsSchedulesByIdEnableError, PutBackupsSchedulesByIdEnableResponse, GetBackupsTargetsData, PostBackupsTargetsData, PostBackupsTargetsError, PostBackupsTargetsResponse, DeleteBackupsTargetsByIdData, DeleteBackupsTargetsByIdError, GetBackupsTargetsByIdData, PutBackupsTargetsByIdData, PutBackupsTargetsByIdError, PutBackupsTargetsByIdResponse, DeleteBackupsByIdData, DeleteBackupsByIdError, GetBackupsByIdData, GetChaincodeProjectsData, PostChaincodeProjectsData, PostChaincodeProjectsError, PostChaincodeProjectsResponse, GetChaincodeProjectsByIdData, GetChaincodeProjectsByIdCommitsData, GetChaincodeProjectsByIdCommitsError, GetChaincodeProjectsByIdCommitsResponse, GetChaincodeProjectsByIdCommitsByCommitHashData, GetChaincodeProjectsByIdDiffData, PutChaincodeProjectsByIdEndorsementPolicyData, PutChaincodeProjectsByIdEndorsementPolicyError, PutChaincodeProjectsByIdEndorsementPolicyResponse, GetChaincodeProjectsByIdFileAtCommitData, PostChaincodeProjectsByIdInvokeData, PostChaincodeProjectsByIdInvokeError, PostChaincodeProjectsByIdInvokeResponse, GetChaincodeProjectsByIdLogsData, GetChaincodeProjectsByIdLogsStreamData, PostChaincodeProjectsByIdQueryData, PostChaincodeProjectsByIdQueryError, PostChaincodeProjectsByIdQueryResponse, PostChaincodeProjectsByIdStartData, PostChaincodeProjectsByIdStartError, PostChaincodeProjectsByIdStartResponse, PostChaincodeProjectsByIdStopData, PostChaincodeProjectsByIdStopError, PostChaincodeProjectsByIdStopResponse, PostDummyData, PostDummyResponse, GetKeyProvidersData, PostKeyProvidersData, PostKeyProvidersError, PostKeyProvidersResponse, DeleteKeyProvidersByIdData, DeleteKeyProvidersByIdError, GetKeyProvidersByIdData, GetKeysData, GetKeysError, GetKeysResponse, PostKeysData, PostKeysError, PostKeysResponse, GetKeysAllData, GetKeysFilterData, GetKeysFilterError, GetKeysFilterResponse, DeleteKeysByIdData, DeleteKeysByIdError, GetKeysByIdData, PostKeysByKeyIdSignData, PostKeysByKeyIdSignError, PostKeysByKeyIdSignResponse, PostMetricsDeployData, PostMetricsDeployError, PostMetricsDeployResponse, GetMetricsNodeByIdData, GetMetricsNodeByIdLabelByLabelValuesData, PostMetricsNodeByIdQueryData, PostMetricsNodeByIdQueryError, PostMetricsNodeByIdQueryResponse, GetMetricsNodeByIdRangeData, GetMetricsNodeByIdRangeError, GetMetricsNodeByIdRangeResponse, PostMetricsReloadData, PostMetricsReloadError, PostMetricsReloadResponse, GetMetricsStatusData, PostMetricsUndeployData, PostMetricsUndeployError, PostMetricsUndeployResponse, GetNetworksBesuData, GetNetworksBesuError, GetNetworksBesuResponse, PostNetworksBesuData, PostNetworksBesuError, PostNetworksBesuResponse, PostNetworksBesuImportData, PostNetworksBesuImportError, PostNetworksBesuImportResponse, DeleteNetworksBesuByIdData, DeleteNetworksBesuByIdError, GetNetworksBesuByIdData, GetNetworksFabricData, GetNetworksFabricError, GetNetworksFabricResponse, PostNetworksFabricData, PostNetworksFabricError, PostNetworksFabricResponse, GetNetworksFabricByNameByNameData, PostNetworksFabricImportData, PostNetworksFabricImportError, PostNetworksFabricImportResponse, PostNetworksFabricImportWithOrgData, PostNetworksFabricImportWithOrgError, PostNetworksFabricImportWithOrgResponse, DeleteNetworksFabricByIdData, DeleteNetworksFabricByIdError, GetNetworksFabricByIdData, PostNetworksFabricByIdAnchorPeersData, PostNetworksFabricByIdAnchorPeersError, PostNetworksFabricByIdAnchorPeersResponse, GetNetworksFabricByIdBlocksData, GetNetworksFabricByIdBlocksError, GetNetworksFabricByIdBlocksResponse, GetNetworksFabricByIdBlocksByBlockNumData, GetNetworksFabricByIdChannelConfigData, GetNetworksFabricByIdCurrentChannelConfigData, GetNetworksFabricByIdInfoData, GetNetworksFabricByIdNodesData, PostNetworksFabricByIdNodesData, PostNetworksFabricByIdNodesError, PostNetworksFabricByIdNodesResponse, DeleteNetworksFabricByIdOrderersByOrdererIdData, DeleteNetworksFabricByIdOrderersByOrdererIdError, DeleteNetworksFabricByIdOrderersByOrdererIdResponse, PostNetworksFabricByIdOrderersByOrdererIdJoinData, PostNetworksFabricByIdOrderersByOrdererIdJoinError, PostNetworksFabricByIdOrderersByOrdererIdJoinResponse, PostNetworksFabricByIdOrderersByOrdererIdUnjoinData, PostNetworksFabricByIdOrderersByOrdererIdUnjoinError, PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponse, PostNetworksFabricByIdOrganizationCrlData, PostNetworksFabricByIdOrganizationCrlError, PostNetworksFabricByIdOrganizationCrlResponse, GetNetworksFabricByIdOrganizationsByOrgIdConfigData, DeleteNetworksFabricByIdPeersByPeerIdData, DeleteNetworksFabricByIdPeersByPeerIdError, DeleteNetworksFabricByIdPeersByPeerIdResponse, PostNetworksFabricByIdPeersByPeerIdJoinData, PostNetworksFabricByIdPeersByPeerIdJoinError, PostNetworksFabricByIdPeersByPeerIdJoinResponse, PostNetworksFabricByIdPeersByPeerIdUnjoinData, PostNetworksFabricByIdPeersByPeerIdUnjoinError, PostNetworksFabricByIdPeersByPeerIdUnjoinResponse, PostNetworksFabricByIdReloadBlockData, PostNetworksFabricByIdReloadBlockError, PostNetworksFabricByIdReloadBlockResponse, GetNetworksFabricByIdTransactionsByTxIdData, PostNetworksFabricByIdUpdateConfigData, PostNetworksFabricByIdUpdateConfigError, PostNetworksFabricByIdUpdateConfigResponse, GetNodesData, GetNodesError, GetNodesResponse, PostNodesData, PostNodesError, PostNodesResponse, GetNodesDefaultsBesuNodeData, GetNodesDefaultsFabricData, GetNodesDefaultsFabricOrdererData, GetNodesDefaultsFabricPeerData, GetNodesPlatformByPlatformData, GetNodesPlatformByPlatformError, GetNodesPlatformByPlatformResponse, DeleteNodesByIdData, DeleteNodesByIdError, GetNodesByIdData, PutNodesByIdData, PutNodesByIdError, PutNodesByIdResponse, PostNodesByIdCertificatesRenewData, PostNodesByIdCertificatesRenewError, PostNodesByIdCertificatesRenewResponse, GetNodesByIdChannelsData, GetNodesByIdChannelsByChannelIdChaincodesData, GetNodesByIdEventsData, GetNodesByIdEventsError, GetNodesByIdEventsResponse, GetNodesByIdLogsData, PostNodesByIdRestartData, PostNodesByIdRestartError, PostNodesByIdRestartResponse, PostNodesByIdStartData, PostNodesByIdStartError, PostNodesByIdStartResponse, PostNodesByIdStopData, PostNodesByIdStopError, PostNodesByIdStopResponse, GetNotificationsProvidersData, PostNotificationsProvidersData, PostNotificationsProvidersError, PostNotificationsProvidersResponse, DeleteNotificationsProvidersByIdData, DeleteNotificationsProvidersByIdError, GetNotificationsProvidersByIdData, PutNotificationsProvidersByIdData, PutNotificationsProvidersByIdError, PutNotificationsProvidersByIdResponse, PostNotificationsProvidersByIdTestData, PostNotificationsProvidersByIdTestError, PostNotificationsProvidersByIdTestResponse, GetOrganizationsData, GetOrganizationsError, GetOrganizationsResponse, PostOrganizationsData, PostOrganizationsError, PostOrganizationsResponse, GetOrganizationsByMspidByMspidData, DeleteOrganizationsByIdData, DeleteOrganizationsByIdError, GetOrganizationsByIdData, PutOrganizationsByIdData, PutOrganizationsByIdError, PutOrganizationsByIdResponse, GetOrganizationsByIdCrlData, PostOrganizationsByIdCrlRevokePemData, PostOrganizationsByIdCrlRevokePemError, PostOrganizationsByIdCrlRevokePemResponse, DeleteOrganizationsByIdCrlRevokeSerialData, DeleteOrganizationsByIdCrlRevokeSerialError, DeleteOrganizationsByIdCrlRevokeSerialResponse, PostOrganizationsByIdCrlRevokeSerialData, PostOrganizationsByIdCrlRevokeSerialError, PostOrganizationsByIdCrlRevokeSerialResponse, GetOrganizationsByIdRevokedCertificatesData, GetPluginsData, PostPluginsData, PostPluginsError, PostPluginsResponse, GetPluginsAvailableData, PostPluginsAvailableRefreshData, PostPluginsAvailableRefreshError, PostPluginsAvailableRefreshResponse, DeletePluginsByNameData, DeletePluginsByNameError, GetPluginsByNameData, PutPluginsByNameData, PutPluginsByNameError, PutPluginsByNameResponse, PostPluginsByNameDeployData, PostPluginsByNameDeployError, GetPluginsByNameDeploymentStatusData, PostPluginsByNameResumeData, PostPluginsByNameResumeError, PostPluginsByNameResumeResponse, GetPluginsByNameServicesData, GetPluginsByNameStatusData, PostPluginsByNameStopData, PostPluginsByNameStopError, PostProjectsByProjectIdDirsCreateData, PostProjectsByProjectIdDirsCreateError, PostProjectsByProjectIdDirsCreateResponse, DeleteProjectsByProjectIdDirsDeleteData, DeleteProjectsByProjectIdDirsDeleteError, DeleteProjectsByProjectIdDirsDeleteResponse, GetProjectsByProjectIdDirsListData, DeleteProjectsByProjectIdFilesDeleteData, DeleteProjectsByProjectIdFilesDeleteError, DeleteProjectsByProjectIdFilesDeleteResponse, GetProjectsByProjectIdFilesEntriesData, GetProjectsByProjectIdFilesListData, GetProjectsByProjectIdFilesReadData, PostProjectsByProjectIdFilesWriteData, PostProjectsByProjectIdFilesWriteError, PostProjectsByProjectIdFilesWriteResponse, PostScBesuDeployData, PostScBesuDeployError, PostScBesuDeployResponse, GetScFabricChaincodesData, PostScFabricChaincodesData, PostScFabricChaincodesError, PostScFabricChaincodesResponse, GetScFabricChaincodesByChaincodeIdDefinitionsData, PostScFabricChaincodesByChaincodeIdDefinitionsData, PostScFabricChaincodesByChaincodeIdDefinitionsError, PostScFabricChaincodesByChaincodeIdDefinitionsResponse, GetScFabricChaincodesByIdData, DeleteScFabricDefinitionsByDefinitionIdData, DeleteScFabricDefinitionsByDefinitionIdError, DeleteScFabricDefinitionsByDefinitionIdResponse, PutScFabricDefinitionsByDefinitionIdData, PutScFabricDefinitionsByDefinitionIdError, PutScFabricDefinitionsByDefinitionIdResponse, PostScFabricDefinitionsByDefinitionIdApproveData, PostScFabricDefinitionsByDefinitionIdApproveError, PostScFabricDefinitionsByDefinitionIdApproveResponse, PostScFabricDefinitionsByDefinitionIdCommitData, PostScFabricDefinitionsByDefinitionIdCommitError, PostScFabricDefinitionsByDefinitionIdCommitResponse, PostScFabricDefinitionsByDefinitionIdDeployData, PostScFabricDefinitionsByDefinitionIdDeployError, PostScFabricDefinitionsByDefinitionIdDeployResponse, PostScFabricDefinitionsByDefinitionIdInstallData, PostScFabricDefinitionsByDefinitionIdInstallError, PostScFabricDefinitionsByDefinitionIdInstallResponse, GetScFabricDefinitionsByDefinitionIdTimelineData, PostScFabricDeployData, PostScFabricDeployError, PostScFabricDeployResponse, PostScFabricDockerDeployData, PostScFabricDockerDeployError, PostScFabricDockerDeployResponse, PostScFabricPeerByPeerIdChaincodeApproveData, PostScFabricPeerByPeerIdChaincodeApproveError, PostScFabricPeerByPeerIdChaincodeApproveResponse, PostScFabricPeerByPeerIdChaincodeCommitData, PostScFabricPeerByPeerIdChaincodeCommitError, PostScFabricPeerByPeerIdChaincodeCommitResponse, PostScFabricPeerByPeerIdChaincodeInstallData, PostScFabricPeerByPeerIdChaincodeInstallError, PostScFabricPeerByPeerIdChaincodeInstallResponse, GetSettingsData, PostSettingsData, PostSettingsResponse, GetUsersData, PostUsersData, PostUsersError, PostUsersResponse, DeleteUsersByIdData, DeleteUsersByIdError, GetUsersByIdData, PutUsersByIdData, PutUsersByIdError, PutUsersByIdResponse, PutUsersByIdPasswordData, PutUsersByIdPasswordError, PutUsersByIdPasswordResponse, PutUsersByIdRoleData, PutUsersByIdRoleError, PutUsersByIdRoleResponse } from '../types.gen';
import { getAiBoilerplates, postAiGenerate, getAiModels, postAiByProjectIdChat, getAiByProjectIdConversations, getAiByProjectIdConversationsByConversationId, getAiByProjectIdConversationsByConversationIdExport, getAuditLogs, getAuditLogsById, postAuthChangePassword, postAuthLogin, postAuthLogout, getAuthMe, getBackups, postBackups, getBackupsSchedules, postBackupsSchedules, deleteBackupsSchedulesById, getBackupsSchedulesById, putBackupsSchedulesById, putBackupsSchedulesByIdDisable, putBackupsSchedulesByIdEnable, getBackupsTargets, postBackupsTargets, deleteBackupsTargetsById, getBackupsTargetsById, putBackupsTargetsById, deleteBackupsById, getBackupsById, getChaincodeProjects, postChaincodeProjects, getChaincodeProjectsById, getChaincodeProjectsByIdCommits, getChaincodeProjectsByIdCommitsByCommitHash, getChaincodeProjectsByIdDiff, putChaincodeProjectsByIdEndorsementPolicy, getChaincodeProjectsByIdFileAtCommit, postChaincodeProjectsByIdInvoke, getChaincodeProjectsByIdLogs, getChaincodeProjectsByIdLogsStream, postChaincodeProjectsByIdQuery, postChaincodeProjectsByIdStart, postChaincodeProjectsByIdStop, postDummy, getKeyProviders, postKeyProviders, deleteKeyProvidersById, getKeyProvidersById, getKeys, postKeys, getKeysAll, getKeysFilter, deleteKeysById, getKeysById, postKeysByKeyIdSign, postMetricsDeploy, getMetricsNodeById, getMetricsNodeByIdLabelByLabelValues, postMetricsNodeByIdQuery, getMetricsNodeByIdRange, postMetricsReload, getMetricsStatus, postMetricsUndeploy, getNetworksBesu, postNetworksBesu, postNetworksBesuImport, deleteNetworksBesuById, getNetworksBesuById, getNetworksFabric, postNetworksFabric, getNetworksFabricByNameByName, postNetworksFabricImport, postNetworksFabricImportWithOrg, deleteNetworksFabricById, getNetworksFabricById, postNetworksFabricByIdAnchorPeers, getNetworksFabricByIdBlocks, getNetworksFabricByIdBlocksByBlockNum, getNetworksFabricByIdChannelConfig, getNetworksFabricByIdCurrentChannelConfig, getNetworksFabricByIdInfo, getNetworksFabricByIdNodes, postNetworksFabricByIdNodes, deleteNetworksFabricByIdOrderersByOrdererId, postNetworksFabricByIdOrderersByOrdererIdJoin, postNetworksFabricByIdOrderersByOrdererIdUnjoin, postNetworksFabricByIdOrganizationCrl, getNetworksFabricByIdOrganizationsByOrgIdConfig, deleteNetworksFabricByIdPeersByPeerId, postNetworksFabricByIdPeersByPeerIdJoin, postNetworksFabricByIdPeersByPeerIdUnjoin, postNetworksFabricByIdReloadBlock, getNetworksFabricByIdTransactionsByTxId, postNetworksFabricByIdUpdateConfig, getNodes, postNodes, getNodesDefaultsBesuNode, getNodesDefaultsFabric, getNodesDefaultsFabricOrderer, getNodesDefaultsFabricPeer, getNodesPlatformByPlatform, deleteNodesById, getNodesById, putNodesById, postNodesByIdCertificatesRenew, getNodesByIdChannels, getNodesByIdChannelsByChannelIdChaincodes, getNodesByIdEvents, getNodesByIdLogs, postNodesByIdRestart, postNodesByIdStart, postNodesByIdStop, getNotificationsProviders, postNotificationsProviders, deleteNotificationsProvidersById, getNotificationsProvidersById, putNotificationsProvidersById, postNotificationsProvidersByIdTest, getOrganizations, postOrganizations, getOrganizationsByMspidByMspid, deleteOrganizationsById, getOrganizationsById, putOrganizationsById, getOrganizationsByIdCrl, postOrganizationsByIdCrlRevokePem, deleteOrganizationsByIdCrlRevokeSerial, postOrganizationsByIdCrlRevokeSerial, getOrganizationsByIdRevokedCertificates, getPlugins, postPlugins, getPluginsAvailable, postPluginsAvailableRefresh, deletePluginsByName, getPluginsByName, putPluginsByName, postPluginsByNameDeploy, getPluginsByNameDeploymentStatus, postPluginsByNameResume, getPluginsByNameServices, getPluginsByNameStatus, postPluginsByNameStop, postProjectsByProjectIdDirsCreate, deleteProjectsByProjectIdDirsDelete, getProjectsByProjectIdDirsList, deleteProjectsByProjectIdFilesDelete, getProjectsByProjectIdFilesEntries, getProjectsByProjectIdFilesList, getProjectsByProjectIdFilesRead, postProjectsByProjectIdFilesWrite, postScBesuDeploy, getScFabricChaincodes, postScFabricChaincodes, getScFabricChaincodesByChaincodeIdDefinitions, postScFabricChaincodesByChaincodeIdDefinitions, getScFabricChaincodesById, deleteScFabricDefinitionsByDefinitionId, putScFabricDefinitionsByDefinitionId, postScFabricDefinitionsByDefinitionIdApprove, postScFabricDefinitionsByDefinitionIdCommit, postScFabricDefinitionsByDefinitionIdDeploy, postScFabricDefinitionsByDefinitionIdInstall, getScFabricDefinitionsByDefinitionIdTimeline, postScFabricDeploy, postScFabricDockerDeploy, postScFabricPeerByPeerIdChaincodeApprove, postScFabricPeerByPeerIdChaincodeCommit, postScFabricPeerByPeerIdChaincodeInstall, getSettings, postSettings, getUsers, postUsers, deleteUsersById, getUsersById, putUsersById, putUsersByIdPassword, putUsersByIdRole, client } from '../sdk.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getAiBoilerplatesQueryKey = (options: Options<GetAiBoilerplatesData>) => [
    createQueryKey('getAiBoilerplates', options)
];

export const getAiBoilerplatesOptions = (options: Options<GetAiBoilerplatesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAiBoilerplates({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAiBoilerplatesQueryKey(options)
    });
};

export const postAiGenerateQueryKey = (options: Options<PostAiGenerateData>) => [
    createQueryKey('postAiGenerate', options)
];

export const postAiGenerateOptions = (options: Options<PostAiGenerateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAiGenerate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAiGenerateQueryKey(options)
    });
};

export const postAiGenerateMutation = (options?: Partial<Options<PostAiGenerateData>>) => {
    const mutationOptions: UseMutationOptions<PostAiGenerateResponse, PostAiGenerateError, Options<PostAiGenerateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAiGenerate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAiModelsQueryKey = (options?: Options<GetAiModelsData>) => [
    createQueryKey('getAiModels', options)
];

export const getAiModelsOptions = (options?: Options<GetAiModelsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAiModels({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAiModelsQueryKey(options)
    });
};

export const postAiByProjectIdChatQueryKey = (options: Options<PostAiByProjectIdChatData>) => [
    createQueryKey('postAiByProjectIdChat', options)
];

export const postAiByProjectIdChatOptions = (options: Options<PostAiByProjectIdChatData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAiByProjectIdChat({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAiByProjectIdChatQueryKey(options)
    });
};

export const postAiByProjectIdChatMutation = (options?: Partial<Options<PostAiByProjectIdChatData>>) => {
    const mutationOptions: UseMutationOptions<PostAiByProjectIdChatResponse, PostAiByProjectIdChatError, Options<PostAiByProjectIdChatData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAiByProjectIdChat({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAiByProjectIdConversationsQueryKey = (options: Options<GetAiByProjectIdConversationsData>) => [
    createQueryKey('getAiByProjectIdConversations', options)
];

export const getAiByProjectIdConversationsOptions = (options: Options<GetAiByProjectIdConversationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAiByProjectIdConversations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAiByProjectIdConversationsQueryKey(options)
    });
};

export const getAiByProjectIdConversationsByConversationIdQueryKey = (options: Options<GetAiByProjectIdConversationsByConversationIdData>) => [
    createQueryKey('getAiByProjectIdConversationsByConversationId', options)
];

export const getAiByProjectIdConversationsByConversationIdOptions = (options: Options<GetAiByProjectIdConversationsByConversationIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAiByProjectIdConversationsByConversationId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAiByProjectIdConversationsByConversationIdQueryKey(options)
    });
};

export const getAiByProjectIdConversationsByConversationIdExportQueryKey = (options: Options<GetAiByProjectIdConversationsByConversationIdExportData>) => [
    createQueryKey('getAiByProjectIdConversationsByConversationIdExport', options)
];

export const getAiByProjectIdConversationsByConversationIdExportOptions = (options: Options<GetAiByProjectIdConversationsByConversationIdExportData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAiByProjectIdConversationsByConversationIdExport({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAiByProjectIdConversationsByConversationIdExportQueryKey(options)
    });
};

export const getAuditLogsQueryKey = (options?: Options<GetAuditLogsData>) => [
    createQueryKey('getAuditLogs', options)
];

export const getAuditLogsOptions = (options?: Options<GetAuditLogsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAuditLogs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAuditLogsQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getAuditLogsInfiniteQueryKey = (options?: Options<GetAuditLogsData>): QueryKey<Options<GetAuditLogsData>> => [
    createQueryKey('getAuditLogs', options, true)
];

export const getAuditLogsInfiniteOptions = (options?: Options<GetAuditLogsData>) => {
    return infiniteQueryOptions<GetAuditLogsResponse, GetAuditLogsError, InfiniteData<GetAuditLogsResponse>, QueryKey<Options<GetAuditLogsData>>, number | Pick<QueryKey<Options<GetAuditLogsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetAuditLogsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAuditLogs({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAuditLogsInfiniteQueryKey(options)
    });
};

export const getAuditLogsByIdQueryKey = (options: Options<GetAuditLogsByIdData>) => [
    createQueryKey('getAuditLogsById', options)
];

export const getAuditLogsByIdOptions = (options: Options<GetAuditLogsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAuditLogsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAuditLogsByIdQueryKey(options)
    });
};

export const postAuthChangePasswordQueryKey = (options: Options<PostAuthChangePasswordData>) => [
    createQueryKey('postAuthChangePassword', options)
];

export const postAuthChangePasswordOptions = (options: Options<PostAuthChangePasswordData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuthChangePassword({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuthChangePasswordQueryKey(options)
    });
};

export const postAuthChangePasswordMutation = (options?: Partial<Options<PostAuthChangePasswordData>>) => {
    const mutationOptions: UseMutationOptions<PostAuthChangePasswordResponse, PostAuthChangePasswordError, Options<PostAuthChangePasswordData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuthChangePassword({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthLoginQueryKey = (options: Options<PostAuthLoginData>) => [
    createQueryKey('postAuthLogin', options)
];

export const postAuthLoginOptions = (options: Options<PostAuthLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuthLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuthLoginQueryKey(options)
    });
};

export const postAuthLoginMutation = (options?: Partial<Options<PostAuthLoginData>>) => {
    const mutationOptions: UseMutationOptions<PostAuthLoginResponse, PostAuthLoginError, Options<PostAuthLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuthLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAuthLogoutQueryKey = (options?: Options<PostAuthLogoutData>) => [
    createQueryKey('postAuthLogout', options)
];

export const postAuthLogoutOptions = (options?: Options<PostAuthLogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAuthLogout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAuthLogoutQueryKey(options)
    });
};

export const postAuthLogoutMutation = (options?: Partial<Options<PostAuthLogoutData>>) => {
    const mutationOptions: UseMutationOptions<PostAuthLogoutResponse, PostAuthLogoutError, Options<PostAuthLogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAuthLogout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAuthMeQueryKey = (options?: Options<GetAuthMeData>) => [
    createQueryKey('getAuthMe', options)
];

export const getAuthMeOptions = (options?: Options<GetAuthMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAuthMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAuthMeQueryKey(options)
    });
};

export const getBackupsQueryKey = (options?: Options<GetBackupsData>) => [
    createQueryKey('getBackups', options)
];

export const getBackupsOptions = (options?: Options<GetBackupsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBackups({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBackupsQueryKey(options)
    });
};

export const postBackupsQueryKey = (options: Options<PostBackupsData>) => [
    createQueryKey('postBackups', options)
];

export const postBackupsOptions = (options: Options<PostBackupsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postBackups({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postBackupsQueryKey(options)
    });
};

export const postBackupsMutation = (options?: Partial<Options<PostBackupsData>>) => {
    const mutationOptions: UseMutationOptions<PostBackupsResponse, PostBackupsError, Options<PostBackupsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postBackups({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBackupsSchedulesQueryKey = (options?: Options<GetBackupsSchedulesData>) => [
    createQueryKey('getBackupsSchedules', options)
];

export const getBackupsSchedulesOptions = (options?: Options<GetBackupsSchedulesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBackupsSchedules({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBackupsSchedulesQueryKey(options)
    });
};

export const postBackupsSchedulesQueryKey = (options: Options<PostBackupsSchedulesData>) => [
    createQueryKey('postBackupsSchedules', options)
];

export const postBackupsSchedulesOptions = (options: Options<PostBackupsSchedulesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postBackupsSchedules({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postBackupsSchedulesQueryKey(options)
    });
};

export const postBackupsSchedulesMutation = (options?: Partial<Options<PostBackupsSchedulesData>>) => {
    const mutationOptions: UseMutationOptions<PostBackupsSchedulesResponse, PostBackupsSchedulesError, Options<PostBackupsSchedulesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postBackupsSchedules({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteBackupsSchedulesByIdMutation = (options?: Partial<Options<DeleteBackupsSchedulesByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteBackupsSchedulesByIdError, Options<DeleteBackupsSchedulesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteBackupsSchedulesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBackupsSchedulesByIdQueryKey = (options: Options<GetBackupsSchedulesByIdData>) => [
    createQueryKey('getBackupsSchedulesById', options)
];

export const getBackupsSchedulesByIdOptions = (options: Options<GetBackupsSchedulesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBackupsSchedulesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBackupsSchedulesByIdQueryKey(options)
    });
};

export const putBackupsSchedulesByIdMutation = (options?: Partial<Options<PutBackupsSchedulesByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutBackupsSchedulesByIdResponse, PutBackupsSchedulesByIdError, Options<PutBackupsSchedulesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putBackupsSchedulesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putBackupsSchedulesByIdDisableMutation = (options?: Partial<Options<PutBackupsSchedulesByIdDisableData>>) => {
    const mutationOptions: UseMutationOptions<PutBackupsSchedulesByIdDisableResponse, PutBackupsSchedulesByIdDisableError, Options<PutBackupsSchedulesByIdDisableData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putBackupsSchedulesByIdDisable({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putBackupsSchedulesByIdEnableMutation = (options?: Partial<Options<PutBackupsSchedulesByIdEnableData>>) => {
    const mutationOptions: UseMutationOptions<PutBackupsSchedulesByIdEnableResponse, PutBackupsSchedulesByIdEnableError, Options<PutBackupsSchedulesByIdEnableData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putBackupsSchedulesByIdEnable({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBackupsTargetsQueryKey = (options?: Options<GetBackupsTargetsData>) => [
    createQueryKey('getBackupsTargets', options)
];

export const getBackupsTargetsOptions = (options?: Options<GetBackupsTargetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBackupsTargets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBackupsTargetsQueryKey(options)
    });
};

export const postBackupsTargetsQueryKey = (options: Options<PostBackupsTargetsData>) => [
    createQueryKey('postBackupsTargets', options)
];

export const postBackupsTargetsOptions = (options: Options<PostBackupsTargetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postBackupsTargets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postBackupsTargetsQueryKey(options)
    });
};

export const postBackupsTargetsMutation = (options?: Partial<Options<PostBackupsTargetsData>>) => {
    const mutationOptions: UseMutationOptions<PostBackupsTargetsResponse, PostBackupsTargetsError, Options<PostBackupsTargetsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postBackupsTargets({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteBackupsTargetsByIdMutation = (options?: Partial<Options<DeleteBackupsTargetsByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteBackupsTargetsByIdError, Options<DeleteBackupsTargetsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteBackupsTargetsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBackupsTargetsByIdQueryKey = (options: Options<GetBackupsTargetsByIdData>) => [
    createQueryKey('getBackupsTargetsById', options)
];

export const getBackupsTargetsByIdOptions = (options: Options<GetBackupsTargetsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBackupsTargetsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBackupsTargetsByIdQueryKey(options)
    });
};

export const putBackupsTargetsByIdMutation = (options?: Partial<Options<PutBackupsTargetsByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutBackupsTargetsByIdResponse, PutBackupsTargetsByIdError, Options<PutBackupsTargetsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putBackupsTargetsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteBackupsByIdMutation = (options?: Partial<Options<DeleteBackupsByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteBackupsByIdError, Options<DeleteBackupsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteBackupsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getBackupsByIdQueryKey = (options: Options<GetBackupsByIdData>) => [
    createQueryKey('getBackupsById', options)
];

export const getBackupsByIdOptions = (options: Options<GetBackupsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getBackupsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getBackupsByIdQueryKey(options)
    });
};

export const getChaincodeProjectsQueryKey = (options?: Options<GetChaincodeProjectsData>) => [
    createQueryKey('getChaincodeProjects', options)
];

export const getChaincodeProjectsOptions = (options?: Options<GetChaincodeProjectsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getChaincodeProjects({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getChaincodeProjectsQueryKey(options)
    });
};

export const postChaincodeProjectsQueryKey = (options: Options<PostChaincodeProjectsData>) => [
    createQueryKey('postChaincodeProjects', options)
];

export const postChaincodeProjectsOptions = (options: Options<PostChaincodeProjectsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postChaincodeProjects({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postChaincodeProjectsQueryKey(options)
    });
};

export const postChaincodeProjectsMutation = (options?: Partial<Options<PostChaincodeProjectsData>>) => {
    const mutationOptions: UseMutationOptions<PostChaincodeProjectsResponse, PostChaincodeProjectsError, Options<PostChaincodeProjectsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postChaincodeProjects({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getChaincodeProjectsByIdQueryKey = (options: Options<GetChaincodeProjectsByIdData>) => [
    createQueryKey('getChaincodeProjectsById', options)
];

export const getChaincodeProjectsByIdOptions = (options: Options<GetChaincodeProjectsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getChaincodeProjectsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getChaincodeProjectsByIdQueryKey(options)
    });
};

export const getChaincodeProjectsByIdCommitsQueryKey = (options: Options<GetChaincodeProjectsByIdCommitsData>) => [
    createQueryKey('getChaincodeProjectsByIdCommits', options)
];

export const getChaincodeProjectsByIdCommitsOptions = (options: Options<GetChaincodeProjectsByIdCommitsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getChaincodeProjectsByIdCommits({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getChaincodeProjectsByIdCommitsQueryKey(options)
    });
};

export const getChaincodeProjectsByIdCommitsInfiniteQueryKey = (options: Options<GetChaincodeProjectsByIdCommitsData>): QueryKey<Options<GetChaincodeProjectsByIdCommitsData>> => [
    createQueryKey('getChaincodeProjectsByIdCommits', options, true)
];

export const getChaincodeProjectsByIdCommitsInfiniteOptions = (options: Options<GetChaincodeProjectsByIdCommitsData>) => {
    return infiniteQueryOptions<GetChaincodeProjectsByIdCommitsResponse, GetChaincodeProjectsByIdCommitsError, InfiniteData<GetChaincodeProjectsByIdCommitsResponse>, QueryKey<Options<GetChaincodeProjectsByIdCommitsData>>, number | Pick<QueryKey<Options<GetChaincodeProjectsByIdCommitsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetChaincodeProjectsByIdCommitsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getChaincodeProjectsByIdCommits({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getChaincodeProjectsByIdCommitsInfiniteQueryKey(options)
    });
};

export const getChaincodeProjectsByIdCommitsByCommitHashQueryKey = (options: Options<GetChaincodeProjectsByIdCommitsByCommitHashData>) => [
    createQueryKey('getChaincodeProjectsByIdCommitsByCommitHash', options)
];

export const getChaincodeProjectsByIdCommitsByCommitHashOptions = (options: Options<GetChaincodeProjectsByIdCommitsByCommitHashData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getChaincodeProjectsByIdCommitsByCommitHash({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getChaincodeProjectsByIdCommitsByCommitHashQueryKey(options)
    });
};

export const getChaincodeProjectsByIdDiffQueryKey = (options: Options<GetChaincodeProjectsByIdDiffData>) => [
    createQueryKey('getChaincodeProjectsByIdDiff', options)
];

export const getChaincodeProjectsByIdDiffOptions = (options: Options<GetChaincodeProjectsByIdDiffData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getChaincodeProjectsByIdDiff({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getChaincodeProjectsByIdDiffQueryKey(options)
    });
};

export const putChaincodeProjectsByIdEndorsementPolicyMutation = (options?: Partial<Options<PutChaincodeProjectsByIdEndorsementPolicyData>>) => {
    const mutationOptions: UseMutationOptions<PutChaincodeProjectsByIdEndorsementPolicyResponse, PutChaincodeProjectsByIdEndorsementPolicyError, Options<PutChaincodeProjectsByIdEndorsementPolicyData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putChaincodeProjectsByIdEndorsementPolicy({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getChaincodeProjectsByIdFileAtCommitQueryKey = (options: Options<GetChaincodeProjectsByIdFileAtCommitData>) => [
    createQueryKey('getChaincodeProjectsByIdFileAtCommit', options)
];

export const getChaincodeProjectsByIdFileAtCommitOptions = (options: Options<GetChaincodeProjectsByIdFileAtCommitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getChaincodeProjectsByIdFileAtCommit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getChaincodeProjectsByIdFileAtCommitQueryKey(options)
    });
};

export const postChaincodeProjectsByIdInvokeQueryKey = (options: Options<PostChaincodeProjectsByIdInvokeData>) => [
    createQueryKey('postChaincodeProjectsByIdInvoke', options)
];

export const postChaincodeProjectsByIdInvokeOptions = (options: Options<PostChaincodeProjectsByIdInvokeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postChaincodeProjectsByIdInvoke({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postChaincodeProjectsByIdInvokeQueryKey(options)
    });
};

export const postChaincodeProjectsByIdInvokeMutation = (options?: Partial<Options<PostChaincodeProjectsByIdInvokeData>>) => {
    const mutationOptions: UseMutationOptions<PostChaincodeProjectsByIdInvokeResponse, PostChaincodeProjectsByIdInvokeError, Options<PostChaincodeProjectsByIdInvokeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postChaincodeProjectsByIdInvoke({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getChaincodeProjectsByIdLogsQueryKey = (options: Options<GetChaincodeProjectsByIdLogsData>) => [
    createQueryKey('getChaincodeProjectsByIdLogs', options)
];

export const getChaincodeProjectsByIdLogsOptions = (options: Options<GetChaincodeProjectsByIdLogsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getChaincodeProjectsByIdLogs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getChaincodeProjectsByIdLogsQueryKey(options)
    });
};

export const getChaincodeProjectsByIdLogsStreamQueryKey = (options: Options<GetChaincodeProjectsByIdLogsStreamData>) => [
    createQueryKey('getChaincodeProjectsByIdLogsStream', options)
];

export const getChaincodeProjectsByIdLogsStreamOptions = (options: Options<GetChaincodeProjectsByIdLogsStreamData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getChaincodeProjectsByIdLogsStream({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getChaincodeProjectsByIdLogsStreamQueryKey(options)
    });
};

export const postChaincodeProjectsByIdQueryQueryKey = (options: Options<PostChaincodeProjectsByIdQueryData>) => [
    createQueryKey('postChaincodeProjectsByIdQuery', options)
];

export const postChaincodeProjectsByIdQueryOptions = (options: Options<PostChaincodeProjectsByIdQueryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postChaincodeProjectsByIdQuery({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postChaincodeProjectsByIdQueryQueryKey(options)
    });
};

export const postChaincodeProjectsByIdQueryMutation = (options?: Partial<Options<PostChaincodeProjectsByIdQueryData>>) => {
    const mutationOptions: UseMutationOptions<PostChaincodeProjectsByIdQueryResponse, PostChaincodeProjectsByIdQueryError, Options<PostChaincodeProjectsByIdQueryData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postChaincodeProjectsByIdQuery({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postChaincodeProjectsByIdStartQueryKey = (options: Options<PostChaincodeProjectsByIdStartData>) => [
    createQueryKey('postChaincodeProjectsByIdStart', options)
];

export const postChaincodeProjectsByIdStartOptions = (options: Options<PostChaincodeProjectsByIdStartData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postChaincodeProjectsByIdStart({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postChaincodeProjectsByIdStartQueryKey(options)
    });
};

export const postChaincodeProjectsByIdStartMutation = (options?: Partial<Options<PostChaincodeProjectsByIdStartData>>) => {
    const mutationOptions: UseMutationOptions<PostChaincodeProjectsByIdStartResponse, PostChaincodeProjectsByIdStartError, Options<PostChaincodeProjectsByIdStartData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postChaincodeProjectsByIdStart({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postChaincodeProjectsByIdStopQueryKey = (options: Options<PostChaincodeProjectsByIdStopData>) => [
    createQueryKey('postChaincodeProjectsByIdStop', options)
];

export const postChaincodeProjectsByIdStopOptions = (options: Options<PostChaincodeProjectsByIdStopData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postChaincodeProjectsByIdStop({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postChaincodeProjectsByIdStopQueryKey(options)
    });
};

export const postChaincodeProjectsByIdStopMutation = (options?: Partial<Options<PostChaincodeProjectsByIdStopData>>) => {
    const mutationOptions: UseMutationOptions<PostChaincodeProjectsByIdStopResponse, PostChaincodeProjectsByIdStopError, Options<PostChaincodeProjectsByIdStopData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postChaincodeProjectsByIdStop({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postDummyQueryKey = (options: Options<PostDummyData>) => [
    createQueryKey('postDummy', options)
];

export const postDummyOptions = (options: Options<PostDummyData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postDummy({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postDummyQueryKey(options)
    });
};

export const postDummyMutation = (options?: Partial<Options<PostDummyData>>) => {
    const mutationOptions: UseMutationOptions<PostDummyResponse, DefaultError, Options<PostDummyData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postDummy({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getKeyProvidersQueryKey = (options?: Options<GetKeyProvidersData>) => [
    createQueryKey('getKeyProviders', options)
];

export const getKeyProvidersOptions = (options?: Options<GetKeyProvidersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getKeyProviders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeyProvidersQueryKey(options)
    });
};

export const postKeyProvidersQueryKey = (options: Options<PostKeyProvidersData>) => [
    createQueryKey('postKeyProviders', options)
];

export const postKeyProvidersOptions = (options: Options<PostKeyProvidersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postKeyProviders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postKeyProvidersQueryKey(options)
    });
};

export const postKeyProvidersMutation = (options?: Partial<Options<PostKeyProvidersData>>) => {
    const mutationOptions: UseMutationOptions<PostKeyProvidersResponse, PostKeyProvidersError, Options<PostKeyProvidersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postKeyProviders({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteKeyProvidersByIdMutation = (options?: Partial<Options<DeleteKeyProvidersByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteKeyProvidersByIdError, Options<DeleteKeyProvidersByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteKeyProvidersById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getKeyProvidersByIdQueryKey = (options: Options<GetKeyProvidersByIdData>) => [
    createQueryKey('getKeyProvidersById', options)
];

export const getKeyProvidersByIdOptions = (options: Options<GetKeyProvidersByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getKeyProvidersById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeyProvidersByIdQueryKey(options)
    });
};

export const getKeysQueryKey = (options?: Options<GetKeysData>) => [
    createQueryKey('getKeys', options)
];

export const getKeysOptions = (options?: Options<GetKeysData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getKeys({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeysQueryKey(options)
    });
};

export const getKeysInfiniteQueryKey = (options?: Options<GetKeysData>): QueryKey<Options<GetKeysData>> => [
    createQueryKey('getKeys', options, true)
];

export const getKeysInfiniteOptions = (options?: Options<GetKeysData>) => {
    return infiniteQueryOptions<GetKeysResponse, GetKeysError, InfiniteData<GetKeysResponse>, QueryKey<Options<GetKeysData>>, number | Pick<QueryKey<Options<GetKeysData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetKeysData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getKeys({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeysInfiniteQueryKey(options)
    });
};

export const postKeysQueryKey = (options: Options<PostKeysData>) => [
    createQueryKey('postKeys', options)
];

export const postKeysOptions = (options: Options<PostKeysData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postKeys({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postKeysQueryKey(options)
    });
};

export const postKeysMutation = (options?: Partial<Options<PostKeysData>>) => {
    const mutationOptions: UseMutationOptions<PostKeysResponse, PostKeysError, Options<PostKeysData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postKeys({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getKeysAllQueryKey = (options?: Options<GetKeysAllData>) => [
    createQueryKey('getKeysAll', options)
];

export const getKeysAllOptions = (options?: Options<GetKeysAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getKeysAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeysAllQueryKey(options)
    });
};

export const getKeysFilterQueryKey = (options?: Options<GetKeysFilterData>) => [
    createQueryKey('getKeysFilter', options)
];

export const getKeysFilterOptions = (options?: Options<GetKeysFilterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getKeysFilter({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeysFilterQueryKey(options)
    });
};

export const getKeysFilterInfiniteQueryKey = (options?: Options<GetKeysFilterData>): QueryKey<Options<GetKeysFilterData>> => [
    createQueryKey('getKeysFilter', options, true)
];

export const getKeysFilterInfiniteOptions = (options?: Options<GetKeysFilterData>) => {
    return infiniteQueryOptions<GetKeysFilterResponse, GetKeysFilterError, InfiniteData<GetKeysFilterResponse>, QueryKey<Options<GetKeysFilterData>>, number | Pick<QueryKey<Options<GetKeysFilterData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetKeysFilterData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getKeysFilter({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeysFilterInfiniteQueryKey(options)
    });
};

export const deleteKeysByIdMutation = (options?: Partial<Options<DeleteKeysByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteKeysByIdError, Options<DeleteKeysByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteKeysById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getKeysByIdQueryKey = (options: Options<GetKeysByIdData>) => [
    createQueryKey('getKeysById', options)
];

export const getKeysByIdOptions = (options: Options<GetKeysByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getKeysById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getKeysByIdQueryKey(options)
    });
};

export const postKeysByKeyIdSignQueryKey = (options: Options<PostKeysByKeyIdSignData>) => [
    createQueryKey('postKeysByKeyIdSign', options)
];

export const postKeysByKeyIdSignOptions = (options: Options<PostKeysByKeyIdSignData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postKeysByKeyIdSign({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postKeysByKeyIdSignQueryKey(options)
    });
};

export const postKeysByKeyIdSignMutation = (options?: Partial<Options<PostKeysByKeyIdSignData>>) => {
    const mutationOptions: UseMutationOptions<PostKeysByKeyIdSignResponse, PostKeysByKeyIdSignError, Options<PostKeysByKeyIdSignData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postKeysByKeyIdSign({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postMetricsDeployQueryKey = (options: Options<PostMetricsDeployData>) => [
    createQueryKey('postMetricsDeploy', options)
];

export const postMetricsDeployOptions = (options: Options<PostMetricsDeployData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postMetricsDeploy({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postMetricsDeployQueryKey(options)
    });
};

export const postMetricsDeployMutation = (options?: Partial<Options<PostMetricsDeployData>>) => {
    const mutationOptions: UseMutationOptions<PostMetricsDeployResponse, PostMetricsDeployError, Options<PostMetricsDeployData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postMetricsDeploy({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMetricsNodeByIdQueryKey = (options: Options<GetMetricsNodeByIdData>) => [
    createQueryKey('getMetricsNodeById', options)
];

export const getMetricsNodeByIdOptions = (options: Options<GetMetricsNodeByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMetricsNodeById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMetricsNodeByIdQueryKey(options)
    });
};

export const getMetricsNodeByIdLabelByLabelValuesQueryKey = (options: Options<GetMetricsNodeByIdLabelByLabelValuesData>) => [
    createQueryKey('getMetricsNodeByIdLabelByLabelValues', options)
];

export const getMetricsNodeByIdLabelByLabelValuesOptions = (options: Options<GetMetricsNodeByIdLabelByLabelValuesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMetricsNodeByIdLabelByLabelValues({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMetricsNodeByIdLabelByLabelValuesQueryKey(options)
    });
};

export const postMetricsNodeByIdQueryQueryKey = (options: Options<PostMetricsNodeByIdQueryData>) => [
    createQueryKey('postMetricsNodeByIdQuery', options)
];

export const postMetricsNodeByIdQueryOptions = (options: Options<PostMetricsNodeByIdQueryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postMetricsNodeByIdQuery({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postMetricsNodeByIdQueryQueryKey(options)
    });
};

export const postMetricsNodeByIdQueryInfiniteQueryKey = (options: Options<PostMetricsNodeByIdQueryData>): QueryKey<Options<PostMetricsNodeByIdQueryData>> => [
    createQueryKey('postMetricsNodeByIdQuery', options, true)
];

export const postMetricsNodeByIdQueryInfiniteOptions = (options: Options<PostMetricsNodeByIdQueryData>) => {
    return infiniteQueryOptions<PostMetricsNodeByIdQueryResponse, PostMetricsNodeByIdQueryError, InfiniteData<PostMetricsNodeByIdQueryResponse>, QueryKey<Options<PostMetricsNodeByIdQueryData>>, string | Pick<QueryKey<Options<PostMetricsNodeByIdQueryData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<PostMetricsNodeByIdQueryData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                body: {
                    start: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await postMetricsNodeByIdQuery({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postMetricsNodeByIdQueryInfiniteQueryKey(options)
    });
};

export const postMetricsNodeByIdQueryMutation = (options?: Partial<Options<PostMetricsNodeByIdQueryData>>) => {
    const mutationOptions: UseMutationOptions<PostMetricsNodeByIdQueryResponse, PostMetricsNodeByIdQueryError, Options<PostMetricsNodeByIdQueryData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postMetricsNodeByIdQuery({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMetricsNodeByIdRangeQueryKey = (options: Options<GetMetricsNodeByIdRangeData>) => [
    createQueryKey('getMetricsNodeByIdRange', options)
];

export const getMetricsNodeByIdRangeOptions = (options: Options<GetMetricsNodeByIdRangeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMetricsNodeByIdRange({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMetricsNodeByIdRangeQueryKey(options)
    });
};

export const getMetricsNodeByIdRangeInfiniteQueryKey = (options: Options<GetMetricsNodeByIdRangeData>): QueryKey<Options<GetMetricsNodeByIdRangeData>> => [
    createQueryKey('getMetricsNodeByIdRange', options, true)
];

export const getMetricsNodeByIdRangeInfiniteOptions = (options: Options<GetMetricsNodeByIdRangeData>) => {
    return infiniteQueryOptions<GetMetricsNodeByIdRangeResponse, GetMetricsNodeByIdRangeError, InfiniteData<GetMetricsNodeByIdRangeResponse>, QueryKey<Options<GetMetricsNodeByIdRangeData>>, string | Pick<QueryKey<Options<GetMetricsNodeByIdRangeData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetMetricsNodeByIdRangeData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    start: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getMetricsNodeByIdRange({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMetricsNodeByIdRangeInfiniteQueryKey(options)
    });
};

export const postMetricsReloadQueryKey = (options?: Options<PostMetricsReloadData>) => [
    createQueryKey('postMetricsReload', options)
];

export const postMetricsReloadOptions = (options?: Options<PostMetricsReloadData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postMetricsReload({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postMetricsReloadQueryKey(options)
    });
};

export const postMetricsReloadMutation = (options?: Partial<Options<PostMetricsReloadData>>) => {
    const mutationOptions: UseMutationOptions<PostMetricsReloadResponse, PostMetricsReloadError, Options<PostMetricsReloadData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postMetricsReload({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMetricsStatusQueryKey = (options?: Options<GetMetricsStatusData>) => [
    createQueryKey('getMetricsStatus', options)
];

export const getMetricsStatusOptions = (options?: Options<GetMetricsStatusData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMetricsStatus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMetricsStatusQueryKey(options)
    });
};

export const postMetricsUndeployQueryKey = (options?: Options<PostMetricsUndeployData>) => [
    createQueryKey('postMetricsUndeploy', options)
];

export const postMetricsUndeployOptions = (options?: Options<PostMetricsUndeployData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postMetricsUndeploy({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postMetricsUndeployQueryKey(options)
    });
};

export const postMetricsUndeployMutation = (options?: Partial<Options<PostMetricsUndeployData>>) => {
    const mutationOptions: UseMutationOptions<PostMetricsUndeployResponse, PostMetricsUndeployError, Options<PostMetricsUndeployData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postMetricsUndeploy({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNetworksBesuQueryKey = (options?: Options<GetNetworksBesuData>) => [
    createQueryKey('getNetworksBesu', options)
];

export const getNetworksBesuOptions = (options?: Options<GetNetworksBesuData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksBesu({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksBesuQueryKey(options)
    });
};

export const getNetworksBesuInfiniteQueryKey = (options?: Options<GetNetworksBesuData>): QueryKey<Options<GetNetworksBesuData>> => [
    createQueryKey('getNetworksBesu', options, true)
];

export const getNetworksBesuInfiniteOptions = (options?: Options<GetNetworksBesuData>) => {
    return infiniteQueryOptions<GetNetworksBesuResponse, GetNetworksBesuError, InfiniteData<GetNetworksBesuResponse>, QueryKey<Options<GetNetworksBesuData>>, number | Pick<QueryKey<Options<GetNetworksBesuData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetNetworksBesuData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getNetworksBesu({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksBesuInfiniteQueryKey(options)
    });
};

export const postNetworksBesuQueryKey = (options: Options<PostNetworksBesuData>) => [
    createQueryKey('postNetworksBesu', options)
];

export const postNetworksBesuOptions = (options: Options<PostNetworksBesuData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksBesu({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksBesuQueryKey(options)
    });
};

export const postNetworksBesuMutation = (options?: Partial<Options<PostNetworksBesuData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksBesuResponse, PostNetworksBesuError, Options<PostNetworksBesuData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksBesu({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksBesuImportQueryKey = (options: Options<PostNetworksBesuImportData>) => [
    createQueryKey('postNetworksBesuImport', options)
];

export const postNetworksBesuImportOptions = (options: Options<PostNetworksBesuImportData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksBesuImport({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksBesuImportQueryKey(options)
    });
};

export const postNetworksBesuImportMutation = (options?: Partial<Options<PostNetworksBesuImportData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksBesuImportResponse, PostNetworksBesuImportError, Options<PostNetworksBesuImportData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksBesuImport({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteNetworksBesuByIdMutation = (options?: Partial<Options<DeleteNetworksBesuByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteNetworksBesuByIdError, Options<DeleteNetworksBesuByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteNetworksBesuById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNetworksBesuByIdQueryKey = (options: Options<GetNetworksBesuByIdData>) => [
    createQueryKey('getNetworksBesuById', options)
];

export const getNetworksBesuByIdOptions = (options: Options<GetNetworksBesuByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksBesuById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksBesuByIdQueryKey(options)
    });
};

export const getNetworksFabricQueryKey = (options?: Options<GetNetworksFabricData>) => [
    createQueryKey('getNetworksFabric', options)
];

export const getNetworksFabricOptions = (options?: Options<GetNetworksFabricData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabric({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricQueryKey(options)
    });
};

export const getNetworksFabricInfiniteQueryKey = (options?: Options<GetNetworksFabricData>): QueryKey<Options<GetNetworksFabricData>> => [
    createQueryKey('getNetworksFabric', options, true)
];

export const getNetworksFabricInfiniteOptions = (options?: Options<GetNetworksFabricData>) => {
    return infiniteQueryOptions<GetNetworksFabricResponse, GetNetworksFabricError, InfiniteData<GetNetworksFabricResponse>, QueryKey<Options<GetNetworksFabricData>>, number | Pick<QueryKey<Options<GetNetworksFabricData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetNetworksFabricData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getNetworksFabric({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricInfiniteQueryKey(options)
    });
};

export const postNetworksFabricQueryKey = (options: Options<PostNetworksFabricData>) => [
    createQueryKey('postNetworksFabric', options)
];

export const postNetworksFabricOptions = (options: Options<PostNetworksFabricData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabric({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricQueryKey(options)
    });
};

export const postNetworksFabricMutation = (options?: Partial<Options<PostNetworksFabricData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricResponse, PostNetworksFabricError, Options<PostNetworksFabricData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabric({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNetworksFabricByNameByNameQueryKey = (options: Options<GetNetworksFabricByNameByNameData>) => [
    createQueryKey('getNetworksFabricByNameByName', options)
];

export const getNetworksFabricByNameByNameOptions = (options: Options<GetNetworksFabricByNameByNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByNameByName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByNameByNameQueryKey(options)
    });
};

export const postNetworksFabricImportQueryKey = (options: Options<PostNetworksFabricImportData>) => [
    createQueryKey('postNetworksFabricImport', options)
];

export const postNetworksFabricImportOptions = (options: Options<PostNetworksFabricImportData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricImport({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricImportQueryKey(options)
    });
};

export const postNetworksFabricImportMutation = (options?: Partial<Options<PostNetworksFabricImportData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricImportResponse, PostNetworksFabricImportError, Options<PostNetworksFabricImportData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricImport({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksFabricImportWithOrgQueryKey = (options: Options<PostNetworksFabricImportWithOrgData>) => [
    createQueryKey('postNetworksFabricImportWithOrg', options)
];

export const postNetworksFabricImportWithOrgOptions = (options: Options<PostNetworksFabricImportWithOrgData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricImportWithOrg({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricImportWithOrgQueryKey(options)
    });
};

export const postNetworksFabricImportWithOrgMutation = (options?: Partial<Options<PostNetworksFabricImportWithOrgData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricImportWithOrgResponse, PostNetworksFabricImportWithOrgError, Options<PostNetworksFabricImportWithOrgData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricImportWithOrg({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteNetworksFabricByIdMutation = (options?: Partial<Options<DeleteNetworksFabricByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteNetworksFabricByIdError, Options<DeleteNetworksFabricByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteNetworksFabricById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNetworksFabricByIdQueryKey = (options: Options<GetNetworksFabricByIdData>) => [
    createQueryKey('getNetworksFabricById', options)
];

export const getNetworksFabricByIdOptions = (options: Options<GetNetworksFabricByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdQueryKey(options)
    });
};

export const postNetworksFabricByIdAnchorPeersQueryKey = (options: Options<PostNetworksFabricByIdAnchorPeersData>) => [
    createQueryKey('postNetworksFabricByIdAnchorPeers', options)
];

export const postNetworksFabricByIdAnchorPeersOptions = (options: Options<PostNetworksFabricByIdAnchorPeersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdAnchorPeers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdAnchorPeersQueryKey(options)
    });
};

export const postNetworksFabricByIdAnchorPeersMutation = (options?: Partial<Options<PostNetworksFabricByIdAnchorPeersData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdAnchorPeersResponse, PostNetworksFabricByIdAnchorPeersError, Options<PostNetworksFabricByIdAnchorPeersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdAnchorPeers({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNetworksFabricByIdBlocksQueryKey = (options: Options<GetNetworksFabricByIdBlocksData>) => [
    createQueryKey('getNetworksFabricByIdBlocks', options)
];

export const getNetworksFabricByIdBlocksOptions = (options: Options<GetNetworksFabricByIdBlocksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByIdBlocks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdBlocksQueryKey(options)
    });
};

export const getNetworksFabricByIdBlocksInfiniteQueryKey = (options: Options<GetNetworksFabricByIdBlocksData>): QueryKey<Options<GetNetworksFabricByIdBlocksData>> => [
    createQueryKey('getNetworksFabricByIdBlocks', options, true)
];

export const getNetworksFabricByIdBlocksInfiniteOptions = (options: Options<GetNetworksFabricByIdBlocksData>) => {
    return infiniteQueryOptions<GetNetworksFabricByIdBlocksResponse, GetNetworksFabricByIdBlocksError, InfiniteData<GetNetworksFabricByIdBlocksResponse>, QueryKey<Options<GetNetworksFabricByIdBlocksData>>, number | Pick<QueryKey<Options<GetNetworksFabricByIdBlocksData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetNetworksFabricByIdBlocksData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getNetworksFabricByIdBlocks({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdBlocksInfiniteQueryKey(options)
    });
};

export const getNetworksFabricByIdBlocksByBlockNumQueryKey = (options: Options<GetNetworksFabricByIdBlocksByBlockNumData>) => [
    createQueryKey('getNetworksFabricByIdBlocksByBlockNum', options)
];

export const getNetworksFabricByIdBlocksByBlockNumOptions = (options: Options<GetNetworksFabricByIdBlocksByBlockNumData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByIdBlocksByBlockNum({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdBlocksByBlockNumQueryKey(options)
    });
};

export const getNetworksFabricByIdChannelConfigQueryKey = (options: Options<GetNetworksFabricByIdChannelConfigData>) => [
    createQueryKey('getNetworksFabricByIdChannelConfig', options)
];

export const getNetworksFabricByIdChannelConfigOptions = (options: Options<GetNetworksFabricByIdChannelConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByIdChannelConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdChannelConfigQueryKey(options)
    });
};

export const getNetworksFabricByIdCurrentChannelConfigQueryKey = (options: Options<GetNetworksFabricByIdCurrentChannelConfigData>) => [
    createQueryKey('getNetworksFabricByIdCurrentChannelConfig', options)
];

export const getNetworksFabricByIdCurrentChannelConfigOptions = (options: Options<GetNetworksFabricByIdCurrentChannelConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByIdCurrentChannelConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdCurrentChannelConfigQueryKey(options)
    });
};

export const getNetworksFabricByIdInfoQueryKey = (options: Options<GetNetworksFabricByIdInfoData>) => [
    createQueryKey('getNetworksFabricByIdInfo', options)
];

export const getNetworksFabricByIdInfoOptions = (options: Options<GetNetworksFabricByIdInfoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByIdInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdInfoQueryKey(options)
    });
};

export const getNetworksFabricByIdNodesQueryKey = (options: Options<GetNetworksFabricByIdNodesData>) => [
    createQueryKey('getNetworksFabricByIdNodes', options)
];

export const getNetworksFabricByIdNodesOptions = (options: Options<GetNetworksFabricByIdNodesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByIdNodes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdNodesQueryKey(options)
    });
};

export const postNetworksFabricByIdNodesQueryKey = (options: Options<PostNetworksFabricByIdNodesData>) => [
    createQueryKey('postNetworksFabricByIdNodes', options)
];

export const postNetworksFabricByIdNodesOptions = (options: Options<PostNetworksFabricByIdNodesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdNodes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdNodesQueryKey(options)
    });
};

export const postNetworksFabricByIdNodesMutation = (options?: Partial<Options<PostNetworksFabricByIdNodesData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdNodesResponse, PostNetworksFabricByIdNodesError, Options<PostNetworksFabricByIdNodesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdNodes({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteNetworksFabricByIdOrderersByOrdererIdMutation = (options?: Partial<Options<DeleteNetworksFabricByIdOrderersByOrdererIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteNetworksFabricByIdOrderersByOrdererIdResponse, DeleteNetworksFabricByIdOrderersByOrdererIdError, Options<DeleteNetworksFabricByIdOrderersByOrdererIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteNetworksFabricByIdOrderersByOrdererId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksFabricByIdOrderersByOrdererIdJoinQueryKey = (options: Options<PostNetworksFabricByIdOrderersByOrdererIdJoinData>) => [
    createQueryKey('postNetworksFabricByIdOrderersByOrdererIdJoin', options)
];

export const postNetworksFabricByIdOrderersByOrdererIdJoinOptions = (options: Options<PostNetworksFabricByIdOrderersByOrdererIdJoinData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdOrderersByOrdererIdJoin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdOrderersByOrdererIdJoinQueryKey(options)
    });
};

export const postNetworksFabricByIdOrderersByOrdererIdJoinMutation = (options?: Partial<Options<PostNetworksFabricByIdOrderersByOrdererIdJoinData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdOrderersByOrdererIdJoinResponse, PostNetworksFabricByIdOrderersByOrdererIdJoinError, Options<PostNetworksFabricByIdOrderersByOrdererIdJoinData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdOrderersByOrdererIdJoin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksFabricByIdOrderersByOrdererIdUnjoinQueryKey = (options: Options<PostNetworksFabricByIdOrderersByOrdererIdUnjoinData>) => [
    createQueryKey('postNetworksFabricByIdOrderersByOrdererIdUnjoin', options)
];

export const postNetworksFabricByIdOrderersByOrdererIdUnjoinOptions = (options: Options<PostNetworksFabricByIdOrderersByOrdererIdUnjoinData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdOrderersByOrdererIdUnjoin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdOrderersByOrdererIdUnjoinQueryKey(options)
    });
};

export const postNetworksFabricByIdOrderersByOrdererIdUnjoinMutation = (options?: Partial<Options<PostNetworksFabricByIdOrderersByOrdererIdUnjoinData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponse, PostNetworksFabricByIdOrderersByOrdererIdUnjoinError, Options<PostNetworksFabricByIdOrderersByOrdererIdUnjoinData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdOrderersByOrdererIdUnjoin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksFabricByIdOrganizationCrlQueryKey = (options: Options<PostNetworksFabricByIdOrganizationCrlData>) => [
    createQueryKey('postNetworksFabricByIdOrganizationCrl', options)
];

export const postNetworksFabricByIdOrganizationCrlOptions = (options: Options<PostNetworksFabricByIdOrganizationCrlData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdOrganizationCrl({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdOrganizationCrlQueryKey(options)
    });
};

export const postNetworksFabricByIdOrganizationCrlMutation = (options?: Partial<Options<PostNetworksFabricByIdOrganizationCrlData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdOrganizationCrlResponse, PostNetworksFabricByIdOrganizationCrlError, Options<PostNetworksFabricByIdOrganizationCrlData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdOrganizationCrl({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNetworksFabricByIdOrganizationsByOrgIdConfigQueryKey = (options: Options<GetNetworksFabricByIdOrganizationsByOrgIdConfigData>) => [
    createQueryKey('getNetworksFabricByIdOrganizationsByOrgIdConfig', options)
];

export const getNetworksFabricByIdOrganizationsByOrgIdConfigOptions = (options: Options<GetNetworksFabricByIdOrganizationsByOrgIdConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByIdOrganizationsByOrgIdConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdOrganizationsByOrgIdConfigQueryKey(options)
    });
};

export const deleteNetworksFabricByIdPeersByPeerIdMutation = (options?: Partial<Options<DeleteNetworksFabricByIdPeersByPeerIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteNetworksFabricByIdPeersByPeerIdResponse, DeleteNetworksFabricByIdPeersByPeerIdError, Options<DeleteNetworksFabricByIdPeersByPeerIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteNetworksFabricByIdPeersByPeerId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksFabricByIdPeersByPeerIdJoinQueryKey = (options: Options<PostNetworksFabricByIdPeersByPeerIdJoinData>) => [
    createQueryKey('postNetworksFabricByIdPeersByPeerIdJoin', options)
];

export const postNetworksFabricByIdPeersByPeerIdJoinOptions = (options: Options<PostNetworksFabricByIdPeersByPeerIdJoinData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdPeersByPeerIdJoin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdPeersByPeerIdJoinQueryKey(options)
    });
};

export const postNetworksFabricByIdPeersByPeerIdJoinMutation = (options?: Partial<Options<PostNetworksFabricByIdPeersByPeerIdJoinData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdPeersByPeerIdJoinResponse, PostNetworksFabricByIdPeersByPeerIdJoinError, Options<PostNetworksFabricByIdPeersByPeerIdJoinData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdPeersByPeerIdJoin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksFabricByIdPeersByPeerIdUnjoinQueryKey = (options: Options<PostNetworksFabricByIdPeersByPeerIdUnjoinData>) => [
    createQueryKey('postNetworksFabricByIdPeersByPeerIdUnjoin', options)
];

export const postNetworksFabricByIdPeersByPeerIdUnjoinOptions = (options: Options<PostNetworksFabricByIdPeersByPeerIdUnjoinData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdPeersByPeerIdUnjoin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdPeersByPeerIdUnjoinQueryKey(options)
    });
};

export const postNetworksFabricByIdPeersByPeerIdUnjoinMutation = (options?: Partial<Options<PostNetworksFabricByIdPeersByPeerIdUnjoinData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdPeersByPeerIdUnjoinResponse, PostNetworksFabricByIdPeersByPeerIdUnjoinError, Options<PostNetworksFabricByIdPeersByPeerIdUnjoinData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdPeersByPeerIdUnjoin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNetworksFabricByIdReloadBlockQueryKey = (options: Options<PostNetworksFabricByIdReloadBlockData>) => [
    createQueryKey('postNetworksFabricByIdReloadBlock', options)
];

export const postNetworksFabricByIdReloadBlockOptions = (options: Options<PostNetworksFabricByIdReloadBlockData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdReloadBlock({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdReloadBlockQueryKey(options)
    });
};

export const postNetworksFabricByIdReloadBlockMutation = (options?: Partial<Options<PostNetworksFabricByIdReloadBlockData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdReloadBlockResponse, PostNetworksFabricByIdReloadBlockError, Options<PostNetworksFabricByIdReloadBlockData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdReloadBlock({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNetworksFabricByIdTransactionsByTxIdQueryKey = (options: Options<GetNetworksFabricByIdTransactionsByTxIdData>) => [
    createQueryKey('getNetworksFabricByIdTransactionsByTxId', options)
];

export const getNetworksFabricByIdTransactionsByTxIdOptions = (options: Options<GetNetworksFabricByIdTransactionsByTxIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNetworksFabricByIdTransactionsByTxId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNetworksFabricByIdTransactionsByTxIdQueryKey(options)
    });
};

export const postNetworksFabricByIdUpdateConfigQueryKey = (options: Options<PostNetworksFabricByIdUpdateConfigData>) => [
    createQueryKey('postNetworksFabricByIdUpdateConfig', options)
];

export const postNetworksFabricByIdUpdateConfigOptions = (options: Options<PostNetworksFabricByIdUpdateConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNetworksFabricByIdUpdateConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNetworksFabricByIdUpdateConfigQueryKey(options)
    });
};

export const postNetworksFabricByIdUpdateConfigMutation = (options?: Partial<Options<PostNetworksFabricByIdUpdateConfigData>>) => {
    const mutationOptions: UseMutationOptions<PostNetworksFabricByIdUpdateConfigResponse, PostNetworksFabricByIdUpdateConfigError, Options<PostNetworksFabricByIdUpdateConfigData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNetworksFabricByIdUpdateConfig({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNodesQueryKey = (options?: Options<GetNodesData>) => [
    createQueryKey('getNodes', options)
];

export const getNodesOptions = (options?: Options<GetNodesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesQueryKey(options)
    });
};

export const getNodesInfiniteQueryKey = (options?: Options<GetNodesData>): QueryKey<Options<GetNodesData>> => [
    createQueryKey('getNodes', options, true)
];

export const getNodesInfiniteOptions = (options?: Options<GetNodesData>) => {
    return infiniteQueryOptions<GetNodesResponse, GetNodesError, InfiniteData<GetNodesResponse>, QueryKey<Options<GetNodesData>>, number | Pick<QueryKey<Options<GetNodesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetNodesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getNodes({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesInfiniteQueryKey(options)
    });
};

export const postNodesQueryKey = (options: Options<PostNodesData>) => [
    createQueryKey('postNodes', options)
];

export const postNodesOptions = (options: Options<PostNodesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNodes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNodesQueryKey(options)
    });
};

export const postNodesMutation = (options?: Partial<Options<PostNodesData>>) => {
    const mutationOptions: UseMutationOptions<PostNodesResponse, PostNodesError, Options<PostNodesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNodes({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNodesDefaultsBesuNodeQueryKey = (options?: Options<GetNodesDefaultsBesuNodeData>) => [
    createQueryKey('getNodesDefaultsBesuNode', options)
];

export const getNodesDefaultsBesuNodeOptions = (options?: Options<GetNodesDefaultsBesuNodeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesDefaultsBesuNode({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesDefaultsBesuNodeQueryKey(options)
    });
};

export const getNodesDefaultsFabricQueryKey = (options?: Options<GetNodesDefaultsFabricData>) => [
    createQueryKey('getNodesDefaultsFabric', options)
];

export const getNodesDefaultsFabricOptions = (options?: Options<GetNodesDefaultsFabricData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesDefaultsFabric({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesDefaultsFabricQueryKey(options)
    });
};

export const getNodesDefaultsFabricOrdererQueryKey = (options?: Options<GetNodesDefaultsFabricOrdererData>) => [
    createQueryKey('getNodesDefaultsFabricOrderer', options)
];

export const getNodesDefaultsFabricOrdererOptions = (options?: Options<GetNodesDefaultsFabricOrdererData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesDefaultsFabricOrderer({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesDefaultsFabricOrdererQueryKey(options)
    });
};

export const getNodesDefaultsFabricPeerQueryKey = (options?: Options<GetNodesDefaultsFabricPeerData>) => [
    createQueryKey('getNodesDefaultsFabricPeer', options)
];

export const getNodesDefaultsFabricPeerOptions = (options?: Options<GetNodesDefaultsFabricPeerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesDefaultsFabricPeer({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesDefaultsFabricPeerQueryKey(options)
    });
};

export const getNodesPlatformByPlatformQueryKey = (options: Options<GetNodesPlatformByPlatformData>) => [
    createQueryKey('getNodesPlatformByPlatform', options)
];

export const getNodesPlatformByPlatformOptions = (options: Options<GetNodesPlatformByPlatformData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesPlatformByPlatform({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesPlatformByPlatformQueryKey(options)
    });
};

export const getNodesPlatformByPlatformInfiniteQueryKey = (options: Options<GetNodesPlatformByPlatformData>): QueryKey<Options<GetNodesPlatformByPlatformData>> => [
    createQueryKey('getNodesPlatformByPlatform', options, true)
];

export const getNodesPlatformByPlatformInfiniteOptions = (options: Options<GetNodesPlatformByPlatformData>) => {
    return infiniteQueryOptions<GetNodesPlatformByPlatformResponse, GetNodesPlatformByPlatformError, InfiniteData<GetNodesPlatformByPlatformResponse>, QueryKey<Options<GetNodesPlatformByPlatformData>>, number | Pick<QueryKey<Options<GetNodesPlatformByPlatformData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetNodesPlatformByPlatformData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getNodesPlatformByPlatform({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesPlatformByPlatformInfiniteQueryKey(options)
    });
};

export const deleteNodesByIdMutation = (options?: Partial<Options<DeleteNodesByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteNodesByIdError, Options<DeleteNodesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteNodesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNodesByIdQueryKey = (options: Options<GetNodesByIdData>) => [
    createQueryKey('getNodesById', options)
];

export const getNodesByIdOptions = (options: Options<GetNodesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesByIdQueryKey(options)
    });
};

export const putNodesByIdMutation = (options?: Partial<Options<PutNodesByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutNodesByIdResponse, PutNodesByIdError, Options<PutNodesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putNodesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNodesByIdCertificatesRenewQueryKey = (options: Options<PostNodesByIdCertificatesRenewData>) => [
    createQueryKey('postNodesByIdCertificatesRenew', options)
];

export const postNodesByIdCertificatesRenewOptions = (options: Options<PostNodesByIdCertificatesRenewData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNodesByIdCertificatesRenew({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNodesByIdCertificatesRenewQueryKey(options)
    });
};

export const postNodesByIdCertificatesRenewMutation = (options?: Partial<Options<PostNodesByIdCertificatesRenewData>>) => {
    const mutationOptions: UseMutationOptions<PostNodesByIdCertificatesRenewResponse, PostNodesByIdCertificatesRenewError, Options<PostNodesByIdCertificatesRenewData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNodesByIdCertificatesRenew({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNodesByIdChannelsQueryKey = (options: Options<GetNodesByIdChannelsData>) => [
    createQueryKey('getNodesByIdChannels', options)
];

export const getNodesByIdChannelsOptions = (options: Options<GetNodesByIdChannelsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesByIdChannels({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesByIdChannelsQueryKey(options)
    });
};

export const getNodesByIdChannelsByChannelIdChaincodesQueryKey = (options: Options<GetNodesByIdChannelsByChannelIdChaincodesData>) => [
    createQueryKey('getNodesByIdChannelsByChannelIdChaincodes', options)
];

export const getNodesByIdChannelsByChannelIdChaincodesOptions = (options: Options<GetNodesByIdChannelsByChannelIdChaincodesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesByIdChannelsByChannelIdChaincodes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesByIdChannelsByChannelIdChaincodesQueryKey(options)
    });
};

export const getNodesByIdEventsQueryKey = (options: Options<GetNodesByIdEventsData>) => [
    createQueryKey('getNodesByIdEvents', options)
];

export const getNodesByIdEventsOptions = (options: Options<GetNodesByIdEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesByIdEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesByIdEventsQueryKey(options)
    });
};

export const getNodesByIdEventsInfiniteQueryKey = (options: Options<GetNodesByIdEventsData>): QueryKey<Options<GetNodesByIdEventsData>> => [
    createQueryKey('getNodesByIdEvents', options, true)
];

export const getNodesByIdEventsInfiniteOptions = (options: Options<GetNodesByIdEventsData>) => {
    return infiniteQueryOptions<GetNodesByIdEventsResponse, GetNodesByIdEventsError, InfiniteData<GetNodesByIdEventsResponse>, QueryKey<Options<GetNodesByIdEventsData>>, number | Pick<QueryKey<Options<GetNodesByIdEventsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetNodesByIdEventsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getNodesByIdEvents({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesByIdEventsInfiniteQueryKey(options)
    });
};

export const getNodesByIdLogsQueryKey = (options: Options<GetNodesByIdLogsData>) => [
    createQueryKey('getNodesByIdLogs', options)
];

export const getNodesByIdLogsOptions = (options: Options<GetNodesByIdLogsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNodesByIdLogs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNodesByIdLogsQueryKey(options)
    });
};

export const postNodesByIdRestartQueryKey = (options: Options<PostNodesByIdRestartData>) => [
    createQueryKey('postNodesByIdRestart', options)
];

export const postNodesByIdRestartOptions = (options: Options<PostNodesByIdRestartData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNodesByIdRestart({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNodesByIdRestartQueryKey(options)
    });
};

export const postNodesByIdRestartMutation = (options?: Partial<Options<PostNodesByIdRestartData>>) => {
    const mutationOptions: UseMutationOptions<PostNodesByIdRestartResponse, PostNodesByIdRestartError, Options<PostNodesByIdRestartData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNodesByIdRestart({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNodesByIdStartQueryKey = (options: Options<PostNodesByIdStartData>) => [
    createQueryKey('postNodesByIdStart', options)
];

export const postNodesByIdStartOptions = (options: Options<PostNodesByIdStartData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNodesByIdStart({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNodesByIdStartQueryKey(options)
    });
};

export const postNodesByIdStartMutation = (options?: Partial<Options<PostNodesByIdStartData>>) => {
    const mutationOptions: UseMutationOptions<PostNodesByIdStartResponse, PostNodesByIdStartError, Options<PostNodesByIdStartData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNodesByIdStart({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNodesByIdStopQueryKey = (options: Options<PostNodesByIdStopData>) => [
    createQueryKey('postNodesByIdStop', options)
];

export const postNodesByIdStopOptions = (options: Options<PostNodesByIdStopData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNodesByIdStop({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNodesByIdStopQueryKey(options)
    });
};

export const postNodesByIdStopMutation = (options?: Partial<Options<PostNodesByIdStopData>>) => {
    const mutationOptions: UseMutationOptions<PostNodesByIdStopResponse, PostNodesByIdStopError, Options<PostNodesByIdStopData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNodesByIdStop({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNotificationsProvidersQueryKey = (options?: Options<GetNotificationsProvidersData>) => [
    createQueryKey('getNotificationsProviders', options)
];

export const getNotificationsProvidersOptions = (options?: Options<GetNotificationsProvidersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNotificationsProviders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNotificationsProvidersQueryKey(options)
    });
};

export const postNotificationsProvidersQueryKey = (options: Options<PostNotificationsProvidersData>) => [
    createQueryKey('postNotificationsProviders', options)
];

export const postNotificationsProvidersOptions = (options: Options<PostNotificationsProvidersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNotificationsProviders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNotificationsProvidersQueryKey(options)
    });
};

export const postNotificationsProvidersMutation = (options?: Partial<Options<PostNotificationsProvidersData>>) => {
    const mutationOptions: UseMutationOptions<PostNotificationsProvidersResponse, PostNotificationsProvidersError, Options<PostNotificationsProvidersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNotificationsProviders({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteNotificationsProvidersByIdMutation = (options?: Partial<Options<DeleteNotificationsProvidersByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteNotificationsProvidersByIdError, Options<DeleteNotificationsProvidersByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteNotificationsProvidersById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getNotificationsProvidersByIdQueryKey = (options: Options<GetNotificationsProvidersByIdData>) => [
    createQueryKey('getNotificationsProvidersById', options)
];

export const getNotificationsProvidersByIdOptions = (options: Options<GetNotificationsProvidersByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getNotificationsProvidersById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getNotificationsProvidersByIdQueryKey(options)
    });
};

export const putNotificationsProvidersByIdMutation = (options?: Partial<Options<PutNotificationsProvidersByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutNotificationsProvidersByIdResponse, PutNotificationsProvidersByIdError, Options<PutNotificationsProvidersByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putNotificationsProvidersById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postNotificationsProvidersByIdTestQueryKey = (options: Options<PostNotificationsProvidersByIdTestData>) => [
    createQueryKey('postNotificationsProvidersByIdTest', options)
];

export const postNotificationsProvidersByIdTestOptions = (options: Options<PostNotificationsProvidersByIdTestData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postNotificationsProvidersByIdTest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postNotificationsProvidersByIdTestQueryKey(options)
    });
};

export const postNotificationsProvidersByIdTestMutation = (options?: Partial<Options<PostNotificationsProvidersByIdTestData>>) => {
    const mutationOptions: UseMutationOptions<PostNotificationsProvidersByIdTestResponse, PostNotificationsProvidersByIdTestError, Options<PostNotificationsProvidersByIdTestData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postNotificationsProvidersByIdTest({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrganizationsQueryKey = (options?: Options<GetOrganizationsData>) => [
    createQueryKey('getOrganizations', options)
];

export const getOrganizationsOptions = (options?: Options<GetOrganizationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrganizations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrganizationsQueryKey(options)
    });
};

export const getOrganizationsInfiniteQueryKey = (options?: Options<GetOrganizationsData>): QueryKey<Options<GetOrganizationsData>> => [
    createQueryKey('getOrganizations', options, true)
];

export const getOrganizationsInfiniteOptions = (options?: Options<GetOrganizationsData>) => {
    return infiniteQueryOptions<GetOrganizationsResponse, GetOrganizationsError, InfiniteData<GetOrganizationsResponse>, QueryKey<Options<GetOrganizationsData>>, number | Pick<QueryKey<Options<GetOrganizationsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetOrganizationsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getOrganizations({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrganizationsInfiniteQueryKey(options)
    });
};

export const postOrganizationsQueryKey = (options: Options<PostOrganizationsData>) => [
    createQueryKey('postOrganizations', options)
];

export const postOrganizationsOptions = (options: Options<PostOrganizationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postOrganizations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postOrganizationsQueryKey(options)
    });
};

export const postOrganizationsMutation = (options?: Partial<Options<PostOrganizationsData>>) => {
    const mutationOptions: UseMutationOptions<PostOrganizationsResponse, PostOrganizationsError, Options<PostOrganizationsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postOrganizations({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrganizationsByMspidByMspidQueryKey = (options: Options<GetOrganizationsByMspidByMspidData>) => [
    createQueryKey('getOrganizationsByMspidByMspid', options)
];

export const getOrganizationsByMspidByMspidOptions = (options: Options<GetOrganizationsByMspidByMspidData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrganizationsByMspidByMspid({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrganizationsByMspidByMspidQueryKey(options)
    });
};

export const deleteOrganizationsByIdMutation = (options?: Partial<Options<DeleteOrganizationsByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteOrganizationsByIdError, Options<DeleteOrganizationsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteOrganizationsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrganizationsByIdQueryKey = (options: Options<GetOrganizationsByIdData>) => [
    createQueryKey('getOrganizationsById', options)
];

export const getOrganizationsByIdOptions = (options: Options<GetOrganizationsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrganizationsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrganizationsByIdQueryKey(options)
    });
};

export const putOrganizationsByIdMutation = (options?: Partial<Options<PutOrganizationsByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutOrganizationsByIdResponse, PutOrganizationsByIdError, Options<PutOrganizationsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putOrganizationsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrganizationsByIdCrlQueryKey = (options: Options<GetOrganizationsByIdCrlData>) => [
    createQueryKey('getOrganizationsByIdCrl', options)
];

export const getOrganizationsByIdCrlOptions = (options: Options<GetOrganizationsByIdCrlData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrganizationsByIdCrl({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrganizationsByIdCrlQueryKey(options)
    });
};

export const postOrganizationsByIdCrlRevokePemQueryKey = (options: Options<PostOrganizationsByIdCrlRevokePemData>) => [
    createQueryKey('postOrganizationsByIdCrlRevokePem', options)
];

export const postOrganizationsByIdCrlRevokePemOptions = (options: Options<PostOrganizationsByIdCrlRevokePemData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postOrganizationsByIdCrlRevokePem({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postOrganizationsByIdCrlRevokePemQueryKey(options)
    });
};

export const postOrganizationsByIdCrlRevokePemMutation = (options?: Partial<Options<PostOrganizationsByIdCrlRevokePemData>>) => {
    const mutationOptions: UseMutationOptions<PostOrganizationsByIdCrlRevokePemResponse, PostOrganizationsByIdCrlRevokePemError, Options<PostOrganizationsByIdCrlRevokePemData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postOrganizationsByIdCrlRevokePem({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteOrganizationsByIdCrlRevokeSerialMutation = (options?: Partial<Options<DeleteOrganizationsByIdCrlRevokeSerialData>>) => {
    const mutationOptions: UseMutationOptions<DeleteOrganizationsByIdCrlRevokeSerialResponse, DeleteOrganizationsByIdCrlRevokeSerialError, Options<DeleteOrganizationsByIdCrlRevokeSerialData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteOrganizationsByIdCrlRevokeSerial({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postOrganizationsByIdCrlRevokeSerialQueryKey = (options: Options<PostOrganizationsByIdCrlRevokeSerialData>) => [
    createQueryKey('postOrganizationsByIdCrlRevokeSerial', options)
];

export const postOrganizationsByIdCrlRevokeSerialOptions = (options: Options<PostOrganizationsByIdCrlRevokeSerialData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postOrganizationsByIdCrlRevokeSerial({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postOrganizationsByIdCrlRevokeSerialQueryKey(options)
    });
};

export const postOrganizationsByIdCrlRevokeSerialMutation = (options?: Partial<Options<PostOrganizationsByIdCrlRevokeSerialData>>) => {
    const mutationOptions: UseMutationOptions<PostOrganizationsByIdCrlRevokeSerialResponse, PostOrganizationsByIdCrlRevokeSerialError, Options<PostOrganizationsByIdCrlRevokeSerialData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postOrganizationsByIdCrlRevokeSerial({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrganizationsByIdRevokedCertificatesQueryKey = (options: Options<GetOrganizationsByIdRevokedCertificatesData>) => [
    createQueryKey('getOrganizationsByIdRevokedCertificates', options)
];

export const getOrganizationsByIdRevokedCertificatesOptions = (options: Options<GetOrganizationsByIdRevokedCertificatesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrganizationsByIdRevokedCertificates({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrganizationsByIdRevokedCertificatesQueryKey(options)
    });
};

export const getPluginsQueryKey = (options?: Options<GetPluginsData>) => [
    createQueryKey('getPlugins', options)
];

export const getPluginsOptions = (options?: Options<GetPluginsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPlugins({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPluginsQueryKey(options)
    });
};

export const postPluginsQueryKey = (options: Options<PostPluginsData>) => [
    createQueryKey('postPlugins', options)
];

export const postPluginsOptions = (options: Options<PostPluginsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postPlugins({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPluginsQueryKey(options)
    });
};

export const postPluginsMutation = (options?: Partial<Options<PostPluginsData>>) => {
    const mutationOptions: UseMutationOptions<PostPluginsResponse, PostPluginsError, Options<PostPluginsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postPlugins({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPluginsAvailableQueryKey = (options?: Options<GetPluginsAvailableData>) => [
    createQueryKey('getPluginsAvailable', options)
];

export const getPluginsAvailableOptions = (options?: Options<GetPluginsAvailableData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPluginsAvailable({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPluginsAvailableQueryKey(options)
    });
};

export const postPluginsAvailableRefreshQueryKey = (options?: Options<PostPluginsAvailableRefreshData>) => [
    createQueryKey('postPluginsAvailableRefresh', options)
];

export const postPluginsAvailableRefreshOptions = (options?: Options<PostPluginsAvailableRefreshData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postPluginsAvailableRefresh({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPluginsAvailableRefreshQueryKey(options)
    });
};

export const postPluginsAvailableRefreshMutation = (options?: Partial<Options<PostPluginsAvailableRefreshData>>) => {
    const mutationOptions: UseMutationOptions<PostPluginsAvailableRefreshResponse, PostPluginsAvailableRefreshError, Options<PostPluginsAvailableRefreshData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postPluginsAvailableRefresh({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deletePluginsByNameMutation = (options?: Partial<Options<DeletePluginsByNameData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeletePluginsByNameError, Options<DeletePluginsByNameData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deletePluginsByName({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPluginsByNameQueryKey = (options: Options<GetPluginsByNameData>) => [
    createQueryKey('getPluginsByName', options)
];

export const getPluginsByNameOptions = (options: Options<GetPluginsByNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPluginsByName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPluginsByNameQueryKey(options)
    });
};

export const putPluginsByNameMutation = (options?: Partial<Options<PutPluginsByNameData>>) => {
    const mutationOptions: UseMutationOptions<PutPluginsByNameResponse, PutPluginsByNameError, Options<PutPluginsByNameData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putPluginsByName({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postPluginsByNameDeployQueryKey = (options: Options<PostPluginsByNameDeployData>) => [
    createQueryKey('postPluginsByNameDeploy', options)
];

export const postPluginsByNameDeployOptions = (options: Options<PostPluginsByNameDeployData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postPluginsByNameDeploy({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPluginsByNameDeployQueryKey(options)
    });
};

export const postPluginsByNameDeployMutation = (options?: Partial<Options<PostPluginsByNameDeployData>>) => {
    const mutationOptions: UseMutationOptions<unknown, PostPluginsByNameDeployError, Options<PostPluginsByNameDeployData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postPluginsByNameDeploy({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPluginsByNameDeploymentStatusQueryKey = (options: Options<GetPluginsByNameDeploymentStatusData>) => [
    createQueryKey('getPluginsByNameDeploymentStatus', options)
];

export const getPluginsByNameDeploymentStatusOptions = (options: Options<GetPluginsByNameDeploymentStatusData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPluginsByNameDeploymentStatus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPluginsByNameDeploymentStatusQueryKey(options)
    });
};

export const postPluginsByNameResumeQueryKey = (options: Options<PostPluginsByNameResumeData>) => [
    createQueryKey('postPluginsByNameResume', options)
];

export const postPluginsByNameResumeOptions = (options: Options<PostPluginsByNameResumeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postPluginsByNameResume({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPluginsByNameResumeQueryKey(options)
    });
};

export const postPluginsByNameResumeMutation = (options?: Partial<Options<PostPluginsByNameResumeData>>) => {
    const mutationOptions: UseMutationOptions<PostPluginsByNameResumeResponse, PostPluginsByNameResumeError, Options<PostPluginsByNameResumeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postPluginsByNameResume({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getPluginsByNameServicesQueryKey = (options: Options<GetPluginsByNameServicesData>) => [
    createQueryKey('getPluginsByNameServices', options)
];

export const getPluginsByNameServicesOptions = (options: Options<GetPluginsByNameServicesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPluginsByNameServices({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPluginsByNameServicesQueryKey(options)
    });
};

export const getPluginsByNameStatusQueryKey = (options: Options<GetPluginsByNameStatusData>) => [
    createQueryKey('getPluginsByNameStatus', options)
];

export const getPluginsByNameStatusOptions = (options: Options<GetPluginsByNameStatusData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getPluginsByNameStatus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getPluginsByNameStatusQueryKey(options)
    });
};

export const postPluginsByNameStopQueryKey = (options: Options<PostPluginsByNameStopData>) => [
    createQueryKey('postPluginsByNameStop', options)
];

export const postPluginsByNameStopOptions = (options: Options<PostPluginsByNameStopData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postPluginsByNameStop({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postPluginsByNameStopQueryKey(options)
    });
};

export const postPluginsByNameStopMutation = (options?: Partial<Options<PostPluginsByNameStopData>>) => {
    const mutationOptions: UseMutationOptions<unknown, PostPluginsByNameStopError, Options<PostPluginsByNameStopData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postPluginsByNameStop({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postProjectsByProjectIdDirsCreateQueryKey = (options: Options<PostProjectsByProjectIdDirsCreateData>) => [
    createQueryKey('postProjectsByProjectIdDirsCreate', options)
];

export const postProjectsByProjectIdDirsCreateOptions = (options: Options<PostProjectsByProjectIdDirsCreateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postProjectsByProjectIdDirsCreate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postProjectsByProjectIdDirsCreateQueryKey(options)
    });
};

export const postProjectsByProjectIdDirsCreateMutation = (options?: Partial<Options<PostProjectsByProjectIdDirsCreateData>>) => {
    const mutationOptions: UseMutationOptions<PostProjectsByProjectIdDirsCreateResponse, PostProjectsByProjectIdDirsCreateError, Options<PostProjectsByProjectIdDirsCreateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postProjectsByProjectIdDirsCreate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteProjectsByProjectIdDirsDeleteMutation = (options?: Partial<Options<DeleteProjectsByProjectIdDirsDeleteData>>) => {
    const mutationOptions: UseMutationOptions<DeleteProjectsByProjectIdDirsDeleteResponse, DeleteProjectsByProjectIdDirsDeleteError, Options<DeleteProjectsByProjectIdDirsDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteProjectsByProjectIdDirsDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProjectsByProjectIdDirsListQueryKey = (options: Options<GetProjectsByProjectIdDirsListData>) => [
    createQueryKey('getProjectsByProjectIdDirsList', options)
];

export const getProjectsByProjectIdDirsListOptions = (options: Options<GetProjectsByProjectIdDirsListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProjectsByProjectIdDirsList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProjectsByProjectIdDirsListQueryKey(options)
    });
};

export const deleteProjectsByProjectIdFilesDeleteMutation = (options?: Partial<Options<DeleteProjectsByProjectIdFilesDeleteData>>) => {
    const mutationOptions: UseMutationOptions<DeleteProjectsByProjectIdFilesDeleteResponse, DeleteProjectsByProjectIdFilesDeleteError, Options<DeleteProjectsByProjectIdFilesDeleteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteProjectsByProjectIdFilesDelete({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getProjectsByProjectIdFilesEntriesQueryKey = (options: Options<GetProjectsByProjectIdFilesEntriesData>) => [
    createQueryKey('getProjectsByProjectIdFilesEntries', options)
];

export const getProjectsByProjectIdFilesEntriesOptions = (options: Options<GetProjectsByProjectIdFilesEntriesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProjectsByProjectIdFilesEntries({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProjectsByProjectIdFilesEntriesQueryKey(options)
    });
};

export const getProjectsByProjectIdFilesListQueryKey = (options: Options<GetProjectsByProjectIdFilesListData>) => [
    createQueryKey('getProjectsByProjectIdFilesList', options)
];

export const getProjectsByProjectIdFilesListOptions = (options: Options<GetProjectsByProjectIdFilesListData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProjectsByProjectIdFilesList({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProjectsByProjectIdFilesListQueryKey(options)
    });
};

export const getProjectsByProjectIdFilesReadQueryKey = (options: Options<GetProjectsByProjectIdFilesReadData>) => [
    createQueryKey('getProjectsByProjectIdFilesRead', options)
];

export const getProjectsByProjectIdFilesReadOptions = (options: Options<GetProjectsByProjectIdFilesReadData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProjectsByProjectIdFilesRead({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProjectsByProjectIdFilesReadQueryKey(options)
    });
};

export const postProjectsByProjectIdFilesWriteQueryKey = (options: Options<PostProjectsByProjectIdFilesWriteData>) => [
    createQueryKey('postProjectsByProjectIdFilesWrite', options)
];

export const postProjectsByProjectIdFilesWriteOptions = (options: Options<PostProjectsByProjectIdFilesWriteData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postProjectsByProjectIdFilesWrite({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postProjectsByProjectIdFilesWriteQueryKey(options)
    });
};

export const postProjectsByProjectIdFilesWriteMutation = (options?: Partial<Options<PostProjectsByProjectIdFilesWriteData>>) => {
    const mutationOptions: UseMutationOptions<PostProjectsByProjectIdFilesWriteResponse, PostProjectsByProjectIdFilesWriteError, Options<PostProjectsByProjectIdFilesWriteData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postProjectsByProjectIdFilesWrite({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postScBesuDeployQueryKey = (options: Options<PostScBesuDeployData>) => [
    createQueryKey('postScBesuDeploy', options)
];

export const postScBesuDeployOptions = (options: Options<PostScBesuDeployData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postScBesuDeploy({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postScBesuDeployQueryKey(options)
    });
};

export const postScBesuDeployMutation = (options?: Partial<Options<PostScBesuDeployData>>) => {
    const mutationOptions: UseMutationOptions<PostScBesuDeployResponse, PostScBesuDeployError, Options<PostScBesuDeployData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postScBesuDeploy({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getScFabricChaincodesQueryKey = (options?: Options<GetScFabricChaincodesData>) => [
    createQueryKey('getScFabricChaincodes', options)
];

export const getScFabricChaincodesOptions = (options?: Options<GetScFabricChaincodesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getScFabricChaincodes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getScFabricChaincodesQueryKey(options)
    });
};

export const postScFabricChaincodesQueryKey = (options: Options<PostScFabricChaincodesData>) => [
    createQueryKey('postScFabricChaincodes', options)
];

export const postScFabricChaincodesOptions = (options: Options<PostScFabricChaincodesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postScFabricChaincodes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postScFabricChaincodesQueryKey(options)
    });
};

export const postScFabricChaincodesMutation = (options?: Partial<Options<PostScFabricChaincodesData>>) => {
    const mutationOptions: UseMutationOptions<PostScFabricChaincodesResponse, PostScFabricChaincodesError, Options<PostScFabricChaincodesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postScFabricChaincodes({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getScFabricChaincodesByChaincodeIdDefinitionsQueryKey = (options: Options<GetScFabricChaincodesByChaincodeIdDefinitionsData>) => [
    createQueryKey('getScFabricChaincodesByChaincodeIdDefinitions', options)
];

export const getScFabricChaincodesByChaincodeIdDefinitionsOptions = (options: Options<GetScFabricChaincodesByChaincodeIdDefinitionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getScFabricChaincodesByChaincodeIdDefinitions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getScFabricChaincodesByChaincodeIdDefinitionsQueryKey(options)
    });
};

export const postScFabricChaincodesByChaincodeIdDefinitionsQueryKey = (options: Options<PostScFabricChaincodesByChaincodeIdDefinitionsData>) => [
    createQueryKey('postScFabricChaincodesByChaincodeIdDefinitions', options)
];

export const postScFabricChaincodesByChaincodeIdDefinitionsOptions = (options: Options<PostScFabricChaincodesByChaincodeIdDefinitionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postScFabricChaincodesByChaincodeIdDefinitions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postScFabricChaincodesByChaincodeIdDefinitionsQueryKey(options)
    });
};

export const postScFabricChaincodesByChaincodeIdDefinitionsMutation = (options?: Partial<Options<PostScFabricChaincodesByChaincodeIdDefinitionsData>>) => {
    const mutationOptions: UseMutationOptions<PostScFabricChaincodesByChaincodeIdDefinitionsResponse, PostScFabricChaincodesByChaincodeIdDefinitionsError, Options<PostScFabricChaincodesByChaincodeIdDefinitionsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postScFabricChaincodesByChaincodeIdDefinitions({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getScFabricChaincodesByIdQueryKey = (options: Options<GetScFabricChaincodesByIdData>) => [
    createQueryKey('getScFabricChaincodesById', options)
];

export const getScFabricChaincodesByIdOptions = (options: Options<GetScFabricChaincodesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getScFabricChaincodesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getScFabricChaincodesByIdQueryKey(options)
    });
};

export const deleteScFabricDefinitionsByDefinitionIdMutation = (options?: Partial<Options<DeleteScFabricDefinitionsByDefinitionIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteScFabricDefinitionsByDefinitionIdResponse, DeleteScFabricDefinitionsByDefinitionIdError, Options<DeleteScFabricDefinitionsByDefinitionIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteScFabricDefinitionsByDefinitionId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putScFabricDefinitionsByDefinitionIdMutation = (options?: Partial<Options<PutScFabricDefinitionsByDefinitionIdData>>) => {
    const mutationOptions: UseMutationOptions<PutScFabricDefinitionsByDefinitionIdResponse, PutScFabricDefinitionsByDefinitionIdError, Options<PutScFabricDefinitionsByDefinitionIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putScFabricDefinitionsByDefinitionId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postScFabricDefinitionsByDefinitionIdApproveQueryKey = (options: Options<PostScFabricDefinitionsByDefinitionIdApproveData>) => [
    createQueryKey('postScFabricDefinitionsByDefinitionIdApprove', options)
];

export const postScFabricDefinitionsByDefinitionIdApproveOptions = (options: Options<PostScFabricDefinitionsByDefinitionIdApproveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postScFabricDefinitionsByDefinitionIdApprove({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postScFabricDefinitionsByDefinitionIdApproveQueryKey(options)
    });
};

export const postScFabricDefinitionsByDefinitionIdApproveMutation = (options?: Partial<Options<PostScFabricDefinitionsByDefinitionIdApproveData>>) => {
    const mutationOptions: UseMutationOptions<PostScFabricDefinitionsByDefinitionIdApproveResponse, PostScFabricDefinitionsByDefinitionIdApproveError, Options<PostScFabricDefinitionsByDefinitionIdApproveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postScFabricDefinitionsByDefinitionIdApprove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postScFabricDefinitionsByDefinitionIdCommitQueryKey = (options: Options<PostScFabricDefinitionsByDefinitionIdCommitData>) => [
    createQueryKey('postScFabricDefinitionsByDefinitionIdCommit', options)
];

export const postScFabricDefinitionsByDefinitionIdCommitOptions = (options: Options<PostScFabricDefinitionsByDefinitionIdCommitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postScFabricDefinitionsByDefinitionIdCommit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postScFabricDefinitionsByDefinitionIdCommitQueryKey(options)
    });
};

export const postScFabricDefinitionsByDefinitionIdCommitMutation = (options?: Partial<Options<PostScFabricDefinitionsByDefinitionIdCommitData>>) => {
    const mutationOptions: UseMutationOptions<PostScFabricDefinitionsByDefinitionIdCommitResponse, PostScFabricDefinitionsByDefinitionIdCommitError, Options<PostScFabricDefinitionsByDefinitionIdCommitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postScFabricDefinitionsByDefinitionIdCommit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postScFabricDefinitionsByDefinitionIdDeployQueryKey = (options: Options<PostScFabricDefinitionsByDefinitionIdDeployData>) => [
    createQueryKey('postScFabricDefinitionsByDefinitionIdDeploy', options)
];

export const postScFabricDefinitionsByDefinitionIdDeployOptions = (options: Options<PostScFabricDefinitionsByDefinitionIdDeployData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postScFabricDefinitionsByDefinitionIdDeploy({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postScFabricDefinitionsByDefinitionIdDeployQueryKey(options)
    });
};

export const postScFabricDefinitionsByDefinitionIdDeployMutation = (options?: Partial<Options<PostScFabricDefinitionsByDefinitionIdDeployData>>) => {
    const mutationOptions: UseMutationOptions<PostScFabricDefinitionsByDefinitionIdDeployResponse, PostScFabricDefinitionsByDefinitionIdDeployError, Options<PostScFabricDefinitionsByDefinitionIdDeployData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postScFabricDefinitionsByDefinitionIdDeploy({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postScFabricDefinitionsByDefinitionIdInstallQueryKey = (options: Options<PostScFabricDefinitionsByDefinitionIdInstallData>) => [
    createQueryKey('postScFabricDefinitionsByDefinitionIdInstall', options)
];

export const postScFabricDefinitionsByDefinitionIdInstallOptions = (options: Options<PostScFabricDefinitionsByDefinitionIdInstallData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postScFabricDefinitionsByDefinitionIdInstall({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postScFabricDefinitionsByDefinitionIdInstallQueryKey(options)
    });
};

export const postScFabricDefinitionsByDefinitionIdInstallMutation = (options?: Partial<Options<PostScFabricDefinitionsByDefinitionIdInstallData>>) => {
    const mutationOptions: UseMutationOptions<PostScFabricDefinitionsByDefinitionIdInstallResponse, PostScFabricDefinitionsByDefinitionIdInstallError, Options<PostScFabricDefinitionsByDefinitionIdInstallData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postScFabricDefinitionsByDefinitionIdInstall({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getScFabricDefinitionsByDefinitionIdTimelineQueryKey = (options: Options<GetScFabricDefinitionsByDefinitionIdTimelineData>) => [
    createQueryKey('getScFabricDefinitionsByDefinitionIdTimeline', options)
];

export const getScFabricDefinitionsByDefinitionIdTimelineOptions = (options: Options<GetScFabricDefinitionsByDefinitionIdTimelineData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getScFabricDefinitionsByDefinitionIdTimeline({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getScFabricDefinitionsByDefinitionIdTimelineQueryKey(options)
    });
};

export const postScFabricDeployQueryKey = (options: Options<PostScFabricDeployData>) => [
    createQueryKey('postScFabricDeploy', options)
];

export const postScFabricDeployOptions = (options: Options<PostScFabricDeployData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postScFabricDeploy({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postScFabricDeployQueryKey(options)
    });
};

export const postScFabricDeployMutation = (options?: Partial<Options<PostScFabricDeployData>>) => {
    const mutationOptions: UseMutationOptions<PostScFabricDeployResponse, PostScFabricDeployError, Options<PostScFabricDeployData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postScFabricDeploy({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postScFabricDockerDeployQueryKey = (options: Options<PostScFabricDockerDeployData>) => [
    createQueryKey('postScFabricDockerDeploy', options)
];

export const postScFabricDockerDeployOptions = (options: Options<PostScFabricDockerDeployData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postScFabricDockerDeploy({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postScFabricDockerDeployQueryKey(options)
    });
};

export const postScFabricDockerDeployMutation = (options?: Partial<Options<PostScFabricDockerDeployData>>) => {
    const mutationOptions: UseMutationOptions<PostScFabricDockerDeployResponse, PostScFabricDockerDeployError, Options<PostScFabricDockerDeployData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postScFabricDockerDeploy({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postScFabricPeerByPeerIdChaincodeApproveQueryKey = (options: Options<PostScFabricPeerByPeerIdChaincodeApproveData>) => [
    createQueryKey('postScFabricPeerByPeerIdChaincodeApprove', options)
];

export const postScFabricPeerByPeerIdChaincodeApproveOptions = (options: Options<PostScFabricPeerByPeerIdChaincodeApproveData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postScFabricPeerByPeerIdChaincodeApprove({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postScFabricPeerByPeerIdChaincodeApproveQueryKey(options)
    });
};

export const postScFabricPeerByPeerIdChaincodeApproveMutation = (options?: Partial<Options<PostScFabricPeerByPeerIdChaincodeApproveData>>) => {
    const mutationOptions: UseMutationOptions<PostScFabricPeerByPeerIdChaincodeApproveResponse, PostScFabricPeerByPeerIdChaincodeApproveError, Options<PostScFabricPeerByPeerIdChaincodeApproveData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postScFabricPeerByPeerIdChaincodeApprove({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postScFabricPeerByPeerIdChaincodeCommitQueryKey = (options: Options<PostScFabricPeerByPeerIdChaincodeCommitData>) => [
    createQueryKey('postScFabricPeerByPeerIdChaincodeCommit', options)
];

export const postScFabricPeerByPeerIdChaincodeCommitOptions = (options: Options<PostScFabricPeerByPeerIdChaincodeCommitData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postScFabricPeerByPeerIdChaincodeCommit({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postScFabricPeerByPeerIdChaincodeCommitQueryKey(options)
    });
};

export const postScFabricPeerByPeerIdChaincodeCommitMutation = (options?: Partial<Options<PostScFabricPeerByPeerIdChaincodeCommitData>>) => {
    const mutationOptions: UseMutationOptions<PostScFabricPeerByPeerIdChaincodeCommitResponse, PostScFabricPeerByPeerIdChaincodeCommitError, Options<PostScFabricPeerByPeerIdChaincodeCommitData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postScFabricPeerByPeerIdChaincodeCommit({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postScFabricPeerByPeerIdChaincodeInstallQueryKey = (options: Options<PostScFabricPeerByPeerIdChaincodeInstallData>) => [
    createQueryKey('postScFabricPeerByPeerIdChaincodeInstall', options)
];

export const postScFabricPeerByPeerIdChaincodeInstallOptions = (options: Options<PostScFabricPeerByPeerIdChaincodeInstallData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postScFabricPeerByPeerIdChaincodeInstall({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postScFabricPeerByPeerIdChaincodeInstallQueryKey(options)
    });
};

export const postScFabricPeerByPeerIdChaincodeInstallMutation = (options?: Partial<Options<PostScFabricPeerByPeerIdChaincodeInstallData>>) => {
    const mutationOptions: UseMutationOptions<PostScFabricPeerByPeerIdChaincodeInstallResponse, PostScFabricPeerByPeerIdChaincodeInstallError, Options<PostScFabricPeerByPeerIdChaincodeInstallData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postScFabricPeerByPeerIdChaincodeInstall({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSettingsQueryKey = (options?: Options<GetSettingsData>) => [
    createQueryKey('getSettings', options)
];

export const getSettingsOptions = (options?: Options<GetSettingsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSettings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSettingsQueryKey(options)
    });
};

export const postSettingsQueryKey = (options: Options<PostSettingsData>) => [
    createQueryKey('postSettings', options)
];

export const postSettingsOptions = (options: Options<PostSettingsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postSettings({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postSettingsQueryKey(options)
    });
};

export const postSettingsMutation = (options?: Partial<Options<PostSettingsData>>) => {
    const mutationOptions: UseMutationOptions<PostSettingsResponse, DefaultError, Options<PostSettingsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postSettings({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUsersQueryKey = (options?: Options<GetUsersData>) => [
    createQueryKey('getUsers', options)
];

export const getUsersOptions = (options?: Options<GetUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersQueryKey(options)
    });
};

export const postUsersQueryKey = (options: Options<PostUsersData>) => [
    createQueryKey('postUsers', options)
];

export const postUsersOptions = (options: Options<PostUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postUsersQueryKey(options)
    });
};

export const postUsersMutation = (options?: Partial<Options<PostUsersData>>) => {
    const mutationOptions: UseMutationOptions<PostUsersResponse, PostUsersError, Options<PostUsersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postUsers({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteUsersByIdMutation = (options?: Partial<Options<DeleteUsersByIdData>>) => {
    const mutationOptions: UseMutationOptions<unknown, DeleteUsersByIdError, Options<DeleteUsersByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUsersById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUsersByIdQueryKey = (options: Options<GetUsersByIdData>) => [
    createQueryKey('getUsersById', options)
];

export const getUsersByIdOptions = (options: Options<GetUsersByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUsersById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersByIdQueryKey(options)
    });
};

export const putUsersByIdMutation = (options?: Partial<Options<PutUsersByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutUsersByIdResponse, PutUsersByIdError, Options<PutUsersByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putUsersById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putUsersByIdPasswordMutation = (options?: Partial<Options<PutUsersByIdPasswordData>>) => {
    const mutationOptions: UseMutationOptions<PutUsersByIdPasswordResponse, PutUsersByIdPasswordError, Options<PutUsersByIdPasswordData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putUsersByIdPassword({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putUsersByIdRoleMutation = (options?: Partial<Options<PutUsersByIdRoleData>>) => {
    const mutationOptions: UseMutationOptions<PutUsersByIdRoleResponse, PutUsersByIdRoleError, Options<PutUsersByIdRoleData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putUsersByIdRole({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};