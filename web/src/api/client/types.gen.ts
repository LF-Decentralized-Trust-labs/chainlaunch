// This file is auto-generated by @hey-api/openapi-ts

export type AiChatMessage = {
    content?: string;
    parts?: Array<AiChatMessagePart>;
    role?: string;
};

export type AiChatMessagePart = {
    text?: string;
    type?: string;
};

export type AiChatRequest = {
    id?: string;
    messages?: Array<AiChatMessage>;
    projectId?: string;
};

export type AiConversationDetail = {
    id?: number;
    messages?: Array<AiMessage>;
    projectId?: number;
    startedAt?: string;
};

export type AiConversationResponse = {
    id?: number;
    projectId?: number;
    startedAt?: string;
};

export type AiGenerateRequest = {
    projectId?: number;
    prompt?: string;
};

export type AiGenerateResponse = {
    code?: string;
};

export type AiMessage = {
    content?: string;
    conversationId?: number;
    createdAt?: string;
    id?: number;
    sender?: string;
    toolCalls?: Array<DbToolCall>;
};

export type AiModel = {
    description?: string;
    maxTokens?: number;
    name?: string;
};

export type AuditEvent = {
    affectedResource?: string;
    details?: {
        [key: string]: unknown;
    };
    eventOutcome?: AuditEventOutcome;
    eventSource?: string;
    eventType?: string;
    id?: number;
    requestId?: string;
    sessionId?: string;
    severity?: AuditSeverity;
    sourceIp?: string;
    timestamp?: string;
    userIdentity?: number;
};

export type AuditEventOutcome = 'SUCCESS' | 'FAILURE' | 'PENDING';

export type AuditListLogsResponse = {
    items?: Array<AuditEvent>;
    page?: number;
    page_size?: number;
    total_count?: number;
};

export type AuditSeverity = 'DEBUG' | 'INFO' | 'WARNING' | 'CRITICAL';

export type AuthChangePasswordRequest = {
    current_password: string;
    new_password: string;
};

export type AuthCreateUserRequest = {
    password: string;
    role: 'admin' | 'manager' | 'viewer';
    username: string;
};

export type AuthLoginRequest = {
    password?: string;
    username?: string;
};

export type AuthLoginResponse = {
    message?: string;
};

export type AuthLogoutResponse = {
    message?: string;
};

export type AuthRole = 'admin' | 'manager' | 'viewer';

export type AuthUpdateUserRequest = {
    role?: 'admin' | 'manager' | 'viewer';
    username?: string;
};

export type AuthUserResponse = {
    created_at?: string;
    id?: number;
    last_login_at?: string;
    role?: AuthRole;
    username?: string;
};

export type BlockBlock = {
    createdAt?: string;
    dataHash?: string;
    number?: number;
    transactions?: Array<BlockTransaction>;
};

export type BlockTransaction = {
    chaincodeId?: string;
    channelId?: string;
    createdAt?: string;
    event?: BlockTransactionEvent;
    id?: string;
    path?: string;
    reads?: Array<BlockTransactionRead>;
    request?: Array<number>;
    response?: Array<number>;
    type?: BlockTxType;
    version?: string;
    writes?: Array<BlockTransactionWrite>;
};

export type BlockTransactionEvent = {
    name?: string;
    value?: string;
};

export type BlockTransactionRead = {
    blockNumVersion?: number;
    chaincodeId?: string;
    key?: string;
    txNumVersion?: number;
};

export type BlockTransactionWrite = {
    chaincodeId?: string;
    deleted?: boolean;
    key?: string;
    value?: string;
};

export type BlockTxType = 'MESSAGE' | 'CONFIG' | 'CONFIG_UPDATE' | 'ENDORSER_TRANSACTION' | 'ORDERER_TRANSACTION' | 'DELIVER_SEEK_INFO' | 'CHAINCODE_PACKAGE';

export type BoilerplatesBoilerplateConfig = {
    args?: Array<string>;
    command?: string;
    description?: string;
    /**
     * ID is the key in the configs map
     */
    id?: string;
    image?: string;
    name?: string;
    platform?: string;
    repoName?: string;
    repoOwner?: string;
    repoPath?: string;
};

export type ChaincodeGateway = {
    [key: string]: unknown;
};

export type ChaincodePeer = {
    [key: string]: unknown;
};

export type ChainlaunchdeployApproveChaincodeByDefinitionRequest = {
    /**
     * Peer ID to use for approval
     * required: true
     */
    peer_id?: number;
};

export type ChainlaunchdeployBesuDeployRequest = {
    /**
     * Contract ABI (JSON string)
     */
    abi?: string;
    /**
     * Compiled contract bytecode
     */
    bytecode?: Array<number>;
    /**
     * Chain ID for the target network
     */
    chainID?: number;
    /**
     * Constructor arguments for the contract
     */
    constructorArgs?: Array<unknown>;
    /**
     * RPC endpoint for Besu node
     */
    rpcurl?: string;
    /**
     * (Optional) Solidity source code (for reference)
     */
    solidityCode?: string;
};

export type ChainlaunchdeployBesuDeployResponse = {
    message?: string;
    result?: ChainlaunchdeployDeploymentResult;
    status?: string;
};

export type ChainlaunchdeployChaincode = {
    /**
     * ISO8601
     */
    created_at?: string;
    definitions?: Array<ChainlaunchdeployChaincodeDefinition>;
    id?: number;
    name?: string;
    network_id?: number;
    /**
     * Name of the network
     */
    network_name?: string;
    /**
     * Platform/type (fabric/besu/etc)
     */
    network_platform?: string;
};

export type ChainlaunchdeployChaincodeDefinition = {
    chaincode_address?: string;
    chaincode_id?: number;
    /**
     * ISO8601
     */
    created_at?: string;
    docker_image?: string;
    endorsement_policy?: string;
    id?: number;
    peer_statuses?: Array<ChainlaunchdeployPeerStatus>;
    sequence?: number;
    version?: string;
};

export type ChainlaunchdeployChaincodeDefinitionEvent = {
    created_at?: string;
    definition_id?: number;
    event_data?: unknown;
    event_type?: string;
    id?: number;
};

export type ChainlaunchdeployChaincodeDefinitionResponse = {
    chaincode_address?: string;
    chaincode_id?: number;
    created_at?: string;
    docker_image?: string;
    endorsement_policy?: string;
    id?: number;
    sequence?: number;
    version?: string;
};

export type ChainlaunchdeployChaincodeResponse = {
    created_at?: string;
    id?: number;
    name?: string;
    network_id?: number;
    network_name?: string;
    network_platform?: string;
};

export type ChainlaunchdeployCommitChaincodeByDefinitionRequest = {
    /**
     * Peer ID to use for commit
     * required: true
     */
    peer_id?: number;
};

export type ChainlaunchdeployCreateChaincodeDefinitionRequest = {
    /**
     * Chaincode address
     */
    chaincode_address?: string;
    /**
     * Chaincode ID
     * required: true
     */
    chaincode_id?: number;
    /**
     * Docker image
     * required: true
     */
    docker_image?: string;
    /**
     * Endorsement policy
     */
    endorsement_policy?: string;
    /**
     * Sequence
     * required: true
     */
    sequence?: number;
    /**
     * Version
     * required: true
     */
    version?: string;
};

export type ChainlaunchdeployCreateChaincodeDefinitionResponse = {
    definition?: ChainlaunchdeployChaincodeDefinitionResponse;
};

export type ChainlaunchdeployCreateChaincodeRequest = {
    /**
     * Name of the chaincode
     * required: true
     */
    name?: string;
    /**
     * Network ID
     * required: true
     */
    network_id?: number;
};

export type ChainlaunchdeployCreateChaincodeResponse = {
    chaincode?: ChainlaunchdeployChaincodeResponse;
};

export type ChainlaunchdeployDeployChaincodeByDefinitionRequest = {
    [key: string]: unknown;
};

export type ChainlaunchdeployDeploymentResult = {
    /**
     * For Fabric
     */
    chaincodeID?: string;
    /**
     * For EVM
     */
    contractAddress?: string;
    error?: unknown;
    logs?: string;
    success?: boolean;
    /**
     * For EVM
     */
    transactionHash?: string;
};

export type ChainlaunchdeployDockerContainerInfo = {
    created?: number;
    id?: string;
    image?: string;
    name?: string;
    ports?: Array<string>;
    state?: string;
    status?: string;
};

export type ChainlaunchdeployFabricApproveRequest = {
    channelID?: string;
    endorsementPolicy?: string;
    initRequired?: boolean;
    name?: string;
    packageID?: string;
    sequence?: number;
    version?: string;
};

export type ChainlaunchdeployFabricApproveResponse = {
    message?: string;
    result?: ChainlaunchdeployDeploymentResult;
    status?: string;
};

export type ChainlaunchdeployFabricChaincodeApproveParams = {
    channelID?: string;
    /**
     * Serialized CollectionConfigPackage
     */
    collectionsConfig?: Array<number>;
    endorsementPolicy?: string;
    gateway?: ChaincodeGateway;
    initRequired?: boolean;
    name?: string;
    packageID?: string;
    sequence?: number;
    version?: string;
};

export type ChainlaunchdeployFabricChaincodeCommitParams = {
    channelID?: string;
    /**
     * Serialized CollectionConfigPackage
     */
    collectionsConfig?: Array<number>;
    endorsementPolicy?: string;
    gateway?: ChaincodeGateway;
    initRequired?: boolean;
    name?: string;
    sequence?: number;
    version?: string;
};

export type ChainlaunchdeployFabricChaincodeDetail = {
    chaincode?: ChainlaunchdeployChaincode;
    definitions?: Array<ChainlaunchdeployChaincodeDefinition>;
    docker_info?: ChainlaunchdeployDockerContainerInfo;
};

export type ChainlaunchdeployFabricChaincodeDockerDeployRequest = {
    /**
     * optional, defaults to 7052
     */
    container_port?: number;
    docker_image: string;
    /**
     * optional, if 0 a free port is chosen
     */
    host_port?: number;
    name: string;
    package_id: string;
    /**
     * optional, for updates
     */
    slug?: string;
};

export type ChainlaunchdeployFabricChaincodeDockerDeployResponse = {
    message?: string;
    result?: ChainlaunchdeployDeploymentResult;
    slug?: string;
    status?: string;
};

export type ChainlaunchdeployFabricChaincodeInstallParams = {
    /**
     * Chaincode label
     */
    label?: string;
    /**
     * Chaincode package bytes
     */
    packageBytes?: Array<number>;
    peer?: ChaincodePeer;
};

export type ChainlaunchdeployFabricCommitRequest = {
    channelID?: string;
    endorsementPolicy?: string;
    initRequired?: boolean;
    name?: string;
    sequence?: number;
    version?: string;
};

export type ChainlaunchdeployFabricCommitResponse = {
    message?: string;
    result?: ChainlaunchdeployDeploymentResult;
    status?: string;
};

export type ChainlaunchdeployFabricDeployRequest = {
    approveParams?: ChainlaunchdeployFabricChaincodeApproveParams;
    commitParams?: ChainlaunchdeployFabricChaincodeCommitParams;
    installParams?: ChainlaunchdeployFabricChaincodeInstallParams;
};

export type ChainlaunchdeployFabricDeployResponse = {
    message?: string;
    result?: ChainlaunchdeployDeploymentResult;
    status?: string;
};

export type ChainlaunchdeployFabricInstallRequest = {
    label: string;
    package_bytes: Array<number>;
};

export type ChainlaunchdeployFabricInstallResponse = {
    message?: string;
    result?: ChainlaunchdeployDeploymentResult;
    status?: string;
};

export type ChainlaunchdeployInstallChaincodeByDefinitionRequest = {
    /**
     * Peer IDs to install the chaincode on
     * required: true
     */
    peer_ids?: Array<number>;
};

export type ChainlaunchdeployListChaincodeDefinitionsResponse = {
    definitions?: Array<ChainlaunchdeployChaincodeDefinitionResponse>;
};

export type ChainlaunchdeployListChaincodesResponse = {
    chaincodes?: Array<ChainlaunchdeployChaincodeResponse>;
};

export type ChainlaunchdeployPeerStatus = {
    definition_id?: number;
    id?: number;
    /**
     * ISO8601
     */
    last_updated?: string;
    peer_id?: number;
    status?: string;
};

export type ChainlaunchdeployUpdateChaincodeDefinitionRequest = {
    /**
     * Chaincode address
     */
    chaincode_address?: string;
    /**
     * Docker image
     * required: true
     */
    docker_image?: string;
    /**
     * Endorsement policy
     */
    endorsement_policy?: string;
    /**
     * Sequence
     * required: true
     */
    sequence?: number;
    /**
     * Version
     * required: true
     */
    version?: string;
};

export type CommonQueryResult = {
    data?: {
        result?: Array<{
            metric?: {
                [key: string]: string;
            };
            /**
             * For instant queries
             */
            value?: Array<unknown>;
            /**
             * For range queries (matrix)
             */
            values?: Array<Array<unknown>>;
        }>;
        resultType?: string;
    };
    status?: string;
};

export type DbToolCall = {
    arguments?: string;
    createdAt?: string;
    error?: SqlNullString;
    id?: number;
    messageId?: number;
    result?: SqlNullString;
    toolName?: string;
};

export type DirsCreateDirRequest = {
    dir?: string;
    project?: string;
};

export type DirsCreateDirResponse = {
    status?: string;
};

export type DirsDeleteDirResponse = {
    status?: string;
};

/**
 * Unified response for listing files and directories in a directory
 */
export type DirsListEntriesResponse = {
    directories?: Array<string>;
    files?: Array<string>;
    skipped?: Array<string>;
};

export type FilesDeleteFileResponse = {
    status?: string;
};

export type FilesDirectoryTreeNode = {
    children?: Array<FilesDirectoryTreeNode>;
    isDir?: boolean;
    name?: string;
    path?: string;
};

export type FilesListFilesResponse = {
    files?: Array<string>;
};

export type FilesReadFileResponse = {
    content?: string;
};

export type FilesWriteFileRequest = {
    content?: string;
    path?: string;
    project?: string;
};

export type FilesWriteFileResponse = {
    status?: string;
};

export type GithubComChainlaunchChainlaunchPkgMetricsCommonStatus = {
    /**
     * DeploymentMode is the current deployment mode
     */
    deployment_mode?: string;
    /**
     * Error is any error that occurred while getting the status
     */
    error?: string;
    /**
     * Port is the port Prometheus is listening on
     */
    port?: number;
    /**
     * ScrapeInterval is the current scrape interval
     */
    scrape_interval?: TimeDuration;
    /**
     * StartedAt is when the instance was started
     */
    started_at?: string;
    /**
     * Status is the current status of the Prometheus instance (e.g. "running", "stopped", "not_deployed")
     */
    status?: string;
    /**
     * Version is the version of Prometheus being used
     */
    version?: string;
};

export type GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse = {
    code?: number;
    error?: string;
    message?: string;
};

export type GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse = {
    error?: string;
};

export type GithubComChainlaunchChainlaunchPkgPluginTypesParameters = {
    $schema?: string;
    properties?: {
        [key: string]: TypesParameterSpec;
    };
    required?: Array<string>;
    type?: string;
};

export type GithubComChainlaunchChainlaunchPkgPluginTypesPlugin = {
    apiVersion?: string;
    deploymentStatus?: TypesDeploymentStatus;
    kind?: string;
    metadata?: TypesMetadata;
    spec?: TypesSpec;
};

export type GithubComChainlaunchChainlaunchPkgPluginTypesPort = {
    containerPort?: string;
    hostPort?: string;
    protocol?: string;
};

export type HandlerCreateOrganizationRequest = {
    description?: string;
    mspId: string;
    name: string;
    providerId?: number;
};

export type HandlerDeleteRevokedCertificateRequest = {
    /**
     * Hex string of the serial number
     */
    serialNumber?: string;
};

export type HandlerOrganizationResponse = {
    adminSignKeyId?: number;
    adminTlsKeyId?: number;
    clientSignKeyId?: number;
    createdAt?: string;
    description?: string;
    id?: number;
    mspId?: string;
    providerId?: number;
    providerName?: string;
    signCertificate?: string;
    signPublicKey?: string;
    tlsCertificate?: string;
    tlsPublicKey?: string;
    updatedAt?: string;
};

export type HandlerPaginatedOrganizationsResponse = {
    count?: number;
    items?: Array<HandlerOrganizationResponse>;
    limit?: number;
    offset?: number;
};

export type HandlerRevokeCertificateByPemRequest = {
    /**
     * PEM encoded certificate
     */
    certificate?: string;
    revocationReason?: number;
};

export type HandlerRevokeCertificateBySerialRequest = {
    revocationReason?: number;
    /**
     * Hex string of the serial number
     */
    serialNumber?: string;
};

export type HandlerRevokedCertificateResponse = {
    reason?: number;
    revocationTime?: string;
    serialNumber?: string;
};

export type HandlerUpdateOrganizationRequest = {
    description?: string;
};

export type HttpAddConsenterPayload = {
    client_tls_cert: string;
    host: string;
    port: number;
    server_tls_cert: string;
};

export type HttpAddNodeToNetworkRequest = {
    nodeId: number;
    role: 'peer' | 'orderer';
};

export type HttpAddOrgPayload = {
    msp_id: string;
    root_certs: Array<string>;
    tls_root_certs: Array<string>;
};

export type HttpAnchorPeer = {
    host: string;
    port: number;
};

export type HttpBackupResponse = {
    completedAt?: string;
    createdAt?: string;
    errorMessage?: string;
    id?: number;
    metadata?: unknown;
    scheduleId?: number;
    sizeBytes?: number;
    startedAt?: string;
    status?: string;
    targetId?: number;
};

export type HttpBackupScheduleResponse = {
    createdAt?: string;
    cronExpression?: string;
    description?: string;
    enabled?: boolean;
    id?: number;
    lastRunAt?: string;
    name?: string;
    nextRunAt?: string;
    retentionDays?: number;
    targetId?: number;
    updatedAt?: string;
};

export type HttpBackupTargetResponse = {
    accessKeyId?: string;
    bucketName?: string;
    bucketPath?: string;
    createdAt?: string;
    endpoint?: string;
    forcePathStyle?: boolean;
    id?: number;
    name?: string;
    region?: string;
    type?: string;
    updatedAt?: string;
};

export type HttpBesuNetworkResponse = {
    chainId?: number;
    config?: Array<number>;
    createdAt?: string;
    description?: string;
    genesisConfig?: string;
    id?: number;
    name?: string;
    platform?: string;
    status?: string;
    updatedAt?: string;
};

export type HttpBesuNodeDefaultsResponse = {
    defaults?: Array<ServiceBesuNodeDefaults>;
    nodeCount?: number;
};

export type HttpBlockListResponse = {
    blocks?: Array<BlockBlock>;
    total?: number;
};

export type HttpBlockTransactionsResponse = {
    block?: BlockBlock;
};

export type HttpChainInfoResponse = {
    currentBlockHash?: string;
    height?: number;
    previousBlockHash?: string;
};

export type HttpChaincodeResponse = {
    endorsementPlugin?: string;
    endorsementPolicy?: string;
    initRequired?: boolean;
    name?: string;
    sequence?: number;
    validationPlugin?: string;
    version?: string;
};

export type HttpChannelConfigResponse = {
    config?: {
        [key: string]: unknown;
    };
    name?: string;
};

export type HttpChannelResponse = {
    blockNum?: number;
    createdAt?: string;
    name?: string;
};

/**
 * A single configuration update operation
 */
export type HttpConfigUpdateOperationRequest = {
    /**
     * Payload contains the operation-specific data
     * The structure depends on the operation type:
     * - add_org: AddOrgPayload
     * - remove_org: RemoveOrgPayload
     * - update_org_msp: UpdateOrgMSPPayload
     * - set_anchor_peers: SetAnchorPeersPayload
     * - add_consenter: AddConsenterPayload
     * - remove_consenter: RemoveConsenterPayload
     * - update_consenter: UpdateConsenterPayload
     * - update_etcd_raft_options: UpdateEtcdRaftOptionsPayload
     * - update_batch_size: UpdateBatchSizePayload
     * - update_batch_timeout: UpdateBatchTimeoutPayload
     * @Description The payload for the configuration update operation
     * @Description Can be one of:
     * @Description - AddOrgPayload when type is "add_org"
     * @Description - RemoveOrgPayload when type is "remove_org"
     * @Description - UpdateOrgMSPPayload when type is "update_org_msp"
     * @Description - SetAnchorPeersPayload when type is "set_anchor_peers"
     * @Description - AddConsenterPayload when type is "add_consenter"
     * @Description - RemoveConsenterPayload when type is "remove_consenter"
     * @Description - UpdateConsenterPayload when type is "update_consenter"
     * @Description - UpdateEtcdRaftOptionsPayload when type is "update_etcd_raft_options"
     * @Description - UpdateBatchSizePayload when type is "update_batch_size"
     * @Description - UpdateBatchTimeoutPayload when type is "update_batch_timeout"
     */
    payload: Array<number>;
    /**
     * Type is the type of configuration update operation
     * enum: add_org,remove_org,update_org_msp,set_anchor_peers,add_consenter,remove_consenter,update_consenter,update_etcd_raft_options,update_batch_size,update_batch_timeout
     */
    type: 'add_org' | 'remove_org' | 'update_org_msp' | 'set_anchor_peers' | 'add_consenter' | 'remove_consenter' | 'update_consenter' | 'update_etcd_raft_options' | 'update_batch_size' | 'update_batch_timeout';
};

export type HttpConfigUpdateResponse = {
    channel_name?: string;
    created_at?: string;
    created_by?: string;
    id?: string;
    network_id?: number;
    operations?: Array<HttpConfigUpdateOperationRequest>;
    preview_json?: string;
    status?: string;
};

export type HttpConsenterConfig = {
    id: string;
};

export type HttpCreateBackupRequest = {
    metadata?: unknown;
    scheduleId?: number;
    targetId: number;
};

/**
 * Request body for creating a new backup schedule
 */
export type HttpCreateBackupScheduleRequest = {
    /**
     * Cron expression for schedule
     * @Example "0 0 * * *"
     */
    cronExpression: string;
    /**
     * Optional description
     * @Example "Daily backup at midnight"
     */
    description?: string;
    /**
     * Whether the schedule is enabled
     * @Example true
     */
    enabled?: boolean;
    /**
     * Name of the backup schedule
     * @Example "daily-backup"
     */
    name: string;
    /**
     * Number of days to retain backups
     * @Example 30
     */
    retentionDays: number;
    /**
     * ID of the backup target to use
     * @Example 1
     */
    targetId: number;
};

/**
 * Request body for creating a new backup target
 */
export type HttpCreateBackupTargetRequest = {
    /**
     * AWS access key ID (required for S3 type)
     * @Example "AKIAXXXXXXXXXXXXXXXX"
     */
    accessKeyId?: string;
    /**
     * S3 bucket name (required for S3 type)
     * @Example "my-backup-bucket"
     */
    bucketName?: string;
    /**
     * Path within the bucket (required for S3 type)
     * @Example "backups/app1"
     */
    bucketPath?: string;
    /**
     * Custom S3 endpoint (optional)
     * @Example "https://s3.custom-domain.com"
     */
    endpoint?: string;
    /**
     * Use path-style S3 URLs
     * @Example false
     */
    forcePathStyle?: boolean;
    /**
     * Name of the backup target
     * @Example "daily-backup-s3"
     */
    name: string;
    /**
     * AWS region (required for S3 type)
     * @Example "us-east-1"
     */
    region?: string;
    /**
     * AWS secret key (required for S3 type)
     */
    secretKey?: string;
    /**
     * Type of backup target (S3 or LOCAL)
     * @Example "S3"
     */
    type: 'S3' | 'LOCAL';
};

/**
 * Request body for creating a new Besu network
 */
export type HttpCreateBesuNetworkRequest = {
    /**
     * @Description Network configuration
     */
    config: {
        /**
         * @Description Optional initial account balances
         */
        alloc?: {
            [key: string]: {
                /**
                 * @Description Initial balance for the account in hex format (e.g. "0x100000000000000000000000000000000000000000000000000000000000000")
                 */
                balance: string;
            };
        };
        /**
         * @Description Block period in seconds
         * @Default 5
         * @Required
         */
        blockPeriod: number;
        /**
         * @Description Chain ID for the network
         * @Default 1337
         * @Required
         */
        chainId: number;
        /**
         * @Description Optional coinbase address
         */
        coinbase?: string;
        /**
         * @Description Consensus algorithm (e.g. "qbft")
         * @Required
         */
        consensus: string;
        /**
         * @Description Optional difficulty value
         */
        difficulty?: string;
        /**
         * @Description Epoch length in blocks
         * @Default 30000
         * @Required
         */
        epochLength: number;
        /**
         * @Description Optional gas limit value
         */
        gasLimit?: string;
        /**
         * @Description List of initial validator key IDs
         * @Required
         * @MinItems 1
         */
        initialValidatorsKeyIds: Array<number>;
        /**
         * @Description Optional mix hash value
         */
        mixHash?: string;
        /**
         * @Description Optional nonce value
         */
        nonce?: string;
        /**
         * @Description Request timeout in seconds
         * @Required
         */
        requestTimeout: number;
        /**
         * @Description Optional timestamp value
         */
        timestamp?: string;
    };
    /**
     * @Description Optional description of the network
     */
    description?: string;
    /**
     * @Description Name of the network
     */
    name: string;
};

export type HttpCreateFabricNetworkRequest = {
    config: HttpFabricNetworkConfig;
    description?: string;
    name: string;
};

/**
 * Request payload for creating a new node
 */
export type HttpCreateNodeRequest = {
    /**
     * @Description Besu node configuration, required when creating a Besu node
     */
    besuNode?: TypesBesuNodeConfig;
    /**
     * @Description Blockchain platform (fabric or besu)
     */
    blockchainPlatform: TypesBlockchainPlatform;
    /**
     * @Description Fabric orderer configuration, required when creating a Fabric orderer node
     */
    fabricOrderer?: TypesFabricOrdererConfig;
    /**
     * @Description Fabric peer configuration, required when creating a Fabric peer node
     */
    fabricPeer?: TypesFabricPeerConfig;
    /**
     * @Description Name of the node
     */
    name: string;
};

export type HttpCreateProviderRequest = {
    config: unknown;
    isDefault?: boolean;
    name: string;
    notifyBackupFailure?: boolean;
    notifyBackupSuccess?: boolean;
    notifyNodeDowntime?: boolean;
    notifyS3ConnIssue?: boolean;
    type: 'SMTP';
};

export type HttpExternalOrgConfig = {
    consenters?: Array<HttpConsenterConfig>;
    id: string;
    mspid: string;
};

export type HttpFabricNetworkConfig = {
    externalOrdererOrgs?: Array<HttpExternalOrgConfig>;
    externalPeerOrgs?: Array<HttpExternalOrgConfig>;
    ordererOrganizations?: Array<HttpOrganizationConfig>;
    peerOrganizations?: Array<HttpOrganizationConfig>;
};

export type HttpGetNetworkNodesResponse = {
    nodes?: Array<ServiceNetworkNode>;
};

export type HttpImportBesuNetworkRequest = {
    chainId: number;
    description?: string;
    genesisFile: string;
    name: string;
};

export type HttpImportFabricNetworkRequest = {
    description?: string;
    genesisFile: string;
};

export type HttpImportFabricNetworkWithOrgRequest = {
    channelId: string;
    description?: string;
    ordererTlsCert: string;
    ordererUrl: string;
    organizationId: number;
};

export type HttpImportNetworkResponse = {
    message?: string;
    networkId?: string;
};

export type HttpListBesuNetworksResponse = {
    networks?: Array<HttpBesuNetworkResponse>;
    total?: number;
};

export type HttpListNetworksResponse = {
    networks?: Array<HttpNetworkResponse>;
    total?: number;
};

export type HttpNetworkResponse = {
    config?: Array<number>;
    createdAt?: string;
    createdBy?: number;
    currentConfigBlock?: string;
    deploymentConfig?: Array<number>;
    description?: string;
    domain?: string;
    exposedPorts?: Array<number>;
    genesisBlock?: string;
    id?: number;
    name?: string;
    platform?: string;
    status?: string;
    updatedAt?: string;
};

export type HttpNodeChannelsResponse = {
    channels?: Array<HttpChannelResponse>;
    nodeId?: number;
};

export type HttpNodeEventResponse = {
    created_at?: string;
    data?: unknown;
    id?: number;
    node_id?: number;
    type?: string;
};

export type HttpNodeResponse = {
    besuNode?: ServiceBesuNodeProperties;
    createdAt?: string;
    endpoint?: string;
    errorMessage?: string;
    fabricOrderer?: ServiceFabricOrdererProperties;
    fabricPeer?: ServiceFabricPeerProperties;
    id?: number;
    name?: string;
    nodeType?: string;
    platform?: string;
    status?: string;
    updatedAt?: string;
};

export type HttpOrganizationConfig = {
    id: number;
    nodeIds: Array<number>;
};

export type HttpPaginatedNodeEventsResponse = {
    items?: Array<HttpNodeEventResponse>;
    page?: number;
    total?: number;
};

export type HttpPaginatedNodesResponse = {
    hasNextPage?: boolean;
    items?: Array<HttpNodeResponse>;
    page?: number;
    pageCount?: number;
    total?: number;
};

export type HttpProviderResponse = {
    config?: unknown;
    createdAt?: string;
    id?: number;
    isDefault?: boolean;
    lastTestAt?: string;
    lastTestMessage?: string;
    lastTestStatus?: string;
    name?: string;
    notifyBackupFailure?: boolean;
    notifyBackupSuccess?: boolean;
    notifyNodeDowntime?: boolean;
    notifyS3ConnIssue?: boolean;
    type?: NotificationsProviderType;
    updatedAt?: string;
};

export type HttpRemoveConsenterPayload = {
    host: string;
    port: number;
};

export type HttpRemoveOrgPayload = {
    msp_id: string;
};

export type HttpSetAnchorPeersPayload = {
    anchor_peers: Array<{
        host: string;
        port: number;
    }>;
    msp_id: string;
};

export type HttpSetAnchorPeersRequest = {
    anchorPeers: Array<HttpAnchorPeer>;
    organizationId: number;
};

export type HttpSetAnchorPeersResponse = {
    transactionId?: string;
};

export type HttpTestProviderRequest = {
    testEmail: string;
};

export type HttpTestProviderResponse = {
    message?: string;
    status?: string;
    testedAt?: string;
};

export type HttpTransactionResponse = {
    block?: BlockBlock;
};

export type HttpUpdateBackupScheduleRequest = {
    cronExpression: string;
    description?: string;
    enabled?: boolean;
    name: string;
    retentionDays: number;
    targetId: number;
};

export type HttpUpdateBackupTargetRequest = {
    accessKeyId?: string;
    bucketName?: string;
    bucketPath?: string;
    endpoint?: string;
    forcePathStyle?: boolean;
    name: string;
    region?: string;
    secretKey?: string;
    type: 'S3' | 'LOCAL';
};

export type HttpUpdateBatchSizePayload = {
    absolute_max_bytes: number;
    max_message_count: number;
    preferred_max_bytes: number;
};

export type HttpUpdateBatchTimeoutPayload = {
    /**
     * e.g., "2s"
     */
    timeout: string;
};

export type HttpUpdateBesuNodeRequest = {
    bootnodes?: Array<string>;
    env?: {
        [key: string]: string;
    };
    externalIp?: string;
    internalIp?: string;
    metricsEnabled?: boolean;
    metricsPort?: number;
    networkId: number;
    p2pHost: string;
    p2pPort: number;
    rpcHost: string;
    rpcPort: number;
};

export type HttpUpdateConsenterPayload = {
    client_tls_cert: string;
    host: string;
    new_host: string;
    new_port: number;
    port: number;
    server_tls_cert: string;
};

export type HttpUpdateEtcdRaftOptionsPayload = {
    election_tick: number;
    heartbeat_tick: number;
    max_inflight_blocks: number;
    snapshot_interval_size: number;
    tick_interval: string;
};

export type HttpUpdateFabricNetworkRequest = {
    operations: Array<HttpConfigUpdateOperationRequest>;
};

export type HttpUpdateFabricOrdererRequest = {
    adminAddress?: string;
    domainNames?: Array<string>;
    env?: {
        [key: string]: string;
    };
    externalEndpoint?: string;
    listenAddress?: string;
    operationsListenAddress?: string;
    version?: string;
};

export type HttpUpdateFabricPeerRequest = {
    addressOverrides?: Array<TypesAddressOverride>;
    chaincodeAddress?: string;
    domainNames?: Array<string>;
    env?: {
        [key: string]: string;
    };
    eventsAddress?: string;
    externalEndpoint?: string;
    listenAddress?: string;
    operationsListenAddress?: string;
    version?: string;
};

export type HttpUpdateNodeRequest = {
    besuNode?: HttpUpdateBesuNodeRequest;
    blockchainPlatform?: TypesBlockchainPlatform;
    fabricOrderer?: HttpUpdateFabricOrdererRequest;
    /**
     * Platform-specific configurations
     */
    fabricPeer?: HttpUpdateFabricPeerRequest;
    /**
     * Common fields
     */
    name?: string;
};

export type HttpUpdateOrgMspPayload = {
    msp_id: string;
    root_certs: Array<string>;
    tls_root_certs: Array<string>;
};

export type HttpUpdateOrganizationCrlRequest = {
    organizationId: number;
};

export type HttpUpdateOrganizationCrlResponse = {
    transactionId?: string;
};

export type HttpUpdateProviderRequest = {
    config: unknown;
    isDefault?: boolean;
    name: string;
    notifyBackupFailure?: boolean;
    notifyBackupSuccess?: boolean;
    notifyNodeDowntime?: boolean;
    notifyS3ConnIssue?: boolean;
    type: 'SMTP';
};

export type ModelsCertificateRequest = {
    commonName: string;
    country?: Array<string>;
    dnsNames?: Array<string>;
    emailAddresses?: Array<string>;
    extKeyUsage?: Array<X509ExtKeyUsage>;
    ipAddresses?: Array<Array<number>>;
    isCA?: boolean;
    keyUsage?: X509KeyUsage;
    locality?: Array<string>;
    organization?: Array<string>;
    organizationalUnit?: Array<string>;
    postalCode?: Array<string>;
    province?: Array<string>;
    streetAddress?: Array<string>;
    uris?: Array<UrlUrl>;
    validFor: ModelsDuration;
};

/**
 * Supported key algorithms
 */
export type ModelsCreateKeyRequest = {
    /**
     * Key algorithm (RSA, EC, ED25519)
     * @Required
     */
    algorithm: 'RSA' | 'EC' | 'ED25519';
    /**
     * Optional: configure CA certificate properties
     */
    certificate?: ModelsCertificateRequest;
    /**
     * Elliptic curve name (for EC keys)
     */
    curve?: ModelsEcCurve;
    /**
     * Optional description
     */
    description?: string;
    /**
     * Whether this key is a CA
     */
    isCA?: number;
    /**
     * Key size in bits (for RSA)
     */
    keySize?: number;
    /**
     * Name of the key
     * @Required
     */
    name: string;
    /**
     * Optional provider ID
     */
    providerId?: number;
};

export type ModelsCreateProviderRequest = {
    config?: Array<number>;
    isDefault: 0 | 1;
    name: string;
    type: 'DATABASE' | 'VAULT' | 'HSM';
};

export type ModelsDuration = -9223372036854776000 | 9223372036854776000 | 1 | 1000 | 1000000 | 1000000000 | 60000000000 | 3600000000000;

export type ModelsEcCurve = 'P-256' | 'P-384' | 'P-521' | 'secp256k1';

export type ModelsKeyAlgorithm = 'RSA' | 'EC' | 'ED25519';

export type ModelsKeyProviderInfo = {
    id?: number;
    name?: string;
};

export type ModelsKeyProviderType = 'DATABASE' | 'VAULT' | 'HSM';

export type ModelsKeyResponse = {
    algorithm?: ModelsKeyAlgorithm;
    certificate?: string;
    createdAt?: string;
    curve?: ModelsEcCurve;
    description?: string;
    ethereumAddress?: string;
    expiresAt?: string;
    format?: string;
    id?: number;
    keySize?: number;
    lastRotatedAt?: string;
    name?: string;
    provider?: ModelsKeyProviderInfo;
    publicKey?: string;
    sha1Fingerprint?: string;
    sha256Fingerprint?: string;
    signingKeyID?: number;
    status?: string;
};

export type ModelsPaginatedResponse = {
    items?: Array<ModelsKeyResponse>;
    page?: number;
    pageSize?: number;
    totalItems?: number;
};

export type ModelsProviderResponse = {
    config?: Array<number>;
    createdAt?: string;
    id?: number;
    isDefault?: number;
    name?: string;
    type?: ModelsKeyProviderType;
};

export type NotificationsProviderType = 'SMTP';

export type PluginAvailablePluginsResponse = {
    last_updated?: string;
    plugins?: Array<RegistryPluginMetadata>;
};

export type PluginServiceStatus = {
    config?: {
        [key: string]: unknown;
    };
    containers?: Array<string>;
    created_at?: string;
    depends_on?: Array<string>;
    environment?: {
        [key: string]: string;
    };
    health?: string;
    image?: string;
    last_error?: string;
    name?: string;
    ports?: Array<string>;
    running?: boolean;
    started_at?: string;
    state?: string;
    volumes?: Array<string>;
};

export type ProjectsCommitDetailApi = {
    added?: Array<string>;
    author?: string;
    hash?: string;
    message?: string;
    modified?: Array<string>;
    parent?: string;
    removed?: Array<string>;
    timestamp?: string;
};

export type ProjectsCommitWithFileChangesApi = {
    added?: Array<string>;
    author?: string;
    hash?: string;
    message?: string;
    modified?: Array<string>;
    parent?: string;
    removed?: Array<string>;
    timestamp?: string;
};

export type ProjectsCommitsListResponse = {
    commits?: Array<ProjectsCommitWithFileChangesApi>;
};

export type ProjectsCreateProjectRequest = {
    boilerplate?: string;
    description?: string;
    endorsementPolicy?: string;
    name: string;
    networkId?: number;
};

export type ProjectsCreateProjectResponse = {
    boilerplate?: string;
    containerPort?: number;
    description?: string;
    endorsementPolicy?: string;
    id?: number;
    name?: string;
    networkId?: number;
    slug?: string;
};

export type ProjectsHandlerRequest = {
    args?: Array<string>;
    function?: string;
    keyId?: number;
    orgId?: number;
};

export type ProjectsHandlerResponse = {
    args?: Array<string>;
    blockNumber?: number;
    chaincode?: string;
    channel?: string;
    code?: number;
    function?: string;
    message?: string;
    project?: string;
    result?: unknown;
    status?: string;
    transactionId?: string;
};

export type ProjectsListProjectsResponse = {
    projects?: Array<ProjectsProject>;
};

export type ProjectsProject = {
    boilerplate?: string;
    containerPort?: number;
    description?: string;
    endorsementPolicy?: string;
    id?: number;
    lastStartedAt?: string;
    lastStoppedAt?: string;
    name?: string;
    networkId?: number;
    slug?: string;
    status?: string;
};

export type ProjectsUpdateProjectEndorsementPolicyRequest = {
    endorsementPolicy: string;
};

export type RegistryPluginMetadata = {
    author?: string;
    created?: string;
    description?: string;
    downloads?: number;
    hash?: string;
    labels?: {
        [key: string]: string;
    };
    license?: string;
    name?: string;
    rating?: number;
    raw_yaml?: string;
    source?: string;
    tags?: Array<string>;
    updated?: string;
    version?: string;
};

export type ResponseErrorResponse = {
    error?: string;
};

export type ResponseResponse = {
    data?: unknown;
    message?: string;
};

export type ServiceBesuNodeDefaults = {
    environmentVariables?: {
        [key: string]: string;
    };
    externalIp?: string;
    internalIp?: string;
    /**
     * Metrics configuration
     */
    metricsEnabled?: boolean;
    metricsHost?: string;
    metricsPort?: number;
    metricsProtocol?: string;
    mode?: ServiceMode;
    p2pHost?: string;
    p2pPort?: number;
    rpcHost?: string;
    rpcPort?: number;
};

export type ServiceBesuNodeProperties = {
    bootNodes?: Array<string>;
    enodeUrl?: string;
    externalIp?: string;
    internalIp?: string;
    keyId?: number;
    /**
     * Metrics configuration
     */
    metricsEnabled?: boolean;
    metricsHost?: string;
    metricsPort?: number;
    metricsProtocol?: string;
    mode?: string;
    networkId?: number;
    /**
     * Add deployment config fields
     */
    p2pHost?: string;
    p2pPort?: number;
    rpcHost?: string;
    rpcPort?: number;
    version?: string;
};

export type ServiceCreateSettingParams = {
    config?: ServiceSettingConfig;
};

export type ServiceFabricOrdererProperties = {
    adminAddress?: string;
    domainNames?: Array<string>;
    externalEndpoint?: string;
    listenAddress?: string;
    mode?: string;
    mspId?: string;
    operationsAddress?: string;
    organizationId?: number;
    signCaCert?: string;
    /**
     * Add certificate information
     */
    signCert?: string;
    /**
     * Add deployment config fields
     */
    signKeyId?: number;
    tlsCaCert?: string;
    tlsCert?: string;
    tlsKeyId?: number;
    version?: string;
};

export type ServiceFabricPeerProperties = {
    addressOverrides?: Array<TypesAddressOverride>;
    chaincodeAddress?: string;
    domainNames?: Array<string>;
    eventsAddress?: string;
    externalEndpoint?: string;
    listenAddress?: string;
    mode?: string;
    mspId?: string;
    operationsAddress?: string;
    organizationId?: number;
    signCaCert?: string;
    /**
     * Add certificate information
     */
    signCert?: string;
    /**
     * Add deployment config fields
     */
    signKeyId?: number;
    tlsCaCert?: string;
    tlsCert?: string;
    tlsKeyId?: number;
    version?: string;
};

export type ServiceMode = 'service' | 'docker';

export type ServiceNetworkNode = {
    createdAt?: string;
    id?: number;
    networkId?: number;
    node?: ServiceNodeResponse;
    nodeId?: number;
    role?: string;
    status?: string;
    updatedAt?: string;
};

export type ServiceNodeDefaults = {
    adminAddress?: string;
    chaincodeAddress?: string;
    containerName?: string;
    errorLogPath?: string;
    eventsAddress?: string;
    externalEndpoint?: string;
    listenAddress?: string;
    logPath?: string;
    mode?: ServiceMode;
    operationsListenAddress?: string;
    serviceName?: string;
};

export type ServiceNodeResponse = {
    besuNode?: ServiceBesuNodeProperties;
    createdAt?: string;
    endpoint?: string;
    errorMessage?: string;
    fabricOrderer?: ServiceFabricOrdererProperties;
    /**
     * Type-specific fields
     */
    fabricPeer?: ServiceFabricPeerProperties;
    id?: number;
    name?: string;
    nodeType?: TypesNodeType;
    platform?: string;
    status?: string;
    updatedAt?: string;
};

export type ServiceNodesDefaultsResult = {
    availableAddresses?: Array<string>;
    orderers?: Array<ServiceNodeDefaults>;
    peers?: Array<ServiceNodeDefaults>;
};

export type ServiceSetting = {
    config?: ServiceSettingConfig;
    created_at?: string;
    id?: number;
    updated_at?: string;
};

export type ServiceSettingConfig = {
    besuTemplateCMD?: string;
    ordererTemplateCMD?: string;
    peerTemplateCMD?: string;
};

export type SqlNullString = {
    string?: string;
    /**
     * Valid is true if String is not NULL
     */
    valid?: boolean;
};

export type TimeDuration = -9223372036854776000 | 9223372036854776000 | 1 | 1000 | 1000000 | 1000000000 | 60000000000 | 3600000000000;

export type TypesAddressOverride = {
    from?: string;
    tlsCACert?: string;
    to?: string;
};

export type TypesBesuNodeConfig = {
    bootNodes?: Array<string>;
    env?: {
        [key: string]: string;
    };
    externalIp: string;
    internalIp: string;
    keyId: number;
    metricsEnabled?: boolean;
    metricsPort?: number;
    metricsProtocol?: string;
    /**
     * @Description The deployment mode (service or docker)
     */
    mode?: string;
    networkId: number;
    p2pHost: string;
    p2pPort: number;
    rpcHost: string;
    rpcPort: number;
    /**
     * @Description The type of node (fabric-peer, fabric-orderer, besu)
     */
    type?: string;
    version?: string;
};

export type TypesBlockchainPlatform = 'FABRIC' | 'BESU';

export type TypesCustomQueryRequest = {
    end?: string;
    query: string;
    start?: string;
    step?: string;
};

export type TypesDeployPrometheusRequest = {
    prometheus_port: number;
    prometheus_version: string;
    scrape_interval: number;
};

export type TypesDeploymentStatus = {
    error?: string;
    parameters?: {
        [key: string]: unknown;
    };
    projectName?: string;
    services?: Array<TypesService>;
    startedAt?: string;
    status?: string;
    stoppedAt?: string;
};

export type TypesDockerCompose = {
    contents?: string;
};

export type TypesDocumentation = {
    /**
     * Examples contains example configurations and usage
     */
    examples?: Array<TypesExample>;
    /**
     * README contains the main documentation for the plugin
     */
    readme?: string;
    /**
     * Troubleshooting contains common issues and their solutions
     */
    troubleshooting?: Array<TypesTroubleshootingItem>;
};

export type TypesExample = {
    description?: string;
    name?: string;
    parameters?: {
        [key: string]: unknown;
    };
};

export type TypesFabricOrdererConfig = {
    /**
     * @Description Address overrides for the orderer
     */
    addressOverrides?: Array<TypesAddressOverride>;
    adminAddress?: string;
    domainNames?: Array<string>;
    env?: {
        [key: string]: string;
    };
    externalEndpoint?: string;
    listenAddress?: string;
    /**
     * @Description The deployment mode (service or docker)
     */
    mode?: string;
    mspId: string;
    name: string;
    operationsListenAddress?: string;
    organizationId: number;
    /**
     * @Description The type of node (fabric-peer, fabric-orderer, besu)
     */
    type?: string;
    /**
     * Fabric version to use
     */
    version?: string;
};

/**
 * Configuration for creating a new Fabric peer node
 */
export type TypesFabricPeerConfig = {
    /**
     * @Description Address overrides for the peer
     */
    addressOverrides?: Array<TypesAddressOverride>;
    /**
     * @Description Chaincode listen address
     */
    chaincodeAddress?: string;
    /**
     * @Description Domain names for the peer
     */
    domainNames?: Array<string>;
    /**
     * @Description Environment variables for the peer
     */
    env?: {
        [key: string]: string;
    };
    /**
     * @Description Events listen address
     */
    eventsAddress?: string;
    /**
     * @Description External endpoint for the peer
     */
    externalEndpoint?: string;
    /**
     * @Description Listen address for the peer
     */
    listenAddress?: string;
    /**
     * @Description The deployment mode (service or docker)
     */
    mode?: string;
    /**
     * @Description MSP ID for the organization
     */
    mspId: string;
    /**
     * @Description Name of the peer node
     */
    name: string;
    /**
     * @Description Operations listen address
     */
    operationsListenAddress?: string;
    /**
     * @Description Orderer address overrides for the peer
     */
    ordererAddressOverrides?: Array<TypesOrdererAddressOverride>;
    /**
     * @Description Organization ID that owns this peer
     */
    organizationId: number;
    /**
     * @Description The type of node (fabric-peer, fabric-orderer, besu)
     */
    type?: string;
    /**
     * @Description Fabric version to use
     */
    version?: string;
};

export type TypesLabelValuesResponse = {
    data?: Array<string>;
    status?: string;
};

export type TypesMessageResponse = {
    message?: string;
};

export type TypesMetadata = {
    author?: string;
    description?: string;
    license?: string;
    name?: string;
    repository?: string;
    tags?: Array<string>;
    version?: string;
};

export type TypesMetricsDataResponse = {
    data?: unknown;
    status?: string;
};

export type TypesNodeType = 'FABRIC_PEER' | 'FABRIC_ORDERER' | 'BESU_FULLNODE';

export type TypesOrdererAddressOverride = {
    /**
     * @Description Original orderer address
     */
    from: string;
    /**
     * @Description TLS CA certificate in PEM format
     */
    tlsCACert: string;
    /**
     * @Description New orderer address to use
     */
    to: string;
};

export type TypesParameterSpec = {
    default?: string;
    description?: string;
    enum?: Array<string>;
    type?: string;
    'x-source'?: TypesXSourceType;
};

export type TypesService = {
    createdAt?: string;
    image?: string;
    name?: string;
    ports?: Array<GithubComChainlaunchChainlaunchPkgPluginTypesPort>;
    status?: string;
};

export type TypesSpec = {
    dockerCompose?: TypesDockerCompose;
    documentation?: TypesDocumentation;
    parameters?: GithubComChainlaunchChainlaunchPkgPluginTypesParameters;
};

export type TypesTroubleshootingItem = {
    description?: string;
    problem?: string;
    solution?: string;
};

export type TypesXSourceType = 'fabric-peer' | 'key' | 'fabric-org' | 'fabric-network' | 'fabric-key';

export type UrlUrl = {
    /**
     * append a query ('?') even if RawQuery is empty
     */
    forceQuery?: boolean;
    /**
     * fragment for references, without '#'
     */
    fragment?: string;
    /**
     * host or host:port (see Hostname and Port methods)
     */
    host?: string;
    /**
     * do not emit empty host (authority)
     */
    omitHost?: boolean;
    /**
     * encoded opaque data
     */
    opaque?: string;
    /**
     * path (relative paths may omit leading slash)
     */
    path?: string;
    /**
     * encoded fragment hint (see EscapedFragment method)
     */
    rawFragment?: string;
    /**
     * encoded path hint (see EscapedPath method)
     */
    rawPath?: string;
    /**
     * encoded query values, without '?'
     */
    rawQuery?: string;
    scheme?: string;
    /**
     * username and password information
     */
    user?: UrlUserinfo;
};

export type UrlUserinfo = {
    [key: string]: unknown;
};

export type X509ExtKeyUsage = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13;

export type X509KeyUsage = 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256;

export type GetAiBoilerplatesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Network ID to filter boilerplates by platform
         */
        network_id: number;
    };
    url: '/ai/boilerplates';
};

export type GetAiBoilerplatesErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetAiBoilerplatesError = GetAiBoilerplatesErrors[keyof GetAiBoilerplatesErrors];

export type GetAiBoilerplatesResponses = {
    /**
     * OK
     */
    200: Array<BoilerplatesBoilerplateConfig>;
};

export type GetAiBoilerplatesResponse = GetAiBoilerplatesResponses[keyof GetAiBoilerplatesResponses];

export type PostAiGenerateData = {
    /**
     * Generation request
     */
    body: AiGenerateRequest;
    path?: never;
    query?: never;
    url: '/ai/generate';
};

export type PostAiGenerateErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type PostAiGenerateError = PostAiGenerateErrors[keyof PostAiGenerateErrors];

export type PostAiGenerateResponses = {
    /**
     * OK
     */
    200: AiGenerateResponse;
};

export type PostAiGenerateResponse = PostAiGenerateResponses[keyof PostAiGenerateResponses];

export type GetAiModelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ai/models';
};

export type GetAiModelsErrors = {
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetAiModelsError = GetAiModelsErrors[keyof GetAiModelsErrors];

export type GetAiModelsResponses = {
    /**
     * OK
     */
    200: Array<AiModel>;
};

export type GetAiModelsResponse = GetAiModelsResponses[keyof GetAiModelsResponses];

export type PostAiByProjectIdChatData = {
    /**
     * Chat request containing project ID and messages
     */
    body: AiChatRequest;
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
    query?: never;
    url: '/ai/{projectId}/chat';
};

export type PostAiByProjectIdChatErrors = {
    /**
     * Invalid request
     */
    400: string;
    /**
     * Internal server error
     */
    500: string;
};

export type PostAiByProjectIdChatError = PostAiByProjectIdChatErrors[keyof PostAiByProjectIdChatErrors];

export type PostAiByProjectIdChatResponses = {
    /**
     * SSE stream of chat responses
     */
    200: string;
};

export type PostAiByProjectIdChatResponse = PostAiByProjectIdChatResponses[keyof PostAiByProjectIdChatResponses];

export type GetAiByProjectIdConversationsData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
    query?: never;
    url: '/ai/{projectId}/conversations';
};

export type GetAiByProjectIdConversationsErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetAiByProjectIdConversationsError = GetAiByProjectIdConversationsErrors[keyof GetAiByProjectIdConversationsErrors];

export type GetAiByProjectIdConversationsResponses = {
    /**
     * OK
     */
    200: Array<AiConversationResponse>;
};

export type GetAiByProjectIdConversationsResponse = GetAiByProjectIdConversationsResponses[keyof GetAiByProjectIdConversationsResponses];

export type GetAiByProjectIdConversationsByConversationIdData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        projectId: number;
        /**
         * Conversation ID
         */
        conversationId: number;
    };
    query?: never;
    url: '/ai/{projectId}/conversations/{conversationId}';
};

export type GetAiByProjectIdConversationsByConversationIdErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetAiByProjectIdConversationsByConversationIdError = GetAiByProjectIdConversationsByConversationIdErrors[keyof GetAiByProjectIdConversationsByConversationIdErrors];

export type GetAiByProjectIdConversationsByConversationIdResponses = {
    /**
     * OK
     */
    200: Array<AiMessage>;
};

export type GetAiByProjectIdConversationsByConversationIdResponse = GetAiByProjectIdConversationsByConversationIdResponses[keyof GetAiByProjectIdConversationsByConversationIdResponses];

export type GetAiByProjectIdConversationsByConversationIdExportData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        projectId: number;
        /**
         * Conversation ID
         */
        conversationId: number;
    };
    query?: never;
    url: '/ai/{projectId}/conversations/{conversationId}/export';
};

export type GetAiByProjectIdConversationsByConversationIdExportErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetAiByProjectIdConversationsByConversationIdExportError = GetAiByProjectIdConversationsByConversationIdExportErrors[keyof GetAiByProjectIdConversationsByConversationIdExportErrors];

export type GetAiByProjectIdConversationsByConversationIdExportResponses = {
    /**
     * OK
     */
    200: AiConversationDetail;
};

export type GetAiByProjectIdConversationsByConversationIdExportResponse = GetAiByProjectIdConversationsByConversationIdExportResponses[keyof GetAiByProjectIdConversationsByConversationIdExportResponses];

export type GetAuditLogsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (default: 1)
         */
        page?: number;
        /**
         * Page size (default: 10)
         */
        page_size?: number;
        /**
         * Start time (RFC3339 format)
         */
        start?: string;
        /**
         * End time (RFC3339 format)
         */
        end?: string;
        /**
         * Filter by event type
         */
        event_type?: string;
        /**
         * Filter by user ID
         */
        user_id?: string;
    };
    url: '/audit/logs';
};

export type GetAuditLogsErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Unauthorized
     */
    401: {
        [key: string]: string;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type GetAuditLogsError = GetAuditLogsErrors[keyof GetAuditLogsErrors];

export type GetAuditLogsResponses = {
    /**
     * OK
     */
    200: AuditListLogsResponse;
};

export type GetAuditLogsResponse = GetAuditLogsResponses[keyof GetAuditLogsResponses];

export type GetAuditLogsByIdData = {
    body?: never;
    path: {
        /**
         * Log ID
         */
        id: string;
    };
    query?: never;
    url: '/audit/logs/{id}';
};

export type GetAuditLogsByIdErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Unauthorized
     */
    401: {
        [key: string]: string;
    };
    /**
     * Forbidden
     */
    403: {
        [key: string]: string;
    };
    /**
     * Not Found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type GetAuditLogsByIdError = GetAuditLogsByIdErrors[keyof GetAuditLogsByIdErrors];

export type GetAuditLogsByIdResponses = {
    /**
     * OK
     */
    200: AuditEvent;
};

export type GetAuditLogsByIdResponse = GetAuditLogsByIdResponses[keyof GetAuditLogsByIdResponses];

export type PostAuthChangePasswordData = {
    /**
     * Password change request
     */
    body: AuthChangePasswordRequest;
    path?: never;
    query?: never;
    url: '/auth/change-password';
};

export type PostAuthChangePasswordErrors = {
    /**
     * Invalid request body
     */
    400: ResponseResponse;
    /**
     * Unauthorized
     */
    401: ResponseResponse;
    /**
     * Invalid current password
     */
    403: ResponseResponse;
};

export type PostAuthChangePasswordError = PostAuthChangePasswordErrors[keyof PostAuthChangePasswordErrors];

export type PostAuthChangePasswordResponses = {
    /**
     * Password changed successfully
     */
    200: {
        [key: string]: string;
    };
};

export type PostAuthChangePasswordResponse = PostAuthChangePasswordResponses[keyof PostAuthChangePasswordResponses];

export type PostAuthLoginData = {
    /**
     * Login credentials
     */
    body: AuthLoginRequest;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type PostAuthLoginErrors = {
    /**
     * Invalid request body
     */
    400: ResponseResponse;
    /**
     * Invalid credentials
     */
    401: ResponseResponse;
    /**
     * Method not allowed
     */
    405: ResponseResponse;
};

export type PostAuthLoginError = PostAuthLoginErrors[keyof PostAuthLoginErrors];

export type PostAuthLoginResponses = {
    /**
     * Login successful
     */
    200: AuthLoginResponse;
};

export type PostAuthLoginResponse = PostAuthLoginResponses[keyof PostAuthLoginResponses];

export type PostAuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type PostAuthLogoutErrors = {
    /**
     * Method not allowed
     */
    405: ResponseResponse;
};

export type PostAuthLogoutError = PostAuthLogoutErrors[keyof PostAuthLogoutErrors];

export type PostAuthLogoutResponses = {
    /**
     * Logout successful
     */
    200: AuthLogoutResponse;
};

export type PostAuthLogoutResponse = PostAuthLogoutResponses[keyof PostAuthLogoutResponses];

export type GetAuthMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/me';
};

export type GetAuthMeErrors = {
    /**
     * Unauthorized
     */
    401: ResponseResponse;
};

export type GetAuthMeError = GetAuthMeErrors[keyof GetAuthMeErrors];

export type GetAuthMeResponses = {
    /**
     * User information
     */
    200: AuthUserResponse;
};

export type GetAuthMeResponse = GetAuthMeResponses[keyof GetAuthMeResponses];

export type GetBackupsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/backups';
};

export type GetBackupsErrors = {
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type GetBackupsError = GetBackupsErrors[keyof GetBackupsErrors];

export type GetBackupsResponses = {
    /**
     * OK
     */
    200: Array<HttpBackupResponse>;
};

export type GetBackupsResponse = GetBackupsResponses[keyof GetBackupsResponses];

export type PostBackupsData = {
    /**
     * Backup creation request
     */
    body: HttpCreateBackupRequest;
    path?: never;
    query?: never;
    url: '/backups';
};

export type PostBackupsErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PostBackupsError = PostBackupsErrors[keyof PostBackupsErrors];

export type PostBackupsResponses = {
    /**
     * Created
     */
    201: HttpBackupResponse;
};

export type PostBackupsResponse = PostBackupsResponses[keyof PostBackupsResponses];

export type GetBackupsSchedulesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/backups/schedules';
};

export type GetBackupsSchedulesErrors = {
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type GetBackupsSchedulesError = GetBackupsSchedulesErrors[keyof GetBackupsSchedulesErrors];

export type GetBackupsSchedulesResponses = {
    /**
     * OK
     */
    200: Array<HttpBackupScheduleResponse>;
};

export type GetBackupsSchedulesResponse = GetBackupsSchedulesResponses[keyof GetBackupsSchedulesResponses];

export type PostBackupsSchedulesData = {
    /**
     * Backup schedule creation request
     */
    body: HttpCreateBackupScheduleRequest;
    path?: never;
    query?: never;
    url: '/backups/schedules';
};

export type PostBackupsSchedulesErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PostBackupsSchedulesError = PostBackupsSchedulesErrors[keyof PostBackupsSchedulesErrors];

export type PostBackupsSchedulesResponses = {
    /**
     * Created
     */
    201: HttpBackupScheduleResponse;
};

export type PostBackupsSchedulesResponse = PostBackupsSchedulesResponses[keyof PostBackupsSchedulesResponses];

export type DeleteBackupsSchedulesByIdData = {
    body?: never;
    path: {
        /**
         * Schedule ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/schedules/{id}';
};

export type DeleteBackupsSchedulesByIdErrors = {
    /**
     * Invalid ID format
     */
    400: ResponseResponse;
    /**
     * Schedule not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type DeleteBackupsSchedulesByIdError = DeleteBackupsSchedulesByIdErrors[keyof DeleteBackupsSchedulesByIdErrors];

export type DeleteBackupsSchedulesByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetBackupsSchedulesByIdData = {
    body?: never;
    path: {
        /**
         * Schedule ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/schedules/{id}';
};

export type GetBackupsSchedulesByIdErrors = {
    /**
     * Invalid ID format
     */
    400: ResponseResponse;
    /**
     * Schedule not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type GetBackupsSchedulesByIdError = GetBackupsSchedulesByIdErrors[keyof GetBackupsSchedulesByIdErrors];

export type GetBackupsSchedulesByIdResponses = {
    /**
     * OK
     */
    200: HttpBackupScheduleResponse;
};

export type GetBackupsSchedulesByIdResponse = GetBackupsSchedulesByIdResponses[keyof GetBackupsSchedulesByIdResponses];

export type PutBackupsSchedulesByIdData = {
    /**
     * Backup schedule update request
     */
    body: HttpUpdateBackupScheduleRequest;
    path: {
        /**
         * Schedule ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/schedules/{id}';
};

export type PutBackupsSchedulesByIdErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Schedule not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PutBackupsSchedulesByIdError = PutBackupsSchedulesByIdErrors[keyof PutBackupsSchedulesByIdErrors];

export type PutBackupsSchedulesByIdResponses = {
    /**
     * OK
     */
    200: HttpBackupScheduleResponse;
};

export type PutBackupsSchedulesByIdResponse = PutBackupsSchedulesByIdResponses[keyof PutBackupsSchedulesByIdResponses];

export type PutBackupsSchedulesByIdDisableData = {
    body?: never;
    path: {
        /**
         * Schedule ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/schedules/{id}/disable';
};

export type PutBackupsSchedulesByIdDisableErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Schedule not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PutBackupsSchedulesByIdDisableError = PutBackupsSchedulesByIdDisableErrors[keyof PutBackupsSchedulesByIdDisableErrors];

export type PutBackupsSchedulesByIdDisableResponses = {
    /**
     * OK
     */
    200: HttpBackupScheduleResponse;
};

export type PutBackupsSchedulesByIdDisableResponse = PutBackupsSchedulesByIdDisableResponses[keyof PutBackupsSchedulesByIdDisableResponses];

export type PutBackupsSchedulesByIdEnableData = {
    body?: never;
    path: {
        /**
         * Schedule ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/schedules/{id}/enable';
};

export type PutBackupsSchedulesByIdEnableErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Schedule not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PutBackupsSchedulesByIdEnableError = PutBackupsSchedulesByIdEnableErrors[keyof PutBackupsSchedulesByIdEnableErrors];

export type PutBackupsSchedulesByIdEnableResponses = {
    /**
     * OK
     */
    200: HttpBackupScheduleResponse;
};

export type PutBackupsSchedulesByIdEnableResponse = PutBackupsSchedulesByIdEnableResponses[keyof PutBackupsSchedulesByIdEnableResponses];

export type GetBackupsTargetsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/backups/targets';
};

export type GetBackupsTargetsErrors = {
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type GetBackupsTargetsError = GetBackupsTargetsErrors[keyof GetBackupsTargetsErrors];

export type GetBackupsTargetsResponses = {
    /**
     * OK
     */
    200: Array<HttpBackupTargetResponse>;
};

export type GetBackupsTargetsResponse = GetBackupsTargetsResponses[keyof GetBackupsTargetsResponses];

export type PostBackupsTargetsData = {
    /**
     * Backup target creation request
     */
    body: HttpCreateBackupTargetRequest;
    path?: never;
    query?: never;
    url: '/backups/targets';
};

export type PostBackupsTargetsErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PostBackupsTargetsError = PostBackupsTargetsErrors[keyof PostBackupsTargetsErrors];

export type PostBackupsTargetsResponses = {
    /**
     * Created
     */
    201: HttpBackupTargetResponse;
};

export type PostBackupsTargetsResponse = PostBackupsTargetsResponses[keyof PostBackupsTargetsResponses];

export type DeleteBackupsTargetsByIdData = {
    body?: never;
    path: {
        /**
         * Backup Target ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/targets/{id}';
};

export type DeleteBackupsTargetsByIdErrors = {
    /**
     * Invalid ID format
     */
    400: ResponseResponse;
    /**
     * Target not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type DeleteBackupsTargetsByIdError = DeleteBackupsTargetsByIdErrors[keyof DeleteBackupsTargetsByIdErrors];

export type DeleteBackupsTargetsByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetBackupsTargetsByIdData = {
    body?: never;
    path: {
        /**
         * Backup Target ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/targets/{id}';
};

export type GetBackupsTargetsByIdErrors = {
    /**
     * Invalid ID format
     */
    400: ResponseResponse;
    /**
     * Target not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type GetBackupsTargetsByIdError = GetBackupsTargetsByIdErrors[keyof GetBackupsTargetsByIdErrors];

export type GetBackupsTargetsByIdResponses = {
    /**
     * OK
     */
    200: HttpBackupTargetResponse;
};

export type GetBackupsTargetsByIdResponse = GetBackupsTargetsByIdResponses[keyof GetBackupsTargetsByIdResponses];

export type PutBackupsTargetsByIdData = {
    /**
     * Backup target update request
     */
    body: HttpUpdateBackupTargetRequest;
    path: {
        /**
         * Backup Target ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/targets/{id}';
};

export type PutBackupsTargetsByIdErrors = {
    /**
     * Validation error
     */
    400: ResponseResponse;
    /**
     * Target not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PutBackupsTargetsByIdError = PutBackupsTargetsByIdErrors[keyof PutBackupsTargetsByIdErrors];

export type PutBackupsTargetsByIdResponses = {
    /**
     * OK
     */
    200: HttpBackupTargetResponse;
};

export type PutBackupsTargetsByIdResponse = PutBackupsTargetsByIdResponses[keyof PutBackupsTargetsByIdResponses];

export type DeleteBackupsByIdData = {
    body?: never;
    path: {
        /**
         * Backup ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/{id}';
};

export type DeleteBackupsByIdErrors = {
    /**
     * Invalid ID format
     */
    400: ResponseResponse;
    /**
     * Backup not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type DeleteBackupsByIdError = DeleteBackupsByIdErrors[keyof DeleteBackupsByIdErrors];

export type DeleteBackupsByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetBackupsByIdData = {
    body?: never;
    path: {
        /**
         * Backup ID
         */
        id: number;
    };
    query?: never;
    url: '/backups/{id}';
};

export type GetBackupsByIdErrors = {
    /**
     * Invalid ID format
     */
    400: ResponseResponse;
    /**
     * Backup not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type GetBackupsByIdError = GetBackupsByIdErrors[keyof GetBackupsByIdErrors];

export type GetBackupsByIdResponses = {
    /**
     * OK
     */
    200: HttpBackupResponse;
};

export type GetBackupsByIdResponse = GetBackupsByIdResponses[keyof GetBackupsByIdResponses];

export type GetChaincodeProjectsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/chaincode-projects';
};

export type GetChaincodeProjectsErrors = {
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetChaincodeProjectsError = GetChaincodeProjectsErrors[keyof GetChaincodeProjectsErrors];

export type GetChaincodeProjectsResponses = {
    /**
     * OK
     */
    200: ProjectsListProjectsResponse;
};

export type GetChaincodeProjectsResponse = GetChaincodeProjectsResponses[keyof GetChaincodeProjectsResponses];

export type PostChaincodeProjectsData = {
    /**
     * Project info
     */
    body: ProjectsCreateProjectRequest;
    path?: never;
    query?: never;
    url: '/chaincode-projects';
};

export type PostChaincodeProjectsErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Unauthorized
     */
    401: ResponseErrorResponse;
    /**
     * Forbidden
     */
    403: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Conflict
     */
    409: ResponseErrorResponse;
    /**
     * Unprocessable Entity
     */
    422: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type PostChaincodeProjectsError = PostChaincodeProjectsErrors[keyof PostChaincodeProjectsErrors];

export type PostChaincodeProjectsResponses = {
    /**
     * Created
     */
    201: ProjectsCreateProjectResponse;
};

export type PostChaincodeProjectsResponse = PostChaincodeProjectsResponses[keyof PostChaincodeProjectsResponses];

export type GetChaincodeProjectsByIdData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: never;
    url: '/chaincode-projects/{id}';
};

export type GetChaincodeProjectsByIdErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetChaincodeProjectsByIdError = GetChaincodeProjectsByIdErrors[keyof GetChaincodeProjectsByIdErrors];

export type GetChaincodeProjectsByIdResponses = {
    /**
     * OK
     */
    200: ProjectsProject;
};

export type GetChaincodeProjectsByIdResponse = GetChaincodeProjectsByIdResponses[keyof GetChaincodeProjectsByIdResponses];

export type GetChaincodeProjectsByIdCommitsData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: {
        /**
         * Page number (default 1)
         */
        page?: number;
        /**
         * Page size (default 20)
         */
        pageSize?: number;
    };
    url: '/chaincode-projects/{id}/commits';
};

export type GetChaincodeProjectsByIdCommitsErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetChaincodeProjectsByIdCommitsError = GetChaincodeProjectsByIdCommitsErrors[keyof GetChaincodeProjectsByIdCommitsErrors];

export type GetChaincodeProjectsByIdCommitsResponses = {
    /**
     * OK
     */
    200: ProjectsCommitsListResponse;
};

export type GetChaincodeProjectsByIdCommitsResponse = GetChaincodeProjectsByIdCommitsResponses[keyof GetChaincodeProjectsByIdCommitsResponses];

export type GetChaincodeProjectsByIdCommitsByCommitHashData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
        /**
         * Commit hash
         */
        commitHash: string;
    };
    query?: never;
    url: '/chaincode-projects/{id}/commits/{commitHash}';
};

export type GetChaincodeProjectsByIdCommitsByCommitHashErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetChaincodeProjectsByIdCommitsByCommitHashError = GetChaincodeProjectsByIdCommitsByCommitHashErrors[keyof GetChaincodeProjectsByIdCommitsByCommitHashErrors];

export type GetChaincodeProjectsByIdCommitsByCommitHashResponses = {
    /**
     * OK
     */
    200: ProjectsCommitDetailApi;
};

export type GetChaincodeProjectsByIdCommitsByCommitHashResponse = GetChaincodeProjectsByIdCommitsByCommitHashResponses[keyof GetChaincodeProjectsByIdCommitsByCommitHashResponses];

export type GetChaincodeProjectsByIdDiffData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query: {
        /**
         * File path (relative to project root)
         */
        file: string;
        /**
         * From commit hash
         */
        from: string;
        /**
         * To commit hash
         */
        to: string;
    };
    url: '/chaincode-projects/{id}/diff';
};

export type GetChaincodeProjectsByIdDiffErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetChaincodeProjectsByIdDiffError = GetChaincodeProjectsByIdDiffErrors[keyof GetChaincodeProjectsByIdDiffErrors];

export type GetChaincodeProjectsByIdDiffResponses = {
    /**
     * Diff
     */
    200: string;
};

export type GetChaincodeProjectsByIdDiffResponse = GetChaincodeProjectsByIdDiffResponses[keyof GetChaincodeProjectsByIdDiffResponses];

export type PutChaincodeProjectsByIdEndorsementPolicyData = {
    /**
     * Update project endorsement policy request
     */
    body: ProjectsUpdateProjectEndorsementPolicyRequest;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: never;
    url: '/chaincode-projects/{id}/endorsement-policy';
};

export type PutChaincodeProjectsByIdEndorsementPolicyErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type PutChaincodeProjectsByIdEndorsementPolicyError = PutChaincodeProjectsByIdEndorsementPolicyErrors[keyof PutChaincodeProjectsByIdEndorsementPolicyErrors];

export type PutChaincodeProjectsByIdEndorsementPolicyResponses = {
    /**
     * OK
     */
    200: ProjectsProject;
};

export type PutChaincodeProjectsByIdEndorsementPolicyResponse = PutChaincodeProjectsByIdEndorsementPolicyResponses[keyof PutChaincodeProjectsByIdEndorsementPolicyResponses];

export type GetChaincodeProjectsByIdFileAtCommitData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query: {
        /**
         * File path (relative to project root)
         */
        file: string;
        /**
         * Commit hash
         */
        commit: string;
    };
    url: '/chaincode-projects/{id}/file_at_commit';
};

export type GetChaincodeProjectsByIdFileAtCommitErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetChaincodeProjectsByIdFileAtCommitError = GetChaincodeProjectsByIdFileAtCommitErrors[keyof GetChaincodeProjectsByIdFileAtCommitErrors];

export type GetChaincodeProjectsByIdFileAtCommitResponses = {
    /**
     * File contents
     */
    200: string;
};

export type GetChaincodeProjectsByIdFileAtCommitResponse = GetChaincodeProjectsByIdFileAtCommitResponses[keyof GetChaincodeProjectsByIdFileAtCommitResponses];

export type PostChaincodeProjectsByIdInvokeData = {
    /**
     * Transaction parameters
     */
    body: ProjectsHandlerRequest;
    path: {
        /**
         * Chaincode Project ID
         */
        id: number;
    };
    query?: never;
    url: '/chaincode-projects/{id}/invoke';
};

export type PostChaincodeProjectsByIdInvokeErrors = {
    /**
     * Invalid request
     */
    400: ResponseResponse;
    /**
     * Project not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PostChaincodeProjectsByIdInvokeError = PostChaincodeProjectsByIdInvokeErrors[keyof PostChaincodeProjectsByIdInvokeErrors];

export type PostChaincodeProjectsByIdInvokeResponses = {
    /**
     * Transaction result
     */
    200: ProjectsHandlerResponse;
};

export type PostChaincodeProjectsByIdInvokeResponse = PostChaincodeProjectsByIdInvokeResponses[keyof PostChaincodeProjectsByIdInvokeResponses];

export type GetChaincodeProjectsByIdLogsData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: never;
    url: '/chaincode-projects/{id}/logs';
};

export type GetChaincodeProjectsByIdLogsErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetChaincodeProjectsByIdLogsError = GetChaincodeProjectsByIdLogsErrors[keyof GetChaincodeProjectsByIdLogsErrors];

export type GetChaincodeProjectsByIdLogsResponses = {
    /**
     * Logs
     */
    200: string;
};

export type GetChaincodeProjectsByIdLogsResponse = GetChaincodeProjectsByIdLogsResponses[keyof GetChaincodeProjectsByIdLogsResponses];

export type GetChaincodeProjectsByIdLogsStreamData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: never;
    url: '/chaincode-projects/{id}/logs/stream';
};

export type GetChaincodeProjectsByIdLogsStreamErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetChaincodeProjectsByIdLogsStreamError = GetChaincodeProjectsByIdLogsStreamErrors[keyof GetChaincodeProjectsByIdLogsStreamErrors];

export type GetChaincodeProjectsByIdLogsStreamResponses = {
    /**
     * SSE stream of logs
     */
    200: string;
};

export type GetChaincodeProjectsByIdLogsStreamResponse = GetChaincodeProjectsByIdLogsStreamResponses[keyof GetChaincodeProjectsByIdLogsStreamResponses];

export type PostChaincodeProjectsByIdQueryData = {
    /**
     * Query parameters
     */
    body: ProjectsHandlerRequest;
    path: {
        /**
         * Chaincode Project ID
         */
        id: number;
    };
    query?: never;
    url: '/chaincode-projects/{id}/query';
};

export type PostChaincodeProjectsByIdQueryErrors = {
    /**
     * Invalid request
     */
    400: ResponseResponse;
    /**
     * Project not found
     */
    404: ResponseResponse;
    /**
     * Internal server error
     */
    500: ResponseResponse;
};

export type PostChaincodeProjectsByIdQueryError = PostChaincodeProjectsByIdQueryErrors[keyof PostChaincodeProjectsByIdQueryErrors];

export type PostChaincodeProjectsByIdQueryResponses = {
    /**
     * Query result
     */
    200: ProjectsHandlerResponse;
};

export type PostChaincodeProjectsByIdQueryResponse = PostChaincodeProjectsByIdQueryResponses[keyof PostChaincodeProjectsByIdQueryResponses];

export type PostChaincodeProjectsByIdStartData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: never;
    url: '/chaincode-projects/{id}/start';
};

export type PostChaincodeProjectsByIdStartErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type PostChaincodeProjectsByIdStartError = PostChaincodeProjectsByIdStartErrors[keyof PostChaincodeProjectsByIdStartErrors];

export type PostChaincodeProjectsByIdStartResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type PostChaincodeProjectsByIdStartResponse = PostChaincodeProjectsByIdStartResponses[keyof PostChaincodeProjectsByIdStartResponses];

export type PostChaincodeProjectsByIdStopData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: never;
    url: '/chaincode-projects/{id}/stop';
};

export type PostChaincodeProjectsByIdStopErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type PostChaincodeProjectsByIdStopError = PostChaincodeProjectsByIdStopErrors[keyof PostChaincodeProjectsByIdStopErrors];

export type PostChaincodeProjectsByIdStopResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type PostChaincodeProjectsByIdStopResponse = PostChaincodeProjectsByIdStopResponses[keyof PostChaincodeProjectsByIdStopResponses];

export type PostDummyData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Proposal ID
         */
        proposalId: string;
    };
    query?: never;
    url: '/dummy';
};

export type PostDummyResponses = {
    /**
     * OK
     */
    200: HttpRemoveOrgPayload;
    /**
     * Created
     */
    201: HttpUpdateOrgMspPayload;
    /**
     * Accepted
     */
    202: HttpSetAnchorPeersPayload;
    /**
     * Non-Authoritative Information
     */
    203: HttpAddConsenterPayload;
    /**
     * No Content
     */
    204: HttpRemoveConsenterPayload;
    /**
     * Reset Content
     */
    205: HttpUpdateConsenterPayload;
    /**
     * Partial Content
     */
    206: HttpUpdateEtcdRaftOptionsPayload;
    /**
     * Multi-Status
     */
    207: HttpUpdateBatchSizePayload;
    /**
     * Already Reported
     */
    208: HttpUpdateBatchTimeoutPayload;
};

export type PostDummyResponse = PostDummyResponses[keyof PostDummyResponses];

export type GetKeyProvidersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/key-providers';
};

export type GetKeyProvidersErrors = {
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type GetKeyProvidersError = GetKeyProvidersErrors[keyof GetKeyProvidersErrors];

export type GetKeyProvidersResponses = {
    /**
     * OK
     */
    200: Array<ModelsProviderResponse>;
};

export type GetKeyProvidersResponse = GetKeyProvidersResponses[keyof GetKeyProvidersResponses];

export type PostKeyProvidersData = {
    /**
     * Provider creation request
     */
    body: ModelsCreateProviderRequest;
    path?: never;
    query?: never;
    url: '/key-providers';
};

export type PostKeyProvidersErrors = {
    /**
     * Invalid request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type PostKeyProvidersError = PostKeyProvidersErrors[keyof PostKeyProvidersErrors];

export type PostKeyProvidersResponses = {
    /**
     * Created
     */
    201: ModelsProviderResponse;
};

export type PostKeyProvidersResponse = PostKeyProvidersResponses[keyof PostKeyProvidersResponses];

export type DeleteKeyProvidersByIdData = {
    body?: never;
    path: {
        /**
         * Provider ID
         */
        id: number;
    };
    query?: never;
    url: '/key-providers/{id}';
};

export type DeleteKeyProvidersByIdErrors = {
    /**
     * Invalid ID
     */
    400: {
        [key: string]: string;
    };
    /**
     * Provider not found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Provider has existing keys
     */
    409: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type DeleteKeyProvidersByIdError = DeleteKeyProvidersByIdErrors[keyof DeleteKeyProvidersByIdErrors];

export type DeleteKeyProvidersByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetKeyProvidersByIdData = {
    body?: never;
    path: {
        /**
         * Provider ID
         */
        id: number;
    };
    query?: never;
    url: '/key-providers/{id}';
};

export type GetKeyProvidersByIdErrors = {
    /**
     * Invalid ID
     */
    400: {
        [key: string]: string;
    };
    /**
     * Provider not found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type GetKeyProvidersByIdError = GetKeyProvidersByIdErrors[keyof GetKeyProvidersByIdErrors];

export type GetKeyProvidersByIdResponses = {
    /**
     * OK
     */
    200: ModelsProviderResponse;
};

export type GetKeyProvidersByIdResponse = GetKeyProvidersByIdResponses[keyof GetKeyProvidersByIdResponses];

export type GetKeysData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
    };
    url: '/keys';
};

export type GetKeysErrors = {
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type GetKeysError = GetKeysErrors[keyof GetKeysErrors];

export type GetKeysResponses = {
    /**
     * OK
     */
    200: ModelsPaginatedResponse;
};

export type GetKeysResponse = GetKeysResponses[keyof GetKeysResponses];

export type PostKeysData = {
    /**
     * Key creation request
     */
    body: ModelsCreateKeyRequest;
    path?: never;
    query?: never;
    url: '/keys';
};

export type PostKeysErrors = {
    /**
     * Invalid request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type PostKeysError = PostKeysErrors[keyof PostKeysErrors];

export type PostKeysResponses = {
    /**
     * Created
     */
    201: ModelsKeyResponse;
};

export type PostKeysResponse = PostKeysResponses[keyof PostKeysResponses];

export type GetKeysAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/keys/all';
};

export type GetKeysAllErrors = {
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type GetKeysAllError = GetKeysAllErrors[keyof GetKeysAllErrors];

export type GetKeysAllResponses = {
    /**
     * OK
     */
    200: Array<ModelsKeyResponse>;
};

export type GetKeysAllResponse = GetKeysAllResponses[keyof GetKeysAllResponses];

export type GetKeysFilterData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Algorithm type (e.g., RSA, ECDSA)
         */
        algorithm?: string;
        /**
         * Curve type (e.g., P256, P384, P521)
         */
        curve?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        pageSize?: number;
    };
    url: '/keys/filter';
};

export type GetKeysFilterErrors = {
    /**
     * Invalid parameters
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type GetKeysFilterError = GetKeysFilterErrors[keyof GetKeysFilterErrors];

export type GetKeysFilterResponses = {
    /**
     * OK
     */
    200: ModelsPaginatedResponse;
};

export type GetKeysFilterResponse = GetKeysFilterResponses[keyof GetKeysFilterResponses];

export type DeleteKeysByIdData = {
    body?: never;
    path: {
        /**
         * Key ID
         */
        id: number;
    };
    query?: never;
    url: '/keys/{id}';
};

export type DeleteKeysByIdErrors = {
    /**
     * Invalid ID
     */
    400: {
        [key: string]: string;
    };
    /**
     * Key not found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type DeleteKeysByIdError = DeleteKeysByIdErrors[keyof DeleteKeysByIdErrors];

export type DeleteKeysByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetKeysByIdData = {
    body?: never;
    path: {
        /**
         * Key ID
         */
        id: number;
    };
    query?: never;
    url: '/keys/{id}';
};

export type GetKeysByIdErrors = {
    /**
     * Invalid ID
     */
    400: {
        [key: string]: string;
    };
    /**
     * Key not found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type GetKeysByIdError = GetKeysByIdErrors[keyof GetKeysByIdErrors];

export type GetKeysByIdResponses = {
    /**
     * OK
     */
    200: ModelsKeyResponse;
};

export type GetKeysByIdResponse = GetKeysByIdResponses[keyof GetKeysByIdResponses];

export type PostKeysByKeyIdSignData = {
    /**
     * Certificate signing request
     */
    body: {
        [key: string]: unknown;
    };
    path: {
        /**
         * Key ID to sign
         */
        keyID: number;
    };
    query?: never;
    url: '/keys/{keyID}/sign';
};

export type PostKeysByKeyIdSignErrors = {
    /**
     * Invalid request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Key not found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: string;
    };
};

export type PostKeysByKeyIdSignError = PostKeysByKeyIdSignErrors[keyof PostKeysByKeyIdSignErrors];

export type PostKeysByKeyIdSignResponses = {
    /**
     * OK
     */
    200: ModelsKeyResponse;
};

export type PostKeysByKeyIdSignResponse = PostKeysByKeyIdSignResponses[keyof PostKeysByKeyIdSignResponses];

export type PostMetricsDeployData = {
    /**
     * Prometheus deployment configuration
     */
    body: TypesDeployPrometheusRequest;
    path?: never;
    query?: never;
    url: '/metrics/deploy';
};

export type PostMetricsDeployErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type PostMetricsDeployError = PostMetricsDeployErrors[keyof PostMetricsDeployErrors];

export type PostMetricsDeployResponses = {
    /**
     * OK
     */
    200: TypesMessageResponse;
};

export type PostMetricsDeployResponse = PostMetricsDeployResponses[keyof PostMetricsDeployResponses];

export type GetMetricsNodeByIdData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: string;
    };
    query?: {
        /**
         * PromQL query to filter metrics
         */
        query?: string;
    };
    url: '/metrics/node/{id}';
};

export type GetMetricsNodeByIdErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type GetMetricsNodeByIdError = GetMetricsNodeByIdErrors[keyof GetMetricsNodeByIdErrors];

export type GetMetricsNodeByIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetMetricsNodeByIdResponse = GetMetricsNodeByIdResponses[keyof GetMetricsNodeByIdResponses];

export type GetMetricsNodeByIdLabelByLabelValuesData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: string;
        /**
         * Label name
         */
        label: string;
    };
    query?: {
        /**
         * Metric matches (e.g. {__name__=\
         */
        match?: Array<unknown>;
    };
    url: '/metrics/node/{id}/label/{label}/values';
};

export type GetMetricsNodeByIdLabelByLabelValuesErrors = {
    /**
     * Bad request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: unknown;
    };
};

export type GetMetricsNodeByIdLabelByLabelValuesError = GetMetricsNodeByIdLabelByLabelValuesErrors[keyof GetMetricsNodeByIdLabelByLabelValuesErrors];

export type GetMetricsNodeByIdLabelByLabelValuesResponses = {
    /**
     * Label values
     */
    200: TypesLabelValuesResponse;
};

export type GetMetricsNodeByIdLabelByLabelValuesResponse = GetMetricsNodeByIdLabelByLabelValuesResponses[keyof GetMetricsNodeByIdLabelByLabelValuesResponses];

export type PostMetricsNodeByIdQueryData = {
    /**
     * Query parameters
     */
    body: TypesCustomQueryRequest;
    path: {
        /**
         * Node ID
         */
        id: string;
    };
    query?: never;
    url: '/metrics/node/{id}/query';
};

export type PostMetricsNodeByIdQueryErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type PostMetricsNodeByIdQueryError = PostMetricsNodeByIdQueryErrors[keyof PostMetricsNodeByIdQueryErrors];

export type PostMetricsNodeByIdQueryResponses = {
    /**
     * OK
     */
    200: CommonQueryResult;
};

export type PostMetricsNodeByIdQueryResponse = PostMetricsNodeByIdQueryResponses[keyof PostMetricsNodeByIdQueryResponses];

export type GetMetricsNodeByIdRangeData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: string;
    };
    query: {
        /**
         * PromQL query
         */
        query: string;
        /**
         * Start time (RFC3339 format)
         */
        start: string;
        /**
         * End time (RFC3339 format)
         */
        end: string;
        /**
         * Step duration (e.g. 1m, 5m, 1h)
         */
        step: string;
    };
    url: '/metrics/node/{id}/range';
};

export type GetMetricsNodeByIdRangeErrors = {
    /**
     * Bad request
     */
    400: {
        [key: string]: unknown;
    };
    /**
     * Internal server error
     */
    500: {
        [key: string]: unknown;
    };
};

export type GetMetricsNodeByIdRangeError = GetMetricsNodeByIdRangeErrors[keyof GetMetricsNodeByIdRangeErrors];

export type GetMetricsNodeByIdRangeResponses = {
    /**
     * Metrics data
     */
    200: TypesMetricsDataResponse;
};

export type GetMetricsNodeByIdRangeResponse = GetMetricsNodeByIdRangeResponses[keyof GetMetricsNodeByIdRangeResponses];

export type PostMetricsReloadData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/metrics/reload';
};

export type PostMetricsReloadErrors = {
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type PostMetricsReloadError = PostMetricsReloadErrors[keyof PostMetricsReloadErrors];

export type PostMetricsReloadResponses = {
    /**
     * OK
     */
    200: TypesMessageResponse;
};

export type PostMetricsReloadResponse = PostMetricsReloadResponses[keyof PostMetricsReloadResponses];

export type GetMetricsStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/metrics/status';
};

export type GetMetricsStatusErrors = {
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type GetMetricsStatusError = GetMetricsStatusErrors[keyof GetMetricsStatusErrors];

export type GetMetricsStatusResponses = {
    /**
     * OK
     */
    200: GithubComChainlaunchChainlaunchPkgMetricsCommonStatus;
};

export type GetMetricsStatusResponse = GetMetricsStatusResponses[keyof GetMetricsStatusResponses];

export type PostMetricsUndeployData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/metrics/undeploy';
};

export type PostMetricsUndeployErrors = {
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type PostMetricsUndeployError = PostMetricsUndeployErrors[keyof PostMetricsUndeployErrors];

export type PostMetricsUndeployResponses = {
    /**
     * OK
     */
    200: TypesMessageResponse;
};

export type PostMetricsUndeployResponse = PostMetricsUndeployResponses[keyof PostMetricsUndeployResponses];

export type GetNetworksBesuData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of items to return (default: 10)
         */
        limit?: number;
        /**
         * Number of items to skip (default: 0)
         */
        offset?: number;
    };
    url: '/networks/besu';
};

export type GetNetworksBesuErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksBesuError = GetNetworksBesuErrors[keyof GetNetworksBesuErrors];

export type GetNetworksBesuResponses = {
    /**
     * OK
     */
    200: HttpListBesuNetworksResponse;
};

export type GetNetworksBesuResponse = GetNetworksBesuResponses[keyof GetNetworksBesuResponses];

export type PostNetworksBesuData = {
    /**
     * Network creation request
     */
    body: HttpCreateBesuNetworkRequest;
    path?: never;
    query?: never;
    url: '/networks/besu';
};

export type PostNetworksBesuErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksBesuError = PostNetworksBesuErrors[keyof PostNetworksBesuErrors];

export type PostNetworksBesuResponses = {
    /**
     * OK
     */
    200: HttpBesuNetworkResponse;
};

export type PostNetworksBesuResponse = PostNetworksBesuResponses[keyof PostNetworksBesuResponses];

export type PostNetworksBesuImportData = {
    /**
     * Import network request
     */
    body: HttpImportBesuNetworkRequest;
    path?: never;
    query?: never;
    url: '/networks/besu/import';
};

export type PostNetworksBesuImportErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksBesuImportError = PostNetworksBesuImportErrors[keyof PostNetworksBesuImportErrors];

export type PostNetworksBesuImportResponses = {
    /**
     * OK
     */
    200: HttpImportNetworkResponse;
};

export type PostNetworksBesuImportResponse = PostNetworksBesuImportResponses[keyof PostNetworksBesuImportResponses];

export type DeleteNetworksBesuByIdData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/besu/{id}';
};

export type DeleteNetworksBesuByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type DeleteNetworksBesuByIdError = DeleteNetworksBesuByIdErrors[keyof DeleteNetworksBesuByIdErrors];

export type DeleteNetworksBesuByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetNetworksBesuByIdData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/besu/{id}';
};

export type GetNetworksBesuByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksBesuByIdError = GetNetworksBesuByIdErrors[keyof GetNetworksBesuByIdErrors];

export type GetNetworksBesuByIdResponses = {
    /**
     * OK
     */
    200: HttpBesuNetworkResponse;
};

export type GetNetworksBesuByIdResponse = GetNetworksBesuByIdResponses[keyof GetNetworksBesuByIdResponses];

export type GetNetworksFabricData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of items to return (default: 10)
         */
        limit?: number;
        /**
         * Number of items to skip (default: 0)
         */
        offset?: number;
    };
    url: '/networks/fabric';
};

export type GetNetworksFabricErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricError = GetNetworksFabricErrors[keyof GetNetworksFabricErrors];

export type GetNetworksFabricResponses = {
    /**
     * OK
     */
    200: HttpListNetworksResponse;
};

export type GetNetworksFabricResponse = GetNetworksFabricResponses[keyof GetNetworksFabricResponses];

export type PostNetworksFabricData = {
    /**
     * Network creation request
     */
    body: HttpCreateFabricNetworkRequest;
    path?: never;
    query?: never;
    url: '/networks/fabric';
};

export type PostNetworksFabricErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricError = PostNetworksFabricErrors[keyof PostNetworksFabricErrors];

export type PostNetworksFabricResponses = {
    /**
     * Created
     */
    201: HttpNetworkResponse;
};

export type PostNetworksFabricResponse = PostNetworksFabricResponses[keyof PostNetworksFabricResponses];

export type GetNetworksFabricByNameByNameData = {
    body?: never;
    path: {
        /**
         * Network Slug
         */
        slug: string;
    };
    query?: never;
    url: '/networks/fabric/by-name/{name}';
};

export type GetNetworksFabricByNameByNameErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByNameByNameError = GetNetworksFabricByNameByNameErrors[keyof GetNetworksFabricByNameByNameErrors];

export type GetNetworksFabricByNameByNameResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type GetNetworksFabricByNameByNameResponse = GetNetworksFabricByNameByNameResponses[keyof GetNetworksFabricByNameByNameResponses];

export type PostNetworksFabricImportData = {
    /**
     * Import network request
     */
    body: HttpImportFabricNetworkRequest;
    path?: never;
    query?: never;
    url: '/networks/fabric/import';
};

export type PostNetworksFabricImportErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricImportError = PostNetworksFabricImportErrors[keyof PostNetworksFabricImportErrors];

export type PostNetworksFabricImportResponses = {
    /**
     * OK
     */
    200: HttpImportNetworkResponse;
};

export type PostNetworksFabricImportResponse = PostNetworksFabricImportResponses[keyof PostNetworksFabricImportResponses];

export type PostNetworksFabricImportWithOrgData = {
    /**
     * Import network with org request
     */
    body: HttpImportFabricNetworkWithOrgRequest;
    path?: never;
    query?: never;
    url: '/networks/fabric/import-with-org';
};

export type PostNetworksFabricImportWithOrgErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricImportWithOrgError = PostNetworksFabricImportWithOrgErrors[keyof PostNetworksFabricImportWithOrgErrors];

export type PostNetworksFabricImportWithOrgResponses = {
    /**
     * OK
     */
    200: HttpImportNetworkResponse;
};

export type PostNetworksFabricImportWithOrgResponse = PostNetworksFabricImportWithOrgResponses[keyof PostNetworksFabricImportWithOrgResponses];

export type DeleteNetworksFabricByIdData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}';
};

export type DeleteNetworksFabricByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type DeleteNetworksFabricByIdError = DeleteNetworksFabricByIdErrors[keyof DeleteNetworksFabricByIdErrors];

export type DeleteNetworksFabricByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetNetworksFabricByIdData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}';
};

export type GetNetworksFabricByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdError = GetNetworksFabricByIdErrors[keyof GetNetworksFabricByIdErrors];

export type GetNetworksFabricByIdResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type GetNetworksFabricByIdResponse = GetNetworksFabricByIdResponses[keyof GetNetworksFabricByIdResponses];

export type PostNetworksFabricByIdAnchorPeersData = {
    /**
     * Anchor peers configuration
     */
    body: HttpSetAnchorPeersRequest;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/anchor-peers';
};

export type PostNetworksFabricByIdAnchorPeersErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdAnchorPeersError = PostNetworksFabricByIdAnchorPeersErrors[keyof PostNetworksFabricByIdAnchorPeersErrors];

export type PostNetworksFabricByIdAnchorPeersResponses = {
    /**
     * OK
     */
    200: HttpSetAnchorPeersResponse;
};

export type PostNetworksFabricByIdAnchorPeersResponse = PostNetworksFabricByIdAnchorPeersResponses[keyof PostNetworksFabricByIdAnchorPeersResponses];

export type GetNetworksFabricByIdBlocksData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: {
        /**
         * Number of blocks to return (default: 10)
         */
        limit?: number;
        /**
         * Number of blocks to skip (default: 0)
         */
        offset?: number;
        /**
         * Get blocks in reverse order (default: false)
         */
        reverse?: boolean;
    };
    url: '/networks/fabric/{id}/blocks';
};

export type GetNetworksFabricByIdBlocksErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdBlocksError = GetNetworksFabricByIdBlocksErrors[keyof GetNetworksFabricByIdBlocksErrors];

export type GetNetworksFabricByIdBlocksResponses = {
    /**
     * OK
     */
    200: HttpBlockListResponse;
};

export type GetNetworksFabricByIdBlocksResponse = GetNetworksFabricByIdBlocksResponses[keyof GetNetworksFabricByIdBlocksResponses];

export type GetNetworksFabricByIdBlocksByBlockNumData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Block Number
         */
        blockNum: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/blocks/{blockNum}';
};

export type GetNetworksFabricByIdBlocksByBlockNumErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdBlocksByBlockNumError = GetNetworksFabricByIdBlocksByBlockNumErrors[keyof GetNetworksFabricByIdBlocksByBlockNumErrors];

export type GetNetworksFabricByIdBlocksByBlockNumResponses = {
    /**
     * OK
     */
    200: HttpBlockTransactionsResponse;
};

export type GetNetworksFabricByIdBlocksByBlockNumResponse = GetNetworksFabricByIdBlocksByBlockNumResponses[keyof GetNetworksFabricByIdBlocksByBlockNumResponses];

export type GetNetworksFabricByIdChannelConfigData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/channel-config';
};

export type GetNetworksFabricByIdChannelConfigErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdChannelConfigError = GetNetworksFabricByIdChannelConfigErrors[keyof GetNetworksFabricByIdChannelConfigErrors];

export type GetNetworksFabricByIdChannelConfigResponses = {
    /**
     * OK
     */
    200: HttpChannelConfigResponse;
};

export type GetNetworksFabricByIdChannelConfigResponse = GetNetworksFabricByIdChannelConfigResponses[keyof GetNetworksFabricByIdChannelConfigResponses];

export type GetNetworksFabricByIdCurrentChannelConfigData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/current-channel-config';
};

export type GetNetworksFabricByIdCurrentChannelConfigErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdCurrentChannelConfigError = GetNetworksFabricByIdCurrentChannelConfigErrors[keyof GetNetworksFabricByIdCurrentChannelConfigErrors];

export type GetNetworksFabricByIdCurrentChannelConfigResponses = {
    /**
     * OK
     */
    200: HttpChannelConfigResponse;
};

export type GetNetworksFabricByIdCurrentChannelConfigResponse = GetNetworksFabricByIdCurrentChannelConfigResponses[keyof GetNetworksFabricByIdCurrentChannelConfigResponses];

export type GetNetworksFabricByIdInfoData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/info';
};

export type GetNetworksFabricByIdInfoErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdInfoError = GetNetworksFabricByIdInfoErrors[keyof GetNetworksFabricByIdInfoErrors];

export type GetNetworksFabricByIdInfoResponses = {
    /**
     * OK
     */
    200: HttpChainInfoResponse;
};

export type GetNetworksFabricByIdInfoResponse = GetNetworksFabricByIdInfoResponses[keyof GetNetworksFabricByIdInfoResponses];

export type GetNetworksFabricByIdNodesData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/nodes';
};

export type GetNetworksFabricByIdNodesErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdNodesError = GetNetworksFabricByIdNodesErrors[keyof GetNetworksFabricByIdNodesErrors];

export type GetNetworksFabricByIdNodesResponses = {
    /**
     * OK
     */
    200: HttpGetNetworkNodesResponse;
};

export type GetNetworksFabricByIdNodesResponse = GetNetworksFabricByIdNodesResponses[keyof GetNetworksFabricByIdNodesResponses];

export type PostNetworksFabricByIdNodesData = {
    /**
     * Node addition request
     */
    body: HttpAddNodeToNetworkRequest;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/nodes';
};

export type PostNetworksFabricByIdNodesErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdNodesError = PostNetworksFabricByIdNodesErrors[keyof PostNetworksFabricByIdNodesErrors];

export type PostNetworksFabricByIdNodesResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type PostNetworksFabricByIdNodesResponse = PostNetworksFabricByIdNodesResponses[keyof PostNetworksFabricByIdNodesResponses];

export type DeleteNetworksFabricByIdOrderersByOrdererIdData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Orderer ID
         */
        ordererId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/orderers/{ordererId}';
};

export type DeleteNetworksFabricByIdOrderersByOrdererIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type DeleteNetworksFabricByIdOrderersByOrdererIdError = DeleteNetworksFabricByIdOrderersByOrdererIdErrors[keyof DeleteNetworksFabricByIdOrderersByOrdererIdErrors];

export type DeleteNetworksFabricByIdOrderersByOrdererIdResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type DeleteNetworksFabricByIdOrderersByOrdererIdResponse = DeleteNetworksFabricByIdOrderersByOrdererIdResponses[keyof DeleteNetworksFabricByIdOrderersByOrdererIdResponses];

export type PostNetworksFabricByIdOrderersByOrdererIdJoinData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Orderer ID
         */
        ordererId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/orderers/{ordererId}/join';
};

export type PostNetworksFabricByIdOrderersByOrdererIdJoinErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdOrderersByOrdererIdJoinError = PostNetworksFabricByIdOrderersByOrdererIdJoinErrors[keyof PostNetworksFabricByIdOrderersByOrdererIdJoinErrors];

export type PostNetworksFabricByIdOrderersByOrdererIdJoinResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type PostNetworksFabricByIdOrderersByOrdererIdJoinResponse = PostNetworksFabricByIdOrderersByOrdererIdJoinResponses[keyof PostNetworksFabricByIdOrderersByOrdererIdJoinResponses];

export type PostNetworksFabricByIdOrderersByOrdererIdUnjoinData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Orderer ID
         */
        ordererId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/orderers/{ordererId}/unjoin';
};

export type PostNetworksFabricByIdOrderersByOrdererIdUnjoinErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdOrderersByOrdererIdUnjoinError = PostNetworksFabricByIdOrderersByOrdererIdUnjoinErrors[keyof PostNetworksFabricByIdOrderersByOrdererIdUnjoinErrors];

export type PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponse = PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponses[keyof PostNetworksFabricByIdOrderersByOrdererIdUnjoinResponses];

export type PostNetworksFabricByIdOrganizationCrlData = {
    /**
     * Organization CRL update request
     */
    body: HttpUpdateOrganizationCrlRequest;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/organization-crl';
};

export type PostNetworksFabricByIdOrganizationCrlErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdOrganizationCrlError = PostNetworksFabricByIdOrganizationCrlErrors[keyof PostNetworksFabricByIdOrganizationCrlErrors];

export type PostNetworksFabricByIdOrganizationCrlResponses = {
    /**
     * OK
     */
    200: HttpUpdateOrganizationCrlResponse;
};

export type PostNetworksFabricByIdOrganizationCrlResponse = PostNetworksFabricByIdOrganizationCrlResponses[keyof PostNetworksFabricByIdOrganizationCrlResponses];

export type GetNetworksFabricByIdOrganizationsByOrgIdConfigData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Organization ID
         */
        orgId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/organizations/{orgId}/config';
};

export type GetNetworksFabricByIdOrganizationsByOrgIdConfigErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdOrganizationsByOrgIdConfigError = GetNetworksFabricByIdOrganizationsByOrgIdConfigErrors[keyof GetNetworksFabricByIdOrganizationsByOrgIdConfigErrors];

export type GetNetworksFabricByIdOrganizationsByOrgIdConfigResponses = {
    /**
     * Network configuration YAML
     */
    200: Blob | File;
};

export type GetNetworksFabricByIdOrganizationsByOrgIdConfigResponse = GetNetworksFabricByIdOrganizationsByOrgIdConfigResponses[keyof GetNetworksFabricByIdOrganizationsByOrgIdConfigResponses];

export type DeleteNetworksFabricByIdPeersByPeerIdData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Peer ID
         */
        peerId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/peers/{peerId}';
};

export type DeleteNetworksFabricByIdPeersByPeerIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type DeleteNetworksFabricByIdPeersByPeerIdError = DeleteNetworksFabricByIdPeersByPeerIdErrors[keyof DeleteNetworksFabricByIdPeersByPeerIdErrors];

export type DeleteNetworksFabricByIdPeersByPeerIdResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type DeleteNetworksFabricByIdPeersByPeerIdResponse = DeleteNetworksFabricByIdPeersByPeerIdResponses[keyof DeleteNetworksFabricByIdPeersByPeerIdResponses];

export type PostNetworksFabricByIdPeersByPeerIdJoinData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Peer ID
         */
        peerId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/peers/{peerId}/join';
};

export type PostNetworksFabricByIdPeersByPeerIdJoinErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdPeersByPeerIdJoinError = PostNetworksFabricByIdPeersByPeerIdJoinErrors[keyof PostNetworksFabricByIdPeersByPeerIdJoinErrors];

export type PostNetworksFabricByIdPeersByPeerIdJoinResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type PostNetworksFabricByIdPeersByPeerIdJoinResponse = PostNetworksFabricByIdPeersByPeerIdJoinResponses[keyof PostNetworksFabricByIdPeersByPeerIdJoinResponses];

export type PostNetworksFabricByIdPeersByPeerIdUnjoinData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Peer ID
         */
        peerId: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/peers/{peerId}/unjoin';
};

export type PostNetworksFabricByIdPeersByPeerIdUnjoinErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdPeersByPeerIdUnjoinError = PostNetworksFabricByIdPeersByPeerIdUnjoinErrors[keyof PostNetworksFabricByIdPeersByPeerIdUnjoinErrors];

export type PostNetworksFabricByIdPeersByPeerIdUnjoinResponses = {
    /**
     * OK
     */
    200: HttpNetworkResponse;
};

export type PostNetworksFabricByIdPeersByPeerIdUnjoinResponse = PostNetworksFabricByIdPeersByPeerIdUnjoinResponses[keyof PostNetworksFabricByIdPeersByPeerIdUnjoinResponses];

export type PostNetworksFabricByIdReloadBlockData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/reload-block';
};

export type PostNetworksFabricByIdReloadBlockErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Not Found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type PostNetworksFabricByIdReloadBlockError = PostNetworksFabricByIdReloadBlockErrors[keyof PostNetworksFabricByIdReloadBlockErrors];

export type PostNetworksFabricByIdReloadBlockResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type PostNetworksFabricByIdReloadBlockResponse = PostNetworksFabricByIdReloadBlockResponses[keyof PostNetworksFabricByIdReloadBlockResponses];

export type GetNetworksFabricByIdTransactionsByTxIdData = {
    body?: never;
    path: {
        /**
         * Network ID
         */
        id: number;
        /**
         * Transaction ID
         */
        txId: string;
    };
    query?: never;
    url: '/networks/fabric/{id}/transactions/{txId}';
};

export type GetNetworksFabricByIdTransactionsByTxIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type GetNetworksFabricByIdTransactionsByTxIdError = GetNetworksFabricByIdTransactionsByTxIdErrors[keyof GetNetworksFabricByIdTransactionsByTxIdErrors];

export type GetNetworksFabricByIdTransactionsByTxIdResponses = {
    /**
     * OK
     */
    200: HttpTransactionResponse;
};

export type GetNetworksFabricByIdTransactionsByTxIdResponse = GetNetworksFabricByIdTransactionsByTxIdResponses[keyof GetNetworksFabricByIdTransactionsByTxIdResponses];

export type PostNetworksFabricByIdUpdateConfigData = {
    /**
     * Config update operations
     */
    body: HttpUpdateFabricNetworkRequest;
    path: {
        /**
         * Network ID
         */
        id: number;
    };
    query?: never;
    url: '/networks/fabric/{id}/update-config';
};

export type PostNetworksFabricByIdUpdateConfigErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNetworksHttpErrorResponse;
};

export type PostNetworksFabricByIdUpdateConfigError = PostNetworksFabricByIdUpdateConfigErrors[keyof PostNetworksFabricByIdUpdateConfigErrors];

export type PostNetworksFabricByIdUpdateConfigResponses = {
    /**
     * OK
     */
    200: HttpConfigUpdateResponse;
};

export type PostNetworksFabricByIdUpdateConfigResponse = PostNetworksFabricByIdUpdateConfigResponses[keyof PostNetworksFabricByIdUpdateConfigResponses];

export type GetNodesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by blockchain platform
         */
        platform?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
    };
    url: '/nodes';
};

export type GetNodesErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesError = GetNodesErrors[keyof GetNodesErrors];

export type GetNodesResponses = {
    /**
     * OK
     */
    200: HttpPaginatedNodesResponse;
};

export type GetNodesResponse = GetNodesResponses[keyof GetNodesResponses];

export type PostNodesData = {
    /**
     * Node creation request
     */
    body: HttpCreateNodeRequest;
    path?: never;
    query?: never;
    url: '/nodes';
};

export type PostNodesErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type PostNodesError = PostNodesErrors[keyof PostNodesErrors];

export type PostNodesResponses = {
    /**
     * Created
     */
    201: HttpNodeResponse;
};

export type PostNodesResponse = PostNodesResponses[keyof PostNodesResponses];

export type GetNodesDefaultsBesuNodeData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of Besu nodes
         */
        besuNodes?: number;
    };
    url: '/nodes/defaults/besu-node';
};

export type GetNodesDefaultsBesuNodeErrors = {
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesDefaultsBesuNodeError = GetNodesDefaultsBesuNodeErrors[keyof GetNodesDefaultsBesuNodeErrors];

export type GetNodesDefaultsBesuNodeResponses = {
    /**
     * OK
     */
    200: HttpBesuNodeDefaultsResponse;
};

export type GetNodesDefaultsBesuNodeResponse = GetNodesDefaultsBesuNodeResponses[keyof GetNodesDefaultsBesuNodeResponses];

export type GetNodesDefaultsFabricData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Number of peer nodes
         */
        peerCount?: number;
        /**
         * Number of orderer nodes
         */
        ordererCount?: number;
        /**
         * Deployment mode
         */
        mode?: 'service' | 'docker';
    };
    url: '/nodes/defaults/fabric';
};

export type GetNodesDefaultsFabricErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesDefaultsFabricError = GetNodesDefaultsFabricErrors[keyof GetNodesDefaultsFabricErrors];

export type GetNodesDefaultsFabricResponses = {
    /**
     * OK
     */
    200: ServiceNodesDefaultsResult;
};

export type GetNodesDefaultsFabricResponse = GetNodesDefaultsFabricResponses[keyof GetNodesDefaultsFabricResponses];

export type GetNodesDefaultsFabricOrdererData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/nodes/defaults/fabric-orderer';
};

export type GetNodesDefaultsFabricOrdererErrors = {
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesDefaultsFabricOrdererError = GetNodesDefaultsFabricOrdererErrors[keyof GetNodesDefaultsFabricOrdererErrors];

export type GetNodesDefaultsFabricOrdererResponses = {
    /**
     * OK
     */
    200: ServiceNodeDefaults;
};

export type GetNodesDefaultsFabricOrdererResponse = GetNodesDefaultsFabricOrdererResponses[keyof GetNodesDefaultsFabricOrdererResponses];

export type GetNodesDefaultsFabricPeerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/nodes/defaults/fabric-peer';
};

export type GetNodesDefaultsFabricPeerErrors = {
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesDefaultsFabricPeerError = GetNodesDefaultsFabricPeerErrors[keyof GetNodesDefaultsFabricPeerErrors];

export type GetNodesDefaultsFabricPeerResponses = {
    /**
     * OK
     */
    200: ServiceNodeDefaults;
};

export type GetNodesDefaultsFabricPeerResponse = GetNodesDefaultsFabricPeerResponses[keyof GetNodesDefaultsFabricPeerResponses];

export type GetNodesPlatformByPlatformData = {
    body?: never;
    path: {
        /**
         * Blockchain platform (FABRIC/BESU)
         */
        platform: 'FABRIC' | 'BESU';
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
    };
    url: '/nodes/platform/{platform}';
};

export type GetNodesPlatformByPlatformErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesPlatformByPlatformError = GetNodesPlatformByPlatformErrors[keyof GetNodesPlatformByPlatformErrors];

export type GetNodesPlatformByPlatformResponses = {
    /**
     * OK
     */
    200: HttpPaginatedNodesResponse;
};

export type GetNodesPlatformByPlatformResponse = GetNodesPlatformByPlatformResponses[keyof GetNodesPlatformByPlatformResponses];

export type DeleteNodesByIdData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: never;
    url: '/nodes/{id}';
};

export type DeleteNodesByIdErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type DeleteNodesByIdError = DeleteNodesByIdErrors[keyof DeleteNodesByIdErrors];

export type DeleteNodesByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetNodesByIdData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: never;
    url: '/nodes/{id}';
};

export type GetNodesByIdErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesByIdError = GetNodesByIdErrors[keyof GetNodesByIdErrors];

export type GetNodesByIdResponses = {
    /**
     * OK
     */
    200: HttpNodeResponse;
};

export type GetNodesByIdResponse = GetNodesByIdResponses[keyof GetNodesByIdResponses];

export type PutNodesByIdData = {
    /**
     * Update node request
     */
    body: HttpUpdateNodeRequest;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: never;
    url: '/nodes/{id}';
};

export type PutNodesByIdErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type PutNodesByIdError = PutNodesByIdErrors[keyof PutNodesByIdErrors];

export type PutNodesByIdResponses = {
    /**
     * OK
     */
    200: HttpNodeResponse;
};

export type PutNodesByIdResponse = PutNodesByIdResponses[keyof PutNodesByIdResponses];

export type PostNodesByIdCertificatesRenewData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: never;
    url: '/nodes/{id}/certificates/renew';
};

export type PostNodesByIdCertificatesRenewErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type PostNodesByIdCertificatesRenewError = PostNodesByIdCertificatesRenewErrors[keyof PostNodesByIdCertificatesRenewErrors];

export type PostNodesByIdCertificatesRenewResponses = {
    /**
     * OK
     */
    200: HttpNodeResponse;
};

export type PostNodesByIdCertificatesRenewResponse = PostNodesByIdCertificatesRenewResponses[keyof PostNodesByIdCertificatesRenewResponses];

export type GetNodesByIdChannelsData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: never;
    url: '/nodes/{id}/channels';
};

export type GetNodesByIdChannelsErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesByIdChannelsError = GetNodesByIdChannelsErrors[keyof GetNodesByIdChannelsErrors];

export type GetNodesByIdChannelsResponses = {
    /**
     * OK
     */
    200: HttpNodeChannelsResponse;
};

export type GetNodesByIdChannelsResponse = GetNodesByIdChannelsResponses[keyof GetNodesByIdChannelsResponses];

export type GetNodesByIdChannelsByChannelIdChaincodesData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
        /**
         * Channel ID
         */
        channelID: string;
    };
    query?: never;
    url: '/nodes/{id}/channels/{channelID}/chaincodes';
};

export type GetNodesByIdChannelsByChannelIdChaincodesErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesByIdChannelsByChannelIdChaincodesError = GetNodesByIdChannelsByChannelIdChaincodesErrors[keyof GetNodesByIdChannelsByChannelIdChaincodesErrors];

export type GetNodesByIdChannelsByChannelIdChaincodesResponses = {
    /**
     * OK
     */
    200: Array<HttpChaincodeResponse>;
};

export type GetNodesByIdChannelsByChannelIdChaincodesResponse = GetNodesByIdChannelsByChannelIdChaincodesResponses[keyof GetNodesByIdChannelsByChannelIdChaincodesResponses];

export type GetNodesByIdEventsData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        limit?: number;
    };
    url: '/nodes/{id}/events';
};

export type GetNodesByIdEventsErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesByIdEventsError = GetNodesByIdEventsErrors[keyof GetNodesByIdEventsErrors];

export type GetNodesByIdEventsResponses = {
    /**
     * OK
     */
    200: HttpPaginatedNodeEventsResponse;
};

export type GetNodesByIdEventsResponse = GetNodesByIdEventsResponses[keyof GetNodesByIdEventsResponses];

export type GetNodesByIdLogsData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: {
        /**
         * Follow logs
         */
        follow?: boolean;
        /**
         * Number of lines to show from the end
         */
        tail?: number;
    };
    url: '/nodes/{id}/logs';
};

export type GetNodesByIdLogsErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type GetNodesByIdLogsError = GetNodesByIdLogsErrors[keyof GetNodesByIdLogsErrors];

export type GetNodesByIdLogsResponses = {
    /**
     * Log stream
     */
    200: string;
};

export type GetNodesByIdLogsResponse = GetNodesByIdLogsResponses[keyof GetNodesByIdLogsResponses];

export type PostNodesByIdRestartData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: never;
    url: '/nodes/{id}/restart';
};

export type PostNodesByIdRestartErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type PostNodesByIdRestartError = PostNodesByIdRestartErrors[keyof PostNodesByIdRestartErrors];

export type PostNodesByIdRestartResponses = {
    /**
     * OK
     */
    200: HttpNodeResponse;
};

export type PostNodesByIdRestartResponse = PostNodesByIdRestartResponses[keyof PostNodesByIdRestartResponses];

export type PostNodesByIdStartData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: never;
    url: '/nodes/{id}/start';
};

export type PostNodesByIdStartErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type PostNodesByIdStartError = PostNodesByIdStartErrors[keyof PostNodesByIdStartErrors];

export type PostNodesByIdStartResponses = {
    /**
     * OK
     */
    200: HttpNodeResponse;
};

export type PostNodesByIdStartResponse = PostNodesByIdStartResponses[keyof PostNodesByIdStartResponses];

export type PostNodesByIdStopData = {
    body?: never;
    path: {
        /**
         * Node ID
         */
        id: number;
    };
    query?: never;
    url: '/nodes/{id}/stop';
};

export type PostNodesByIdStopErrors = {
    /**
     * Validation error
     */
    400: ResponseErrorResponse;
    /**
     * Node not found
     */
    404: ResponseErrorResponse;
    /**
     * Internal server error
     */
    500: ResponseErrorResponse;
};

export type PostNodesByIdStopError = PostNodesByIdStopErrors[keyof PostNodesByIdStopErrors];

export type PostNodesByIdStopResponses = {
    /**
     * OK
     */
    200: HttpNodeResponse;
};

export type PostNodesByIdStopResponse = PostNodesByIdStopResponses[keyof PostNodesByIdStopResponses];

export type GetNotificationsProvidersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/notifications/providers';
};

export type GetNotificationsProvidersErrors = {
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
};

export type GetNotificationsProvidersError = GetNotificationsProvidersErrors[keyof GetNotificationsProvidersErrors];

export type GetNotificationsProvidersResponses = {
    /**
     * OK
     */
    200: Array<HttpProviderResponse>;
};

export type GetNotificationsProvidersResponse = GetNotificationsProvidersResponses[keyof GetNotificationsProvidersResponses];

export type PostNotificationsProvidersData = {
    /**
     * Provider creation request
     */
    body: HttpCreateProviderRequest;
    path?: never;
    query?: never;
    url: '/notifications/providers';
};

export type PostNotificationsProvidersErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
};

export type PostNotificationsProvidersError = PostNotificationsProvidersErrors[keyof PostNotificationsProvidersErrors];

export type PostNotificationsProvidersResponses = {
    /**
     * Created
     */
    201: HttpProviderResponse;
};

export type PostNotificationsProvidersResponse = PostNotificationsProvidersResponses[keyof PostNotificationsProvidersResponses];

export type DeleteNotificationsProvidersByIdData = {
    body?: never;
    path: {
        /**
         * Provider ID
         */
        id: number;
    };
    query?: never;
    url: '/notifications/providers/{id}';
};

export type DeleteNotificationsProvidersByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
};

export type DeleteNotificationsProvidersByIdError = DeleteNotificationsProvidersByIdErrors[keyof DeleteNotificationsProvidersByIdErrors];

export type DeleteNotificationsProvidersByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetNotificationsProvidersByIdData = {
    body?: never;
    path: {
        /**
         * Provider ID
         */
        id: number;
    };
    query?: never;
    url: '/notifications/providers/{id}';
};

export type GetNotificationsProvidersByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
};

export type GetNotificationsProvidersByIdError = GetNotificationsProvidersByIdErrors[keyof GetNotificationsProvidersByIdErrors];

export type GetNotificationsProvidersByIdResponses = {
    /**
     * OK
     */
    200: HttpProviderResponse;
};

export type GetNotificationsProvidersByIdResponse = GetNotificationsProvidersByIdResponses[keyof GetNotificationsProvidersByIdResponses];

export type PutNotificationsProvidersByIdData = {
    /**
     * Provider update request
     */
    body: HttpUpdateProviderRequest;
    path: {
        /**
         * Provider ID
         */
        id: number;
    };
    query?: never;
    url: '/notifications/providers/{id}';
};

export type PutNotificationsProvidersByIdErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Not Found
     */
    404: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
};

export type PutNotificationsProvidersByIdError = PutNotificationsProvidersByIdErrors[keyof PutNotificationsProvidersByIdErrors];

export type PutNotificationsProvidersByIdResponses = {
    /**
     * OK
     */
    200: HttpProviderResponse;
};

export type PutNotificationsProvidersByIdResponse = PutNotificationsProvidersByIdResponses[keyof PutNotificationsProvidersByIdResponses];

export type PostNotificationsProvidersByIdTestData = {
    /**
     * Test provider request
     */
    body: HttpTestProviderRequest;
    path: {
        /**
         * Provider ID
         */
        id: number;
    };
    query?: never;
    url: '/notifications/providers/{id}/test';
};

export type PostNotificationsProvidersByIdTestErrors = {
    /**
     * Bad Request
     */
    400: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
    /**
     * Internal Server Error
     */
    500: GithubComChainlaunchChainlaunchPkgNotificationsHttpErrorResponse;
};

export type PostNotificationsProvidersByIdTestError = PostNotificationsProvidersByIdTestErrors[keyof PostNotificationsProvidersByIdTestErrors];

export type PostNotificationsProvidersByIdTestResponses = {
    /**
     * OK
     */
    200: HttpTestProviderResponse;
};

export type PostNotificationsProvidersByIdTestResponse = PostNotificationsProvidersByIdTestResponses[keyof PostNotificationsProvidersByIdTestResponses];

export type GetOrganizationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Maximum number of organizations to return
         */
        limit?: number;
        /**
         * Number of organizations to skip
         */
        offset?: number;
    };
    url: '/organizations';
};

export type GetOrganizationsErrors = {
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type GetOrganizationsError = GetOrganizationsErrors[keyof GetOrganizationsErrors];

export type GetOrganizationsResponses = {
    /**
     * OK
     */
    200: HandlerPaginatedOrganizationsResponse;
};

export type GetOrganizationsResponse = GetOrganizationsResponses[keyof GetOrganizationsResponses];

export type PostOrganizationsData = {
    /**
     * Organization creation request
     */
    body: HandlerCreateOrganizationRequest;
    path?: never;
    query?: never;
    url: '/organizations';
};

export type PostOrganizationsErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type PostOrganizationsError = PostOrganizationsErrors[keyof PostOrganizationsErrors];

export type PostOrganizationsResponses = {
    /**
     * Created
     */
    201: HandlerOrganizationResponse;
};

export type PostOrganizationsResponse = PostOrganizationsResponses[keyof PostOrganizationsResponses];

export type GetOrganizationsByMspidByMspidData = {
    body?: never;
    path: {
        /**
         * MSP ID
         */
        mspid: string;
    };
    query?: never;
    url: '/organizations/by-mspid/{mspid}';
};

export type GetOrganizationsByMspidByMspidErrors = {
    /**
     * Not Found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type GetOrganizationsByMspidByMspidError = GetOrganizationsByMspidByMspidErrors[keyof GetOrganizationsByMspidByMspidErrors];

export type GetOrganizationsByMspidByMspidResponses = {
    /**
     * OK
     */
    200: HandlerOrganizationResponse;
};

export type GetOrganizationsByMspidByMspidResponse = GetOrganizationsByMspidByMspidResponses[keyof GetOrganizationsByMspidByMspidResponses];

export type DeleteOrganizationsByIdData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        id: number;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type DeleteOrganizationsByIdErrors = {
    /**
     * Not Found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type DeleteOrganizationsByIdError = DeleteOrganizationsByIdErrors[keyof DeleteOrganizationsByIdErrors];

export type DeleteOrganizationsByIdResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetOrganizationsByIdData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        id: number;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type GetOrganizationsByIdErrors = {
    /**
     * Not Found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type GetOrganizationsByIdError = GetOrganizationsByIdErrors[keyof GetOrganizationsByIdErrors];

export type GetOrganizationsByIdResponses = {
    /**
     * OK
     */
    200: HandlerOrganizationResponse;
};

export type GetOrganizationsByIdResponse = GetOrganizationsByIdResponses[keyof GetOrganizationsByIdResponses];

export type PutOrganizationsByIdData = {
    /**
     * Organization update request
     */
    body: HandlerUpdateOrganizationRequest;
    path: {
        /**
         * Organization ID
         */
        id: number;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type PutOrganizationsByIdErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Not Found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type PutOrganizationsByIdError = PutOrganizationsByIdErrors[keyof PutOrganizationsByIdErrors];

export type PutOrganizationsByIdResponses = {
    /**
     * OK
     */
    200: HandlerOrganizationResponse;
};

export type PutOrganizationsByIdResponse = PutOrganizationsByIdResponses[keyof PutOrganizationsByIdResponses];

export type GetOrganizationsByIdCrlData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        id: number;
    };
    query?: never;
    url: '/organizations/{id}/crl';
};

export type GetOrganizationsByIdCrlErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type GetOrganizationsByIdCrlError = GetOrganizationsByIdCrlErrors[keyof GetOrganizationsByIdCrlErrors];

export type GetOrganizationsByIdCrlResponses = {
    /**
     * PEM encoded CRL
     */
    200: string;
};

export type GetOrganizationsByIdCrlResponse = GetOrganizationsByIdCrlResponses[keyof GetOrganizationsByIdCrlResponses];

export type PostOrganizationsByIdCrlRevokePemData = {
    /**
     * Certificate revocation request
     */
    body: HandlerRevokeCertificateByPemRequest;
    path: {
        /**
         * Organization ID
         */
        id: number;
    };
    query?: never;
    url: '/organizations/{id}/crl/revoke/pem';
};

export type PostOrganizationsByIdCrlRevokePemErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type PostOrganizationsByIdCrlRevokePemError = PostOrganizationsByIdCrlRevokePemErrors[keyof PostOrganizationsByIdCrlRevokePemErrors];

export type PostOrganizationsByIdCrlRevokePemResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type PostOrganizationsByIdCrlRevokePemResponse = PostOrganizationsByIdCrlRevokePemResponses[keyof PostOrganizationsByIdCrlRevokePemResponses];

export type DeleteOrganizationsByIdCrlRevokeSerialData = {
    /**
     * Certificate deletion request
     */
    body: HandlerDeleteRevokedCertificateRequest;
    path: {
        /**
         * Organization ID
         */
        id: number;
    };
    query?: never;
    url: '/organizations/{id}/crl/revoke/serial';
};

export type DeleteOrganizationsByIdCrlRevokeSerialErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Not Found
     */
    404: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type DeleteOrganizationsByIdCrlRevokeSerialError = DeleteOrganizationsByIdCrlRevokeSerialErrors[keyof DeleteOrganizationsByIdCrlRevokeSerialErrors];

export type DeleteOrganizationsByIdCrlRevokeSerialResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type DeleteOrganizationsByIdCrlRevokeSerialResponse = DeleteOrganizationsByIdCrlRevokeSerialResponses[keyof DeleteOrganizationsByIdCrlRevokeSerialResponses];

export type PostOrganizationsByIdCrlRevokeSerialData = {
    /**
     * Certificate revocation request
     */
    body: HandlerRevokeCertificateBySerialRequest;
    path: {
        /**
         * Organization ID
         */
        id: number;
    };
    query?: never;
    url: '/organizations/{id}/crl/revoke/serial';
};

export type PostOrganizationsByIdCrlRevokeSerialErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type PostOrganizationsByIdCrlRevokeSerialError = PostOrganizationsByIdCrlRevokeSerialErrors[keyof PostOrganizationsByIdCrlRevokeSerialErrors];

export type PostOrganizationsByIdCrlRevokeSerialResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type PostOrganizationsByIdCrlRevokeSerialResponse = PostOrganizationsByIdCrlRevokeSerialResponses[keyof PostOrganizationsByIdCrlRevokeSerialResponses];

export type GetOrganizationsByIdRevokedCertificatesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        id: number;
    };
    query?: never;
    url: '/organizations/{id}/revoked-certificates';
};

export type GetOrganizationsByIdRevokedCertificatesErrors = {
    /**
     * Bad Request
     */
    400: {
        [key: string]: string;
    };
    /**
     * Internal Server Error
     */
    500: {
        [key: string]: string;
    };
};

export type GetOrganizationsByIdRevokedCertificatesError = GetOrganizationsByIdRevokedCertificatesErrors[keyof GetOrganizationsByIdRevokedCertificatesErrors];

export type GetOrganizationsByIdRevokedCertificatesResponses = {
    /**
     * OK
     */
    200: Array<HandlerRevokedCertificateResponse>;
};

export type GetOrganizationsByIdRevokedCertificatesResponse = GetOrganizationsByIdRevokedCertificatesResponses[keyof GetOrganizationsByIdRevokedCertificatesResponses];

export type GetPluginsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/plugins';
};

export type GetPluginsErrors = {
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetPluginsError = GetPluginsErrors[keyof GetPluginsErrors];

export type GetPluginsResponses = {
    /**
     * OK
     */
    200: Array<GithubComChainlaunchChainlaunchPkgPluginTypesPlugin>;
};

export type GetPluginsResponse = GetPluginsResponses[keyof GetPluginsResponses];

export type PostPluginsData = {
    /**
     * Plugin to create
     */
    body: GithubComChainlaunchChainlaunchPkgPluginTypesPlugin;
    path?: never;
    query?: never;
    url: '/plugins';
};

export type PostPluginsErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostPluginsError = PostPluginsErrors[keyof PostPluginsErrors];

export type PostPluginsResponses = {
    /**
     * Created
     */
    201: GithubComChainlaunchChainlaunchPkgPluginTypesPlugin;
};

export type PostPluginsResponse = PostPluginsResponses[keyof PostPluginsResponses];

export type GetPluginsAvailableData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/plugins/available';
};

export type GetPluginsAvailableErrors = {
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type GetPluginsAvailableError = GetPluginsAvailableErrors[keyof GetPluginsAvailableErrors];

export type GetPluginsAvailableResponses = {
    /**
     * OK
     */
    200: PluginAvailablePluginsResponse;
};

export type GetPluginsAvailableResponse = GetPluginsAvailableResponses[keyof GetPluginsAvailableResponses];

export type PostPluginsAvailableRefreshData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/plugins/available/refresh';
};

export type PostPluginsAvailableRefreshErrors = {
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostPluginsAvailableRefreshError = PostPluginsAvailableRefreshErrors[keyof PostPluginsAvailableRefreshErrors];

export type PostPluginsAvailableRefreshResponses = {
    /**
     * OK
     */
    200: PluginAvailablePluginsResponse;
};

export type PostPluginsAvailableRefreshResponse = PostPluginsAvailableRefreshResponses[keyof PostPluginsAvailableRefreshResponses];

export type DeletePluginsByNameData = {
    body?: never;
    path: {
        /**
         * Plugin name
         */
        name: string;
    };
    query?: never;
    url: '/plugins/{name}';
};

export type DeletePluginsByNameErrors = {
    /**
     * Not Found
     */
    404: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type DeletePluginsByNameError = DeletePluginsByNameErrors[keyof DeletePluginsByNameErrors];

export type DeletePluginsByNameResponses = {
    /**
     * No Content
     */
    204: unknown;
};

export type GetPluginsByNameData = {
    body?: never;
    path: {
        /**
         * Plugin name
         */
        name: string;
    };
    query?: never;
    url: '/plugins/{name}';
};

export type GetPluginsByNameErrors = {
    /**
     * Not Found
     */
    404: string;
    /**
     * Internal Server Error
     */
    500: string;
};

export type GetPluginsByNameError = GetPluginsByNameErrors[keyof GetPluginsByNameErrors];

export type GetPluginsByNameResponses = {
    /**
     * OK
     */
    200: GithubComChainlaunchChainlaunchPkgPluginTypesPlugin;
};

export type GetPluginsByNameResponse = GetPluginsByNameResponses[keyof GetPluginsByNameResponses];

export type PutPluginsByNameData = {
    /**
     * Plugin to update
     */
    body: GithubComChainlaunchChainlaunchPkgPluginTypesPlugin;
    path: {
        /**
         * Plugin name
         */
        name: string;
    };
    query?: never;
    url: '/plugins/{name}';
};

export type PutPluginsByNameErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Not Found
     */
    404: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PutPluginsByNameError = PutPluginsByNameErrors[keyof PutPluginsByNameErrors];

export type PutPluginsByNameResponses = {
    /**
     * OK
     */
    200: GithubComChainlaunchChainlaunchPkgPluginTypesPlugin;
};

export type PutPluginsByNameResponse = PutPluginsByNameResponses[keyof PutPluginsByNameResponses];

export type PostPluginsByNameDeployData = {
    /**
     * Deployment parameters
     */
    body: {
        [key: string]: unknown;
    };
    path: {
        /**
         * Plugin name
         */
        name: string;
    };
    query?: never;
    url: '/plugins/{name}/deploy';
};

export type PostPluginsByNameDeployErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Not Found
     */
    404: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostPluginsByNameDeployError = PostPluginsByNameDeployErrors[keyof PostPluginsByNameDeployErrors];

export type PostPluginsByNameDeployResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetPluginsByNameDeploymentStatusData = {
    body?: never;
    path: {
        /**
         * Plugin name
         */
        name: string;
    };
    query?: never;
    url: '/plugins/{name}/deployment-status';
};

export type GetPluginsByNameDeploymentStatusErrors = {
    /**
     * Not Found
     */
    404: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type GetPluginsByNameDeploymentStatusError = GetPluginsByNameDeploymentStatusErrors[keyof GetPluginsByNameDeploymentStatusErrors];

export type GetPluginsByNameDeploymentStatusResponses = {
    /**
     * OK
     */
    200: TypesDeploymentStatus;
};

export type GetPluginsByNameDeploymentStatusResponse = GetPluginsByNameDeploymentStatusResponses[keyof GetPluginsByNameDeploymentStatusResponses];

export type PostPluginsByNameResumeData = {
    body?: never;
    path: {
        /**
         * Plugin name
         */
        name: string;
    };
    query?: never;
    url: '/plugins/{name}/resume';
};

export type PostPluginsByNameResumeErrors = {
    /**
     * Not Found
     */
    404: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostPluginsByNameResumeError = PostPluginsByNameResumeErrors[keyof PostPluginsByNameResumeErrors];

export type PostPluginsByNameResumeResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type PostPluginsByNameResumeResponse = PostPluginsByNameResumeResponses[keyof PostPluginsByNameResumeResponses];

export type GetPluginsByNameServicesData = {
    body?: never;
    path: {
        /**
         * Plugin name
         */
        name: string;
    };
    query?: never;
    url: '/plugins/{name}/services';
};

export type GetPluginsByNameServicesErrors = {
    /**
     * Not Found
     */
    404: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type GetPluginsByNameServicesError = GetPluginsByNameServicesErrors[keyof GetPluginsByNameServicesErrors];

export type GetPluginsByNameServicesResponses = {
    /**
     * OK
     */
    200: Array<PluginServiceStatus>;
};

export type GetPluginsByNameServicesResponse = GetPluginsByNameServicesResponses[keyof GetPluginsByNameServicesResponses];

export type GetPluginsByNameStatusData = {
    body?: never;
    path: {
        /**
         * Plugin name
         */
        name: string;
    };
    query?: never;
    url: '/plugins/{name}/status';
};

export type GetPluginsByNameStatusErrors = {
    /**
     * Not Found
     */
    404: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type GetPluginsByNameStatusError = GetPluginsByNameStatusErrors[keyof GetPluginsByNameStatusErrors];

export type GetPluginsByNameStatusResponses = {
    /**
     * OK
     */
    200: TypesDeploymentStatus;
};

export type GetPluginsByNameStatusResponse = GetPluginsByNameStatusResponses[keyof GetPluginsByNameStatusResponses];

export type PostPluginsByNameStopData = {
    body?: never;
    path: {
        /**
         * Plugin name
         */
        name: string;
    };
    query?: never;
    url: '/plugins/{name}/stop';
};

export type PostPluginsByNameStopErrors = {
    /**
     * Not Found
     */
    404: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostPluginsByNameStopError = PostPluginsByNameStopErrors[keyof PostPluginsByNameStopErrors];

export type PostPluginsByNameStopResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostProjectsByProjectIdDirsCreateData = {
    /**
     * Directory create info
     */
    body: DirsCreateDirRequest;
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
    query?: never;
    url: '/projects/{projectId}/dirs/create';
};

export type PostProjectsByProjectIdDirsCreateErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Unauthorized
     */
    401: ResponseErrorResponse;
    /**
     * Forbidden
     */
    403: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Conflict
     */
    409: ResponseErrorResponse;
    /**
     * Unprocessable Entity
     */
    422: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type PostProjectsByProjectIdDirsCreateError = PostProjectsByProjectIdDirsCreateErrors[keyof PostProjectsByProjectIdDirsCreateErrors];

export type PostProjectsByProjectIdDirsCreateResponses = {
    /**
     * Created
     */
    201: DirsCreateDirResponse;
};

export type PostProjectsByProjectIdDirsCreateResponse = PostProjectsByProjectIdDirsCreateResponses[keyof PostProjectsByProjectIdDirsCreateResponses];

export type DeleteProjectsByProjectIdDirsDeleteData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
    query: {
        /**
         * Project name
         */
        project: string;
        /**
         * Directory to delete, relative to project root
         */
        dir: string;
    };
    url: '/projects/{projectId}/dirs/delete';
};

export type DeleteProjectsByProjectIdDirsDeleteErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Unauthorized
     */
    401: ResponseErrorResponse;
    /**
     * Forbidden
     */
    403: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Conflict
     */
    409: ResponseErrorResponse;
    /**
     * Unprocessable Entity
     */
    422: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type DeleteProjectsByProjectIdDirsDeleteError = DeleteProjectsByProjectIdDirsDeleteErrors[keyof DeleteProjectsByProjectIdDirsDeleteErrors];

export type DeleteProjectsByProjectIdDirsDeleteResponses = {
    /**
     * OK
     */
    200: DirsDeleteDirResponse;
};

export type DeleteProjectsByProjectIdDirsDeleteResponse = DeleteProjectsByProjectIdDirsDeleteResponses[keyof DeleteProjectsByProjectIdDirsDeleteResponses];

export type GetProjectsByProjectIdDirsListData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
    query?: {
        /**
         * Directory to list, relative to project root
         */
        dir?: string;
    };
    url: '/projects/{projectId}/dirs/list';
};

export type GetProjectsByProjectIdDirsListErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Unauthorized
     */
    401: ResponseErrorResponse;
    /**
     * Forbidden
     */
    403: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Conflict
     */
    409: ResponseErrorResponse;
    /**
     * Unprocessable Entity
     */
    422: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetProjectsByProjectIdDirsListError = GetProjectsByProjectIdDirsListErrors[keyof GetProjectsByProjectIdDirsListErrors];

export type GetProjectsByProjectIdDirsListResponses = {
    /**
     * OK
     */
    200: DirsListEntriesResponse;
};

export type GetProjectsByProjectIdDirsListResponse = GetProjectsByProjectIdDirsListResponses[keyof GetProjectsByProjectIdDirsListResponses];

export type DeleteProjectsByProjectIdFilesDeleteData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
    query: {
        /**
         * File path relative to project root
         */
        path: string;
    };
    url: '/projects/{projectId}/files/delete';
};

export type DeleteProjectsByProjectIdFilesDeleteErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Unauthorized
     */
    401: ResponseErrorResponse;
    /**
     * Forbidden
     */
    403: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Conflict
     */
    409: ResponseErrorResponse;
    /**
     * Unprocessable Entity
     */
    422: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type DeleteProjectsByProjectIdFilesDeleteError = DeleteProjectsByProjectIdFilesDeleteErrors[keyof DeleteProjectsByProjectIdFilesDeleteErrors];

export type DeleteProjectsByProjectIdFilesDeleteResponses = {
    /**
     * OK
     */
    200: FilesDeleteFileResponse;
};

export type DeleteProjectsByProjectIdFilesDeleteResponse = DeleteProjectsByProjectIdFilesDeleteResponses[keyof DeleteProjectsByProjectIdFilesDeleteResponses];

export type GetProjectsByProjectIdFilesEntriesData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
    query?: never;
    url: '/projects/{projectId}/files/entries';
};

export type GetProjectsByProjectIdFilesEntriesErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Unauthorized
     */
    401: ResponseErrorResponse;
    /**
     * Forbidden
     */
    403: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Conflict
     */
    409: ResponseErrorResponse;
    /**
     * Unprocessable Entity
     */
    422: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetProjectsByProjectIdFilesEntriesError = GetProjectsByProjectIdFilesEntriesErrors[keyof GetProjectsByProjectIdFilesEntriesErrors];

export type GetProjectsByProjectIdFilesEntriesResponses = {
    /**
     * OK
     */
    200: FilesDirectoryTreeNode;
};

export type GetProjectsByProjectIdFilesEntriesResponse = GetProjectsByProjectIdFilesEntriesResponses[keyof GetProjectsByProjectIdFilesEntriesResponses];

export type GetProjectsByProjectIdFilesListData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
    query?: {
        /**
         * Directory to list, relative to project root
         */
        dir?: string;
    };
    url: '/projects/{projectId}/files/list';
};

export type GetProjectsByProjectIdFilesListErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Unauthorized
     */
    401: ResponseErrorResponse;
    /**
     * Forbidden
     */
    403: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Conflict
     */
    409: ResponseErrorResponse;
    /**
     * Unprocessable Entity
     */
    422: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetProjectsByProjectIdFilesListError = GetProjectsByProjectIdFilesListErrors[keyof GetProjectsByProjectIdFilesListErrors];

export type GetProjectsByProjectIdFilesListResponses = {
    /**
     * OK
     */
    200: FilesListFilesResponse;
};

export type GetProjectsByProjectIdFilesListResponse = GetProjectsByProjectIdFilesListResponses[keyof GetProjectsByProjectIdFilesListResponses];

export type GetProjectsByProjectIdFilesReadData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
    query: {
        /**
         * File path relative to project root
         */
        path: string;
    };
    url: '/projects/{projectId}/files/read';
};

export type GetProjectsByProjectIdFilesReadErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Unauthorized
     */
    401: ResponseErrorResponse;
    /**
     * Forbidden
     */
    403: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Conflict
     */
    409: ResponseErrorResponse;
    /**
     * Unprocessable Entity
     */
    422: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type GetProjectsByProjectIdFilesReadError = GetProjectsByProjectIdFilesReadErrors[keyof GetProjectsByProjectIdFilesReadErrors];

export type GetProjectsByProjectIdFilesReadResponses = {
    /**
     * OK
     */
    200: FilesReadFileResponse;
};

export type GetProjectsByProjectIdFilesReadResponse = GetProjectsByProjectIdFilesReadResponses[keyof GetProjectsByProjectIdFilesReadResponses];

export type PostProjectsByProjectIdFilesWriteData = {
    /**
     * File write info
     */
    body: FilesWriteFileRequest;
    path: {
        /**
         * Project ID
         */
        projectId: number;
    };
    query?: never;
    url: '/projects/{projectId}/files/write';
};

export type PostProjectsByProjectIdFilesWriteErrors = {
    /**
     * Bad Request
     */
    400: ResponseErrorResponse;
    /**
     * Unauthorized
     */
    401: ResponseErrorResponse;
    /**
     * Forbidden
     */
    403: ResponseErrorResponse;
    /**
     * Not Found
     */
    404: ResponseErrorResponse;
    /**
     * Conflict
     */
    409: ResponseErrorResponse;
    /**
     * Unprocessable Entity
     */
    422: ResponseErrorResponse;
    /**
     * Internal Server Error
     */
    500: ResponseErrorResponse;
};

export type PostProjectsByProjectIdFilesWriteError = PostProjectsByProjectIdFilesWriteErrors[keyof PostProjectsByProjectIdFilesWriteErrors];

export type PostProjectsByProjectIdFilesWriteResponses = {
    /**
     * Created
     */
    201: FilesWriteFileResponse;
};

export type PostProjectsByProjectIdFilesWriteResponse = PostProjectsByProjectIdFilesWriteResponses[keyof PostProjectsByProjectIdFilesWriteResponses];

export type PostScBesuDeployData = {
    /**
     * Besu contract deployment parameters
     */
    body: ChainlaunchdeployBesuDeployRequest;
    path?: never;
    query?: never;
    url: '/sc/besu/deploy';
};

export type PostScBesuDeployErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostScBesuDeployError = PostScBesuDeployErrors[keyof PostScBesuDeployErrors];

export type PostScBesuDeployResponses = {
    /**
     * OK
     */
    200: ChainlaunchdeployBesuDeployResponse;
};

export type PostScBesuDeployResponse = PostScBesuDeployResponses[keyof PostScBesuDeployResponses];

export type GetScFabricChaincodesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sc/fabric/chaincodes';
};

export type GetScFabricChaincodesErrors = {
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type GetScFabricChaincodesError = GetScFabricChaincodesErrors[keyof GetScFabricChaincodesErrors];

export type GetScFabricChaincodesResponses = {
    /**
     * OK
     */
    200: ChainlaunchdeployListChaincodesResponse;
};

export type GetScFabricChaincodesResponse = GetScFabricChaincodesResponses[keyof GetScFabricChaincodesResponses];

export type PostScFabricChaincodesData = {
    /**
     * Chaincode info
     */
    body: ChainlaunchdeployCreateChaincodeRequest;
    path?: never;
    query?: never;
    url: '/sc/fabric/chaincodes';
};

export type PostScFabricChaincodesErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostScFabricChaincodesError = PostScFabricChaincodesErrors[keyof PostScFabricChaincodesErrors];

export type PostScFabricChaincodesResponses = {
    /**
     * OK
     */
    200: ChainlaunchdeployCreateChaincodeResponse;
};

export type PostScFabricChaincodesResponse = PostScFabricChaincodesResponses[keyof PostScFabricChaincodesResponses];

export type GetScFabricChaincodesByChaincodeIdDefinitionsData = {
    body?: never;
    path: {
        /**
         * Chaincode ID
         */
        chaincodeId: number;
    };
    query?: never;
    url: '/sc/fabric/chaincodes/{chaincodeId}/definitions';
};

export type GetScFabricChaincodesByChaincodeIdDefinitionsErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type GetScFabricChaincodesByChaincodeIdDefinitionsError = GetScFabricChaincodesByChaincodeIdDefinitionsErrors[keyof GetScFabricChaincodesByChaincodeIdDefinitionsErrors];

export type GetScFabricChaincodesByChaincodeIdDefinitionsResponses = {
    /**
     * OK
     */
    200: ChainlaunchdeployListChaincodeDefinitionsResponse;
};

export type GetScFabricChaincodesByChaincodeIdDefinitionsResponse = GetScFabricChaincodesByChaincodeIdDefinitionsResponses[keyof GetScFabricChaincodesByChaincodeIdDefinitionsResponses];

export type PostScFabricChaincodesByChaincodeIdDefinitionsData = {
    /**
     * Chaincode definition info
     */
    body: ChainlaunchdeployCreateChaincodeDefinitionRequest;
    path?: never;
    query?: never;
    url: '/sc/fabric/chaincodes/{chaincodeId}/definitions';
};

export type PostScFabricChaincodesByChaincodeIdDefinitionsErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostScFabricChaincodesByChaincodeIdDefinitionsError = PostScFabricChaincodesByChaincodeIdDefinitionsErrors[keyof PostScFabricChaincodesByChaincodeIdDefinitionsErrors];

export type PostScFabricChaincodesByChaincodeIdDefinitionsResponses = {
    /**
     * OK
     */
    200: ChainlaunchdeployCreateChaincodeDefinitionResponse;
};

export type PostScFabricChaincodesByChaincodeIdDefinitionsResponse = PostScFabricChaincodesByChaincodeIdDefinitionsResponses[keyof PostScFabricChaincodesByChaincodeIdDefinitionsResponses];

export type GetScFabricChaincodesByIdData = {
    body?: never;
    path: {
        /**
         * Chaincode ID
         */
        id: number;
    };
    query?: never;
    url: '/sc/fabric/chaincodes/{id}';
};

export type GetScFabricChaincodesByIdErrors = {
    /**
     * Not Found
     */
    404: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type GetScFabricChaincodesByIdError = GetScFabricChaincodesByIdErrors[keyof GetScFabricChaincodesByIdErrors];

export type GetScFabricChaincodesByIdResponses = {
    /**
     * OK
     */
    200: ChainlaunchdeployFabricChaincodeDetail;
};

export type GetScFabricChaincodesByIdResponse = GetScFabricChaincodesByIdResponses[keyof GetScFabricChaincodesByIdResponses];

export type DeleteScFabricDefinitionsByDefinitionIdData = {
    body?: never;
    path: {
        /**
         * Chaincode Definition ID
         */
        definitionId: number;
    };
    query?: never;
    url: '/sc/fabric/definitions/{definitionId}';
};

export type DeleteScFabricDefinitionsByDefinitionIdErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type DeleteScFabricDefinitionsByDefinitionIdError = DeleteScFabricDefinitionsByDefinitionIdErrors[keyof DeleteScFabricDefinitionsByDefinitionIdErrors];

export type DeleteScFabricDefinitionsByDefinitionIdResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type DeleteScFabricDefinitionsByDefinitionIdResponse = DeleteScFabricDefinitionsByDefinitionIdResponses[keyof DeleteScFabricDefinitionsByDefinitionIdResponses];

export type PutScFabricDefinitionsByDefinitionIdData = {
    /**
     * Chaincode definition update info
     */
    body: ChainlaunchdeployUpdateChaincodeDefinitionRequest;
    path: {
        /**
         * Chaincode Definition ID
         */
        definitionId: number;
    };
    query?: never;
    url: '/sc/fabric/definitions/{definitionId}';
};

export type PutScFabricDefinitionsByDefinitionIdErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Not Found
     */
    404: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PutScFabricDefinitionsByDefinitionIdError = PutScFabricDefinitionsByDefinitionIdErrors[keyof PutScFabricDefinitionsByDefinitionIdErrors];

export type PutScFabricDefinitionsByDefinitionIdResponses = {
    /**
     * OK
     */
    200: ChainlaunchdeployChaincodeDefinitionResponse;
};

export type PutScFabricDefinitionsByDefinitionIdResponse = PutScFabricDefinitionsByDefinitionIdResponses[keyof PutScFabricDefinitionsByDefinitionIdResponses];

export type PostScFabricDefinitionsByDefinitionIdApproveData = {
    /**
     * Peer ID to use for approval
     */
    body: ChainlaunchdeployApproveChaincodeByDefinitionRequest;
    path: {
        /**
         * Chaincode Definition ID
         */
        definitionId: number;
    };
    query?: never;
    url: '/sc/fabric/definitions/{definitionId}/approve';
};

export type PostScFabricDefinitionsByDefinitionIdApproveErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostScFabricDefinitionsByDefinitionIdApproveError = PostScFabricDefinitionsByDefinitionIdApproveErrors[keyof PostScFabricDefinitionsByDefinitionIdApproveErrors];

export type PostScFabricDefinitionsByDefinitionIdApproveResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type PostScFabricDefinitionsByDefinitionIdApproveResponse = PostScFabricDefinitionsByDefinitionIdApproveResponses[keyof PostScFabricDefinitionsByDefinitionIdApproveResponses];

export type PostScFabricDefinitionsByDefinitionIdCommitData = {
    /**
     * Peer ID to use for commit
     */
    body: ChainlaunchdeployCommitChaincodeByDefinitionRequest;
    path: {
        /**
         * Chaincode Definition ID
         */
        definitionId: number;
    };
    query?: never;
    url: '/sc/fabric/definitions/{definitionId}/commit';
};

export type PostScFabricDefinitionsByDefinitionIdCommitErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostScFabricDefinitionsByDefinitionIdCommitError = PostScFabricDefinitionsByDefinitionIdCommitErrors[keyof PostScFabricDefinitionsByDefinitionIdCommitErrors];

export type PostScFabricDefinitionsByDefinitionIdCommitResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type PostScFabricDefinitionsByDefinitionIdCommitResponse = PostScFabricDefinitionsByDefinitionIdCommitResponses[keyof PostScFabricDefinitionsByDefinitionIdCommitResponses];

export type PostScFabricDefinitionsByDefinitionIdDeployData = {
    /**
     * Docker deploy params
     */
    body: ChainlaunchdeployDeployChaincodeByDefinitionRequest;
    path: {
        /**
         * Chaincode Definition ID
         */
        definitionId: number;
    };
    query?: never;
    url: '/sc/fabric/definitions/{definitionId}/deploy';
};

export type PostScFabricDefinitionsByDefinitionIdDeployErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostScFabricDefinitionsByDefinitionIdDeployError = PostScFabricDefinitionsByDefinitionIdDeployErrors[keyof PostScFabricDefinitionsByDefinitionIdDeployErrors];

export type PostScFabricDefinitionsByDefinitionIdDeployResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type PostScFabricDefinitionsByDefinitionIdDeployResponse = PostScFabricDefinitionsByDefinitionIdDeployResponses[keyof PostScFabricDefinitionsByDefinitionIdDeployResponses];

export type PostScFabricDefinitionsByDefinitionIdInstallData = {
    /**
     * Peer IDs to install on
     */
    body: ChainlaunchdeployInstallChaincodeByDefinitionRequest;
    path: {
        /**
         * Chaincode Definition ID
         */
        definitionId: number;
    };
    query?: never;
    url: '/sc/fabric/definitions/{definitionId}/install';
};

export type PostScFabricDefinitionsByDefinitionIdInstallErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostScFabricDefinitionsByDefinitionIdInstallError = PostScFabricDefinitionsByDefinitionIdInstallErrors[keyof PostScFabricDefinitionsByDefinitionIdInstallErrors];

export type PostScFabricDefinitionsByDefinitionIdInstallResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: string;
    };
};

export type PostScFabricDefinitionsByDefinitionIdInstallResponse = PostScFabricDefinitionsByDefinitionIdInstallResponses[keyof PostScFabricDefinitionsByDefinitionIdInstallResponses];

export type GetScFabricDefinitionsByDefinitionIdTimelineData = {
    body?: never;
    path: {
        /**
         * Chaincode Definition ID
         */
        definitionId: number;
    };
    query?: never;
    url: '/sc/fabric/definitions/{definitionId}/timeline';
};

export type GetScFabricDefinitionsByDefinitionIdTimelineErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type GetScFabricDefinitionsByDefinitionIdTimelineError = GetScFabricDefinitionsByDefinitionIdTimelineErrors[keyof GetScFabricDefinitionsByDefinitionIdTimelineErrors];

export type GetScFabricDefinitionsByDefinitionIdTimelineResponses = {
    /**
     * OK
     */
    200: Array<ChainlaunchdeployChaincodeDefinitionEvent>;
};

export type GetScFabricDefinitionsByDefinitionIdTimelineResponse = GetScFabricDefinitionsByDefinitionIdTimelineResponses[keyof GetScFabricDefinitionsByDefinitionIdTimelineResponses];

export type PostScFabricDeployData = {
    /**
     * Fabric chaincode deployment parameters
     */
    body: ChainlaunchdeployFabricDeployRequest;
    path?: never;
    query?: never;
    url: '/sc/fabric/deploy';
};

export type PostScFabricDeployErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostScFabricDeployError = PostScFabricDeployErrors[keyof PostScFabricDeployErrors];

export type PostScFabricDeployResponses = {
    /**
     * OK
     */
    200: ChainlaunchdeployFabricDeployResponse;
};

export type PostScFabricDeployResponse = PostScFabricDeployResponses[keyof PostScFabricDeployResponses];

export type PostScFabricDockerDeployData = {
    /**
     * Fabric chaincode Docker deployment parameters (host_port: optional, container_port: optional, defaults to 7052)
     */
    body: ChainlaunchdeployFabricChaincodeDockerDeployRequest;
    path?: never;
    query?: never;
    url: '/sc/fabric/docker-deploy';
};

export type PostScFabricDockerDeployErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostScFabricDockerDeployError = PostScFabricDockerDeployErrors[keyof PostScFabricDockerDeployErrors];

export type PostScFabricDockerDeployResponses = {
    /**
     * OK
     */
    200: ChainlaunchdeployFabricChaincodeDockerDeployResponse;
};

export type PostScFabricDockerDeployResponse = PostScFabricDockerDeployResponses[keyof PostScFabricDockerDeployResponses];

export type PostScFabricPeerByPeerIdChaincodeApproveData = {
    /**
     * Fabric chaincode approve parameters
     */
    body: ChainlaunchdeployFabricApproveRequest;
    path: {
        /**
         * Peer ID
         */
        peerId: string;
    };
    query?: never;
    url: '/sc/fabric/peer/{peerId}/chaincode/approve';
};

export type PostScFabricPeerByPeerIdChaincodeApproveErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostScFabricPeerByPeerIdChaincodeApproveError = PostScFabricPeerByPeerIdChaincodeApproveErrors[keyof PostScFabricPeerByPeerIdChaincodeApproveErrors];

export type PostScFabricPeerByPeerIdChaincodeApproveResponses = {
    /**
     * OK
     */
    200: ChainlaunchdeployFabricApproveResponse;
};

export type PostScFabricPeerByPeerIdChaincodeApproveResponse = PostScFabricPeerByPeerIdChaincodeApproveResponses[keyof PostScFabricPeerByPeerIdChaincodeApproveResponses];

export type PostScFabricPeerByPeerIdChaincodeCommitData = {
    /**
     * Fabric chaincode commit parameters
     */
    body: ChainlaunchdeployFabricCommitRequest;
    path: {
        /**
         * Peer ID
         */
        peerId: string;
    };
    query?: never;
    url: '/sc/fabric/peer/{peerId}/chaincode/commit';
};

export type PostScFabricPeerByPeerIdChaincodeCommitErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostScFabricPeerByPeerIdChaincodeCommitError = PostScFabricPeerByPeerIdChaincodeCommitErrors[keyof PostScFabricPeerByPeerIdChaincodeCommitErrors];

export type PostScFabricPeerByPeerIdChaincodeCommitResponses = {
    /**
     * OK
     */
    200: ChainlaunchdeployFabricCommitResponse;
};

export type PostScFabricPeerByPeerIdChaincodeCommitResponse = PostScFabricPeerByPeerIdChaincodeCommitResponses[keyof PostScFabricPeerByPeerIdChaincodeCommitResponses];

export type PostScFabricPeerByPeerIdChaincodeInstallData = {
    /**
     * Fabric chaincode install parameters
     */
    body: ChainlaunchdeployFabricInstallRequest;
    path: {
        /**
         * Peer ID
         */
        peerId: string;
    };
    query?: never;
    url: '/sc/fabric/peer/{peerId}/chaincode/install';
};

export type PostScFabricPeerByPeerIdChaincodeInstallErrors = {
    /**
     * Bad Request
     */
    400: ResponseResponse;
    /**
     * Internal Server Error
     */
    500: ResponseResponse;
};

export type PostScFabricPeerByPeerIdChaincodeInstallError = PostScFabricPeerByPeerIdChaincodeInstallErrors[keyof PostScFabricPeerByPeerIdChaincodeInstallErrors];

export type PostScFabricPeerByPeerIdChaincodeInstallResponses = {
    /**
     * OK
     */
    200: ChainlaunchdeployFabricInstallResponse;
};

export type PostScFabricPeerByPeerIdChaincodeInstallResponse = PostScFabricPeerByPeerIdChaincodeInstallResponses[keyof PostScFabricPeerByPeerIdChaincodeInstallResponses];

export type GetSettingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/settings';
};

export type GetSettingsResponses = {
    /**
     * OK
     */
    200: ServiceSetting;
};

export type GetSettingsResponse = GetSettingsResponses[keyof GetSettingsResponses];

export type PostSettingsData = {
    /**
     * Setting configuration
     */
    body: ServiceCreateSettingParams;
    path?: never;
    query?: never;
    url: '/settings';
};

export type PostSettingsResponses = {
    /**
     * OK
     */
    200: ServiceSetting;
};

export type PostSettingsResponse = PostSettingsResponses[keyof PostSettingsResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users';
};

export type GetUsersErrors = {
    /**
     * Unauthorized
     */
    401: ResponseResponse;
    /**
     * Forbidden - Requires admin role
     */
    403: ResponseResponse;
};

export type GetUsersError = GetUsersErrors[keyof GetUsersErrors];

export type GetUsersResponses = {
    /**
     * List of users
     */
    200: Array<AuthUserResponse>;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type PostUsersData = {
    /**
     * User to create
     */
    body: AuthCreateUserRequest;
    path?: never;
    query?: never;
    url: '/users';
};

export type PostUsersErrors = {
    /**
     * Invalid request body
     */
    400: ResponseResponse;
    /**
     * Unauthorized
     */
    401: ResponseResponse;
    /**
     * Forbidden - Requires admin role
     */
    403: ResponseResponse;
};

export type PostUsersError = PostUsersErrors[keyof PostUsersErrors];

export type PostUsersResponses = {
    /**
     * User created
     */
    201: AuthUserResponse;
};

export type PostUsersResponse = PostUsersResponses[keyof PostUsersResponses];

export type DeleteUsersByIdData = {
    body?: never;
    path: {
        /**
         * User ID
         */
        id: number;
    };
    query?: never;
    url: '/users/{id}';
};

export type DeleteUsersByIdErrors = {
    /**
     * Unauthorized
     */
    401: ResponseResponse;
    /**
     * Forbidden - Requires admin role
     */
    403: ResponseResponse;
    /**
     * User not found
     */
    404: ResponseResponse;
};

export type DeleteUsersByIdError = DeleteUsersByIdErrors[keyof DeleteUsersByIdErrors];

export type DeleteUsersByIdResponses = {
    /**
     * User deleted
     */
    204: unknown;
};

export type GetUsersByIdData = {
    body?: never;
    path: {
        /**
         * User ID
         */
        id: number;
    };
    query?: never;
    url: '/users/{id}';
};

export type GetUsersByIdErrors = {
    /**
     * Unauthorized
     */
    401: ResponseResponse;
    /**
     * Forbidden - Requires admin role
     */
    403: ResponseResponse;
    /**
     * User not found
     */
    404: ResponseResponse;
};

export type GetUsersByIdError = GetUsersByIdErrors[keyof GetUsersByIdErrors];

export type GetUsersByIdResponses = {
    /**
     * User details
     */
    200: AuthUserResponse;
};

export type GetUsersByIdResponse = GetUsersByIdResponses[keyof GetUsersByIdResponses];

export type PutUsersByIdData = {
    /**
     * User updates
     */
    body: AuthUpdateUserRequest;
    path: {
        /**
         * User ID
         */
        id: number;
    };
    query?: never;
    url: '/users/{id}';
};

export type PutUsersByIdErrors = {
    /**
     * Invalid request body
     */
    400: ResponseResponse;
    /**
     * Unauthorized
     */
    401: ResponseResponse;
    /**
     * Forbidden - Requires admin role
     */
    403: ResponseResponse;
    /**
     * User not found
     */
    404: ResponseResponse;
};

export type PutUsersByIdError = PutUsersByIdErrors[keyof PutUsersByIdErrors];

export type PutUsersByIdResponses = {
    /**
     * User updated
     */
    200: AuthUserResponse;
};

export type PutUsersByIdResponse = PutUsersByIdResponses[keyof PutUsersByIdResponses];

export type PutUsersByIdPasswordData = {
    /**
     * New password
     */
    body: AuthChangePasswordRequest;
    path: {
        /**
         * User ID
         */
        id: number;
    };
    query?: never;
    url: '/users/{id}/password';
};

export type PutUsersByIdPasswordErrors = {
    /**
     * Invalid request body
     */
    400: ResponseResponse;
    /**
     * Unauthorized
     */
    401: ResponseResponse;
    /**
     * Forbidden - Requires admin role or self-modification not allowed
     */
    403: ResponseResponse;
    /**
     * User not found
     */
    404: ResponseResponse;
};

export type PutUsersByIdPasswordError = PutUsersByIdPasswordErrors[keyof PutUsersByIdPasswordErrors];

export type PutUsersByIdPasswordResponses = {
    /**
     * Password updated successfully
     */
    200: {
        [key: string]: string;
    };
};

export type PutUsersByIdPasswordResponse = PutUsersByIdPasswordResponses[keyof PutUsersByIdPasswordResponses];

export type PutUsersByIdRoleData = {
    /**
     * New role
     */
    body: AuthUpdateUserRequest;
    path: {
        /**
         * User ID
         */
        id: number;
    };
    query?: never;
    url: '/users/{id}/role';
};

export type PutUsersByIdRoleErrors = {
    /**
     * Invalid request body
     */
    400: ResponseResponse;
    /**
     * Unauthorized
     */
    401: ResponseResponse;
    /**
     * Forbidden - Requires admin role or self-modification not allowed
     */
    403: ResponseResponse;
    /**
     * User not found
     */
    404: ResponseResponse;
};

export type PutUsersByIdRoleError = PutUsersByIdRoleErrors[keyof PutUsersByIdRoleErrors];

export type PutUsersByIdRoleResponses = {
    /**
     * User role updated
     */
    200: AuthUserResponse;
};

export type PutUsersByIdRoleResponse = PutUsersByIdRoleResponses[keyof PutUsersByIdRoleResponses];